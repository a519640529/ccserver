// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: iceage.proto

package iceage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess        OpResultCode = 0    //成功
	OpResultCode_OPRC_Error         OpResultCode = 1    //失败
	OpResultCode_OPRC_CoinNotEnough OpResultCode = 1056 //金币不足
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		1056: "OPRC_CoinNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":        0,
		"OPRC_Error":         1,
		"OPRC_CoinNotEnough": 1056,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_iceage_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_iceage_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{0}
}

//冰河世纪
type IceAgePacketID int32

const (
	IceAgePacketID_PACKET_IceAge_ZERO             IceAgePacketID = 0    // 弃用消息号
	IceAgePacketID_PACKET_SC_ICEAGE_ROOMINFO      IceAgePacketID = 7950 //房间信息
	IceAgePacketID_PACKET_CS_ICEAGE_PLAYEROP      IceAgePacketID = 7951 //玩家操作（客户->服务）
	IceAgePacketID_PACKET_SC_ICEAGE_PLAYEROP      IceAgePacketID = 7952 //玩家操作（服务->客户）
	IceAgePacketID_PACKET_SC_ICEAGE_ROOMSTATE     IceAgePacketID = 7953 //房间状态
	IceAgePacketID_PACKET_SC_ICEAGE_GAMEBILLED    IceAgePacketID = 7954 //游戏结算
	IceAgePacketID_PACKET_SC_ICEAGE_PLAYERHISTORY IceAgePacketID = 7955 //游戏记录
	IceAgePacketID_PACKET_SC_ICEAGE_BIGWINHISTORY IceAgePacketID = 7956 //大奖记录
)

// Enum value maps for IceAgePacketID.
var (
	IceAgePacketID_name = map[int32]string{
		0:    "PACKET_IceAge_ZERO",
		7950: "PACKET_SC_ICEAGE_ROOMINFO",
		7951: "PACKET_CS_ICEAGE_PLAYEROP",
		7952: "PACKET_SC_ICEAGE_PLAYEROP",
		7953: "PACKET_SC_ICEAGE_ROOMSTATE",
		7954: "PACKET_SC_ICEAGE_GAMEBILLED",
		7955: "PACKET_SC_ICEAGE_PLAYERHISTORY",
		7956: "PACKET_SC_ICEAGE_BIGWINHISTORY",
	}
	IceAgePacketID_value = map[string]int32{
		"PACKET_IceAge_ZERO":             0,
		"PACKET_SC_ICEAGE_ROOMINFO":      7950,
		"PACKET_CS_ICEAGE_PLAYEROP":      7951,
		"PACKET_SC_ICEAGE_PLAYEROP":      7952,
		"PACKET_SC_ICEAGE_ROOMSTATE":     7953,
		"PACKET_SC_ICEAGE_GAMEBILLED":    7954,
		"PACKET_SC_ICEAGE_PLAYERHISTORY": 7955,
		"PACKET_SC_ICEAGE_BIGWINHISTORY": 7956,
	}
)

func (x IceAgePacketID) Enum() *IceAgePacketID {
	p := new(IceAgePacketID)
	*p = x
	return p
}

func (x IceAgePacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceAgePacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_iceage_proto_enumTypes[1].Descriptor()
}

func (IceAgePacketID) Type() protoreflect.EnumType {
	return &file_iceage_proto_enumTypes[1]
}

func (x IceAgePacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceAgePacketID.Descriptor instead.
func (IceAgePacketID) EnumDescriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{1}
}

type IceAgePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                 //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	HeadOutLine int32    `protobuf:"varint,6,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,7,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"` //其他数据 如:ip 等
}

func (x *IceAgePlayerData) Reset() {
	*x = IceAgePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceAgePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceAgePlayerData) ProtoMessage() {}

func (x *IceAgePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceAgePlayerData.ProtoReflect.Descriptor instead.
func (*IceAgePlayerData) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{0}
}

func (x *IceAgePlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IceAgePlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *IceAgePlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *IceAgePlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *IceAgePlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *IceAgePlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *IceAgePlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *IceAgePlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间信息
type SCIceAgeRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId          int32               `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                    //房间id
	Creator         int32               `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                  //创建者SnId
	GameId          int32               `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                    //游戏id
	RoomMode        int32               `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                //游戏模式
	Params          []int32             `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`             //规则参数
	State           int32               `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`                      //房间当前状态
	BetLines        []int64             `protobuf:"varint,7,rep,packed,name=BetLines,proto3" json:"BetLines,omitempty"`         //玩家下注选线数组
	Chip            int32               `protobuf:"varint,8,opt,name=Chip,proto3" json:"Chip,omitempty"`                        //当前选择的押注
	Players         []*IceAgePlayerData `protobuf:"bytes,9,rep,name=Players,proto3" json:"Players,omitempty"`                   //房间内的玩家信息
	FreeTimes       int32               `protobuf:"varint,10,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`             //免费转动次数
	Jackpot         int64               `protobuf:"varint,11,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                 //奖池金额
	TotalPriceBonus int64               `protobuf:"varint,12,opt,name=TotalPriceBonus,proto3" json:"TotalPriceBonus,omitempty"` //总bonus分 大于0时代表小游戏还未结束
	SpinID          int64               `protobuf:"varint,13,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                   //操作ID
	ParamsEx        []int32             `protobuf:"varint,14,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`        //其他参数
	GameFreeId      int32               `protobuf:"varint,15,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	BilledData      *GameBilledData     `protobuf:"bytes,16,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //上一局结算信息，用于断线重连
}

func (x *SCIceAgeRoomInfo) Reset() {
	*x = SCIceAgeRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgeRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgeRoomInfo) ProtoMessage() {}

func (x *SCIceAgeRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgeRoomInfo.ProtoReflect.Descriptor instead.
func (*SCIceAgeRoomInfo) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{1}
}

func (x *SCIceAgeRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCIceAgeRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetBetLines() []int64 {
	if x != nil {
		return x.BetLines
	}
	return nil
}

func (x *SCIceAgeRoomInfo) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetPlayers() []*IceAgePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCIceAgeRoomInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetTotalPriceBonus() int64 {
	if x != nil {
		return x.TotalPriceBonus
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCIceAgeRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCIceAgeRoomInfo) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//玩家操作
type CSIceAgeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0:开始{0押注倍数,1-n选线} 1:玩家记录信息 2:大奖记录 3:小游戏选择{SpinID操作ID}
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSIceAgeOp) Reset() {
	*x = CSIceAgeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSIceAgeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSIceAgeOp) ProtoMessage() {}

func (x *CSIceAgeOp) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSIceAgeOp.ProtoReflect.Descriptor instead.
func (*CSIceAgeOp) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{2}
}

func (x *CSIceAgeOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSIceAgeOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCIceAgeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                    //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                         //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=iceage.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCIceAgeOp) Reset() {
	*x = SCIceAgeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgeOp) ProtoMessage() {}

func (x *SCIceAgeOp) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgeOp.ProtoReflect.Descriptor instead.
func (*SCIceAgeOp) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{3}
}

func (x *SCIceAgeOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCIceAgeOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCIceAgeOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCIceAgeOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//每条线的结算数据
type IceAgeLinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineID         int32   `protobuf:"varint,1,opt,name=LineID,proto3" json:"LineID,omitempty"`                  //中奖线路，20条线路中的一条
	PrizeID        int64   `protobuf:"varint,2,opt,name=PrizeID,proto3" json:"PrizeID,omitempty"`                //中线ID
	PrizeValue     int64   `protobuf:"varint,3,opt,name=PrizeValue,proto3" json:"PrizeValue,omitempty"`          //中奖分数
	Turn           int32   `protobuf:"varint,4,opt,name=Turn,proto3" json:"Turn,omitempty"`                      //消除次数
	PrizesFreespin int64   `protobuf:"varint,5,opt,name=PrizesFreespin,proto3" json:"PrizesFreespin,omitempty"`  //免费次数
	PrizesJackport int64   `protobuf:"varint,6,opt,name=PrizesJackport,proto3" json:"PrizesJackport,omitempty"`  //中奖分数
	PrizesBonus    []int64 `protobuf:"varint,7,rep,packed,name=PrizesBonus,proto3" json:"PrizesBonus,omitempty"` //小游戏奖励选项
	Items          []int32 `protobuf:"varint,8,rep,packed,name=Items,proto3" json:"Items,omitempty"`             //中奖位置编号
	RoleID         int32   `protobuf:"varint,9,opt,name=RoleID,proto3" json:"RoleID,omitempty"`                  //图标ID
}

func (x *IceAgeLinesInfo) Reset() {
	*x = IceAgeLinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceAgeLinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceAgeLinesInfo) ProtoMessage() {}

func (x *IceAgeLinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceAgeLinesInfo.ProtoReflect.Descriptor instead.
func (*IceAgeLinesInfo) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{4}
}

func (x *IceAgeLinesInfo) GetLineID() int32 {
	if x != nil {
		return x.LineID
	}
	return 0
}

func (x *IceAgeLinesInfo) GetPrizeID() int64 {
	if x != nil {
		return x.PrizeID
	}
	return 0
}

func (x *IceAgeLinesInfo) GetPrizeValue() int64 {
	if x != nil {
		return x.PrizeValue
	}
	return 0
}

func (x *IceAgeLinesInfo) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *IceAgeLinesInfo) GetPrizesFreespin() int64 {
	if x != nil {
		return x.PrizesFreespin
	}
	return 0
}

func (x *IceAgeLinesInfo) GetPrizesJackport() int64 {
	if x != nil {
		return x.PrizesJackport
	}
	return 0
}

func (x *IceAgeLinesInfo) GetPrizesBonus() []int64 {
	if x != nil {
		return x.PrizesBonus
	}
	return nil
}

func (x *IceAgeLinesInfo) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *IceAgeLinesInfo) GetRoleID() int32 {
	if x != nil {
		return x.RoleID
	}
	return 0
}

//图标数据
type IceAgeCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []int32 `protobuf:"varint,1,rep,packed,name=Card,proto3" json:"Card,omitempty"` //需要翻出的牌，数组15个,如：[1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 6]
}

func (x *IceAgeCards) Reset() {
	*x = IceAgeCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceAgeCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceAgeCards) ProtoMessage() {}

func (x *IceAgeCards) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceAgeCards.ProtoReflect.Descriptor instead.
func (*IceAgeCards) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{5}
}

func (x *IceAgeCards) GetCard() []int32 {
	if x != nil {
		return x.Card
	}
	return nil
}

type GameBilledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID          int64              `protobuf:"varint,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                    //操作ID
	SlotsData       []*IceAgeCards     `protobuf:"bytes,2,rep,name=SlotsData,proto3" json:"SlotsData,omitempty"`               //图标数据
	PrizesData      []*IceAgeLinesInfo `protobuf:"bytes,3,rep,name=PrizesData,proto3" json:"PrizesData,omitempty"`             //中奖的结果数组,存每条线的情况
	TotalBetValue   int64              `protobuf:"varint,4,opt,name=TotalBetValue,proto3" json:"TotalBetValue,omitempty"`      //总下注
	TotalPriceValue int64              `protobuf:"varint,5,opt,name=TotalPriceValue,proto3" json:"TotalPriceValue,omitempty"`  //中奖的总分数
	IsJackpot       bool               `protobuf:"varint,6,opt,name=IsJackpot,proto3" json:"IsJackpot,omitempty"`              //是否爆奖
	Jackpot         int64              `protobuf:"varint,7,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                  //奖池金额
	Balance         int64              `protobuf:"varint,8,opt,name=Balance,proto3" json:"Balance,omitempty"`                  //玩家余额
	TotalFreeSpin   int32              `protobuf:"varint,9,opt,name=TotalFreeSpin,proto3" json:"TotalFreeSpin,omitempty"`      //剩余免费转动次数
	TotalPriceBonus int64              `protobuf:"varint,10,opt,name=TotalPriceBonus,proto3" json:"TotalPriceBonus,omitempty"` //总bonus数
	TotalJackpot    int64              `protobuf:"varint,11,opt,name=TotalJackpot,proto3" json:"TotalJackpot,omitempty"`       //爆奖金额
	ResponseStatus  int64              `protobuf:"varint,12,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`   //状态码
}

func (x *GameBilledData) Reset() {
	*x = GameBilledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBilledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBilledData) ProtoMessage() {}

func (x *GameBilledData) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBilledData.ProtoReflect.Descriptor instead.
func (*GameBilledData) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{6}
}

func (x *GameBilledData) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *GameBilledData) GetSlotsData() []*IceAgeCards {
	if x != nil {
		return x.SlotsData
	}
	return nil
}

func (x *GameBilledData) GetPrizesData() []*IceAgeLinesInfo {
	if x != nil {
		return x.PrizesData
	}
	return nil
}

func (x *GameBilledData) GetTotalBetValue() int64 {
	if x != nil {
		return x.TotalBetValue
	}
	return 0
}

func (x *GameBilledData) GetTotalPriceValue() int64 {
	if x != nil {
		return x.TotalPriceValue
	}
	return 0
}

func (x *GameBilledData) GetIsJackpot() bool {
	if x != nil {
		return x.IsJackpot
	}
	return false
}

func (x *GameBilledData) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *GameBilledData) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GameBilledData) GetTotalFreeSpin() int32 {
	if x != nil {
		return x.TotalFreeSpin
	}
	return 0
}

func (x *GameBilledData) GetTotalPriceBonus() int64 {
	if x != nil {
		return x.TotalPriceBonus
	}
	return 0
}

func (x *GameBilledData) GetTotalJackpot() int64 {
	if x != nil {
		return x.TotalJackpot
	}
	return 0
}

func (x *GameBilledData) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

//发送给客户端的数据 结算
type SCIceAgeGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BilledData *GameBilledData `protobuf:"bytes,1,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //结算信息
}

func (x *SCIceAgeGameBilled) Reset() {
	*x = SCIceAgeGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgeGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgeGameBilled) ProtoMessage() {}

func (x *SCIceAgeGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgeGameBilled.ProtoReflect.Descriptor instead.
func (*SCIceAgeGameBilled) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{7}
}

func (x *SCIceAgeGameBilled) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

// 玩家记录信息
type IceAgePlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID          string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                    // 操作id
	CreatedTime     int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`         // 时间
	TotalBetValue   int64  `protobuf:"varint,3,opt,name=TotalBetValue,proto3" json:"TotalBetValue,omitempty"`     // 总下注
	TotalPriceValue int64  `protobuf:"varint,4,opt,name=TotalPriceValue,proto3" json:"TotalPriceValue,omitempty"` // 总赢分
	IsFree          bool   `protobuf:"varint,5,opt,name=IsFree,proto3" json:"IsFree,omitempty"`                   // 是否免费
	TotalBonusValue int64  `protobuf:"varint,6,opt,name=TotalBonusValue,proto3" json:"TotalBonusValue,omitempty"` // 是否免费
}

func (x *IceAgePlayerHistoryInfo) Reset() {
	*x = IceAgePlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceAgePlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceAgePlayerHistoryInfo) ProtoMessage() {}

func (x *IceAgePlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceAgePlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*IceAgePlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{8}
}

func (x *IceAgePlayerHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *IceAgePlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *IceAgePlayerHistoryInfo) GetTotalBetValue() int64 {
	if x != nil {
		return x.TotalBetValue
	}
	return 0
}

func (x *IceAgePlayerHistoryInfo) GetTotalPriceValue() int64 {
	if x != nil {
		return x.TotalPriceValue
	}
	return 0
}

func (x *IceAgePlayerHistoryInfo) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *IceAgePlayerHistoryInfo) GetTotalBonusValue() int64 {
	if x != nil {
		return x.TotalBonusValue
	}
	return 0
}

// 玩家记录
type SCIceAgePlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*IceAgePlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
}

func (x *SCIceAgePlayerHistory) Reset() {
	*x = SCIceAgePlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgePlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgePlayerHistory) ProtoMessage() {}

func (x *SCIceAgePlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgePlayerHistory.ProtoReflect.Descriptor instead.
func (*SCIceAgePlayerHistory) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{9}
}

func (x *SCIceAgePlayerHistory) GetPlayerHistory() []*IceAgePlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

// 大奖记录信息
type IceAgeBigWinHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID      string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`            // 操作id
	CreatedTime int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"` // 时间
	RoomID      int64  `protobuf:"varint,3,opt,name=RoomID,proto3" json:"RoomID,omitempty"`           // 房间ID
	PriceValue  int64  `protobuf:"varint,4,opt,name=PriceValue,proto3" json:"PriceValue,omitempty"`   // 大奖赢分
	UserName    string `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`        // 昵称
}

func (x *IceAgeBigWinHistoryInfo) Reset() {
	*x = IceAgeBigWinHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceAgeBigWinHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceAgeBigWinHistoryInfo) ProtoMessage() {}

func (x *IceAgeBigWinHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceAgeBigWinHistoryInfo.ProtoReflect.Descriptor instead.
func (*IceAgeBigWinHistoryInfo) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{10}
}

func (x *IceAgeBigWinHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *IceAgeBigWinHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *IceAgeBigWinHistoryInfo) GetRoomID() int64 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *IceAgeBigWinHistoryInfo) GetPriceValue() int64 {
	if x != nil {
		return x.PriceValue
	}
	return 0
}

func (x *IceAgeBigWinHistoryInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// 大奖记录
type SCIceAgeBigWinHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigWinHistory []*IceAgeBigWinHistoryInfo `protobuf:"bytes,1,rep,name=BigWinHistory,proto3" json:"BigWinHistory,omitempty"`
}

func (x *SCIceAgeBigWinHistory) Reset() {
	*x = SCIceAgeBigWinHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgeBigWinHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgeBigWinHistory) ProtoMessage() {}

func (x *SCIceAgeBigWinHistory) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgeBigWinHistory.ProtoReflect.Descriptor instead.
func (*SCIceAgeBigWinHistory) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{11}
}

func (x *SCIceAgeBigWinHistory) GetBigWinHistory() []*IceAgeBigWinHistoryInfo {
	if x != nil {
		return x.BigWinHistory
	}
	return nil
}

//房间状态
type SCIceAgeRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态
}

func (x *SCIceAgeRoomState) Reset() {
	*x = SCIceAgeRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iceage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIceAgeRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIceAgeRoomState) ProtoMessage() {}

func (x *SCIceAgeRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_iceage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIceAgeRoomState.ProtoReflect.Descriptor instead.
func (*SCIceAgeRoomState) Descriptor() ([]byte, []int) {
	return file_iceage_proto_rawDescGZIP(), []int{12}
}

func (x *SCIceAgeRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

var File_iceage_proto protoreflect.FileDescriptor

var file_iceage_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x49, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49,
	0x50, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x10, 0x53, 0x43,
	0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x68,
	0x69, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x0a, 0x43, 0x53, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x53, 0x43, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67,
	0x65, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x0f, 0x49, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x75, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x73, 0x70, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x73, 0x70, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x0b, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0xd2, 0x03, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x12, 0x53,
	0x43, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x49, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5e, 0x0a, 0x15, 0x53, 0x43, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x63, 0x65, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x42, 0x69, 0x67, 0x57,
	0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x15, 0x53,
	0x43, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x63,
	0x65, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x42, 0x69, 0x67, 0x57, 0x69,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x42, 0x69,
	0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x29, 0x0a, 0x11, 0x53,
	0x43, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x48, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53,
	0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xa0, 0x08,
	0x2a, 0x95, 0x02, 0x0a, 0x0e, 0x49, 0x63, 0x65, 0x41, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x63,
	0x65, 0x41, 0x67, 0x65, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8e, 0x3e, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0x8f, 0x3e, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0x90, 0x3e, 0x12, 0x1f, 0x0a, 0x1a, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x91, 0x3e, 0x12, 0x20, 0x0a, 0x1b,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x92, 0x3e, 0x12, 0x23,
	0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x43, 0x45, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x93, 0x3e, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x49, 0x43, 0x45, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x57, 0x49, 0x4e, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x94, 0x3e, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x69, 0x63,
	0x65, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_iceage_proto_rawDescOnce sync.Once
	file_iceage_proto_rawDescData = file_iceage_proto_rawDesc
)

func file_iceage_proto_rawDescGZIP() []byte {
	file_iceage_proto_rawDescOnce.Do(func() {
		file_iceage_proto_rawDescData = protoimpl.X.CompressGZIP(file_iceage_proto_rawDescData)
	})
	return file_iceage_proto_rawDescData
}

var file_iceage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_iceage_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_iceage_proto_goTypes = []interface{}{
	(OpResultCode)(0),               // 0: iceage.OpResultCode
	(IceAgePacketID)(0),             // 1: iceage.IceAgePacketID
	(*IceAgePlayerData)(nil),        // 2: iceage.IceAgePlayerData
	(*SCIceAgeRoomInfo)(nil),        // 3: iceage.SCIceAgeRoomInfo
	(*CSIceAgeOp)(nil),              // 4: iceage.CSIceAgeOp
	(*SCIceAgeOp)(nil),              // 5: iceage.SCIceAgeOp
	(*IceAgeLinesInfo)(nil),         // 6: iceage.IceAgeLinesInfo
	(*IceAgeCards)(nil),             // 7: iceage.IceAgeCards
	(*GameBilledData)(nil),          // 8: iceage.GameBilledData
	(*SCIceAgeGameBilled)(nil),      // 9: iceage.SCIceAgeGameBilled
	(*IceAgePlayerHistoryInfo)(nil), // 10: iceage.IceAgePlayerHistoryInfo
	(*SCIceAgePlayerHistory)(nil),   // 11: iceage.SCIceAgePlayerHistory
	(*IceAgeBigWinHistoryInfo)(nil), // 12: iceage.IceAgeBigWinHistoryInfo
	(*SCIceAgeBigWinHistory)(nil),   // 13: iceage.SCIceAgeBigWinHistory
	(*SCIceAgeRoomState)(nil),       // 14: iceage.SCIceAgeRoomState
}
var file_iceage_proto_depIdxs = []int32{
	2,  // 0: iceage.SCIceAgeRoomInfo.Players:type_name -> iceage.IceAgePlayerData
	8,  // 1: iceage.SCIceAgeRoomInfo.BilledData:type_name -> iceage.GameBilledData
	0,  // 2: iceage.SCIceAgeOp.OpRetCode:type_name -> iceage.OpResultCode
	7,  // 3: iceage.GameBilledData.SlotsData:type_name -> iceage.IceAgeCards
	6,  // 4: iceage.GameBilledData.PrizesData:type_name -> iceage.IceAgeLinesInfo
	8,  // 5: iceage.SCIceAgeGameBilled.BilledData:type_name -> iceage.GameBilledData
	10, // 6: iceage.SCIceAgePlayerHistory.PlayerHistory:type_name -> iceage.IceAgePlayerHistoryInfo
	12, // 7: iceage.SCIceAgeBigWinHistory.BigWinHistory:type_name -> iceage.IceAgeBigWinHistoryInfo
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_iceage_proto_init() }
func file_iceage_proto_init() {
	if File_iceage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iceage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceAgePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgeRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSIceAgeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceAgeLinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceAgeCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBilledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgeGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceAgePlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgePlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceAgeBigWinHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgeBigWinHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iceage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIceAgeRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iceage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_iceage_proto_goTypes,
		DependencyIndexes: file_iceage_proto_depIdxs,
		EnumInfos:         file_iceage_proto_enumTypes,
		MessageInfos:      file_iceage_proto_msgTypes,
	}.Build()
	File_iceage_proto = out.File
	file_iceage_proto_rawDesc = nil
	file_iceage_proto_goTypes = nil
	file_iceage_proto_depIdxs = nil
}
