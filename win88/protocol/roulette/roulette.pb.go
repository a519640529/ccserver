// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: roulette.proto

package roulette

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//轮盘 Roulette
type RouletteMmoPacketID int32

const (
	RouletteMmoPacketID_PACKET_SC_Roulette_Default   RouletteMmoPacketID = 0
	RouletteMmoPacketID_PACKET_SC_Roulette_RoomInfo  RouletteMmoPacketID = 5410
	RouletteMmoPacketID_PACKET_CS_Roulette_PlayerOp  RouletteMmoPacketID = 5411
	RouletteMmoPacketID_PACKET_SC_Roulette_RoomState RouletteMmoPacketID = 5412
	RouletteMmoPacketID_PACKET_SC_Roulette_Billed    RouletteMmoPacketID = 5413
	RouletteMmoPacketID_PACKET_SC_Roulette_PLayerOn  RouletteMmoPacketID = 5414
	RouletteMmoPacketID_PACKET_SC_Roulette_PlayerOp  RouletteMmoPacketID = 5415
	RouletteMmoPacketID_PACKET_SC_Roulette_TopPlayer RouletteMmoPacketID = 5416
	RouletteMmoPacketID_PACKET_SC_Roulette_BetChange RouletteMmoPacketID = 5417
)

// Enum value maps for RouletteMmoPacketID.
var (
	RouletteMmoPacketID_name = map[int32]string{
		0:    "PACKET_SC_Roulette_Default",
		5410: "PACKET_SC_Roulette_RoomInfo",
		5411: "PACKET_CS_Roulette_PlayerOp",
		5412: "PACKET_SC_Roulette_RoomState",
		5413: "PACKET_SC_Roulette_Billed",
		5414: "PACKET_SC_Roulette_PLayerOn",
		5415: "PACKET_SC_Roulette_PlayerOp",
		5416: "PACKET_SC_Roulette_TopPlayer",
		5417: "PACKET_SC_Roulette_BetChange",
	}
	RouletteMmoPacketID_value = map[string]int32{
		"PACKET_SC_Roulette_Default":   0,
		"PACKET_SC_Roulette_RoomInfo":  5410,
		"PACKET_CS_Roulette_PlayerOp":  5411,
		"PACKET_SC_Roulette_RoomState": 5412,
		"PACKET_SC_Roulette_Billed":    5413,
		"PACKET_SC_Roulette_PLayerOn":  5414,
		"PACKET_SC_Roulette_PlayerOp":  5415,
		"PACKET_SC_Roulette_TopPlayer": 5416,
		"PACKET_SC_Roulette_BetChange": 5417,
	}
)

func (x RouletteMmoPacketID) Enum() *RouletteMmoPacketID {
	p := new(RouletteMmoPacketID)
	*p = x
	return p
}

func (x RouletteMmoPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouletteMmoPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_roulette_proto_enumTypes[0].Descriptor()
}

func (RouletteMmoPacketID) Type() protoreflect.EnumType {
	return &file_roulette_proto_enumTypes[0]
}

func (x RouletteMmoPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouletteMmoPacketID.Descriptor instead.
func (RouletteMmoPacketID) EnumDescriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{0}
}

type RouletteBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt    []int32 `protobuf:"varint,1,rep,packed,name=Cnt,proto3" json:"Cnt,omitempty"` //0:1号筹码数量 1:2号筹码数量 2:3号筹码数量 3:4号筹码数量
	BetPos int32   `protobuf:"varint,2,opt,name=BetPos,proto3" json:"BetPos,omitempty"`  //下注位置 1-157
}

func (x *RouletteBetInfo) Reset() {
	*x = RouletteBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteBetInfo) ProtoMessage() {}

func (x *RouletteBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteBetInfo.ProtoReflect.Descriptor instead.
func (*RouletteBetInfo) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{0}
}

func (x *RouletteBetInfo) GetCnt() []int32 {
	if x != nil {
		return x.Cnt
	}
	return nil
}

func (x *RouletteBetInfo) GetBetPos() int32 {
	if x != nil {
		return x.BetPos
	}
	return 0
}

type RoulettePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                         //名字
	SnId            int32              `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                        //账号
	Head            int32              `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                        //头像
	Sex             int32              `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                          //性别
	Coin            int64              `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                        //金币
	Pos             int32              `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                          //座位位置
	Flag            int32              `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                        //二进制标记 第一位:是否掉线(0:在线 1:掉线) 第二位:是否准备(0:未准备 1:已准备)
	Params          []string           `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`                     //其他数据 如:ip 等
	Longitude       int32              `protobuf:"varint,9,opt,name=Longitude,proto3" json:"Longitude,omitempty"`              //经度
	Latitude        int32              `protobuf:"varint,10,opt,name=Latitude,proto3" json:"Latitude,omitempty"`               //纬度
	City            string             `protobuf:"bytes,11,opt,name=City,proto3" json:"City,omitempty"`                        //城市 例:中国-河南省-郑州市
	NiceId          int32              `protobuf:"varint,12,opt,name=NiceId,proto3" json:"NiceId,omitempty"`                   //靓号
	AgentCode       string             `protobuf:"bytes,13,opt,name=AgentCode,proto3" json:"AgentCode,omitempty"`              //代理商编号
	HeadOutLine     int32              `protobuf:"varint,14,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"`         //头像框
	VIP             int32              `protobuf:"varint,15,opt,name=VIP,proto3" json:"VIP,omitempty"`                         //VIP等级
	Lately20BetCoin int64              `protobuf:"varint,16,opt,name=lately20BetCoin,proto3" json:"lately20BetCoin,omitempty"` //20局下注金额
	Lately20Win     int64              `protobuf:"varint,17,opt,name=lately20Win,proto3" json:"lately20Win,omitempty"`         //20局以内赢了几次
	BetCoin         int64              `protobuf:"varint,18,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"`                 //当局下注金额
	LastBetInfo     []*RouletteBetInfo `protobuf:"bytes,19,rep,name=LastBetInfo,proto3" json:"LastBetInfo,omitempty"`          //上一局下注额
	BetInfo         []*RouletteBetInfo `protobuf:"bytes,20,rep,name=BetInfo,proto3" json:"BetInfo,omitempty"`                  //详细下注区域
}

func (x *RoulettePlayerData) Reset() {
	*x = RoulettePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoulettePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoulettePlayerData) ProtoMessage() {}

func (x *RoulettePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoulettePlayerData.ProtoReflect.Descriptor instead.
func (*RoulettePlayerData) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{1}
}

func (x *RoulettePlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoulettePlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *RoulettePlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *RoulettePlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RoulettePlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RoulettePlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *RoulettePlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RoulettePlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RoulettePlayerData) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RoulettePlayerData) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RoulettePlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *RoulettePlayerData) GetNiceId() int32 {
	if x != nil {
		return x.NiceId
	}
	return 0
}

func (x *RoulettePlayerData) GetAgentCode() string {
	if x != nil {
		return x.AgentCode
	}
	return ""
}

func (x *RoulettePlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *RoulettePlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *RoulettePlayerData) GetLately20BetCoin() int64 {
	if x != nil {
		return x.Lately20BetCoin
	}
	return 0
}

func (x *RoulettePlayerData) GetLately20Win() int64 {
	if x != nil {
		return x.Lately20Win
	}
	return 0
}

func (x *RoulettePlayerData) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

func (x *RoulettePlayerData) GetLastBetInfo() []*RouletteBetInfo {
	if x != nil {
		return x.LastBetInfo
	}
	return nil
}

func (x *RoulettePlayerData) GetBetInfo() []*RouletteBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//房间信息
//PACKET_SC_Roulette_RoomInfo
type SCRouletteRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       int32                 `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                 //房间id
	Creator      int32                 `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`               //创建者SnId
	GameId       int32                 `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                 //游戏id
	GameFreeId   int32                 `protobuf:"varint,4,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`         //游戏场次id
	RoomMode     int32                 `protobuf:"varint,5,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`             //游戏模式
	Params       []int32               `protobuf:"varint,6,rep,packed,name=Params,proto3" json:"Params,omitempty"`          //规则参数 0.LimitCoin 1.MaxCoinLimit 2.BetLimit
	NumOfGames   int32                 `protobuf:"varint,7,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`         //当前第几局
	State        int32                 `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                   //房间当前状态
	TimeOut      int32                 `protobuf:"varint,9,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`               //已经用的时间 单位:秒
	Players      []*RoulettePlayerData `protobuf:"bytes,10,rep,name=Players,proto3" json:"Players,omitempty"`               //top榜 根据玩家pos识别 最多3个玩家
	DisbandGen   int32                 `protobuf:"varint,11,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`        //解散申请
	AgentId      int32                 `protobuf:"varint,12,opt,name=AgentId,proto3" json:"AgentId,omitempty"`              //代开房者
	ParamsEx     []int32               `protobuf:"varint,13,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`     //比赛参数
	SceneType    int32                 `protobuf:"varint,14,opt,name=SceneType,proto3" json:"SceneType,omitempty"`          //房间模式 0:房卡模式 1:钻石模式
	BaseScore    int32                 `protobuf:"varint,15,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`          //基础分
	TotalOfGames int32                 `protobuf:"varint,16,opt,name=TotalOfGames,proto3" json:"TotalOfGames,omitempty"`    //总局数
	WinRecord    []int32               `protobuf:"varint,17,rep,packed,name=WinRecord,proto3" json:"WinRecord,omitempty"`   //历史中奖号码记录
	MaxBetCoin   []int32               `protobuf:"varint,18,rep,packed,name=MaxBetCoin,proto3" json:"MaxBetCoin,omitempty"` //多门押注上限
}

func (x *SCRouletteRoomInfo) Reset() {
	*x = SCRouletteRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRouletteRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRouletteRoomInfo) ProtoMessage() {}

func (x *SCRouletteRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRouletteRoomInfo.ProtoReflect.Descriptor instead.
func (*SCRouletteRoomInfo) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{2}
}

func (x *SCRouletteRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCRouletteRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetPlayers() []*RoulettePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCRouletteRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCRouletteRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetTotalOfGames() int32 {
	if x != nil {
		return x.TotalOfGames
	}
	return 0
}

func (x *SCRouletteRoomInfo) GetWinRecord() []int32 {
	if x != nil {
		return x.WinRecord
	}
	return nil
}

func (x *SCRouletteRoomInfo) GetMaxBetCoin() []int32 {
	if x != nil {
		return x.MaxBetCoin
	}
	return nil
}

//上座玩家信息更新
//PACKET_SC_Roulette_TopPlayer
type SCRouletteTopPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*RoulettePlayerData `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"` //top榜 根据玩家pos识别 最多3个玩家
}

func (x *SCRouletteTopPlayer) Reset() {
	*x = SCRouletteTopPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRouletteTopPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRouletteTopPlayer) ProtoMessage() {}

func (x *SCRouletteTopPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRouletteTopPlayer.ProtoReflect.Descriptor instead.
func (*SCRouletteTopPlayer) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{3}
}

func (x *SCRouletteTopPlayer) GetPlayers() []*RoulettePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

//玩家操作
//PACKET_CS_Roulette_PlayerOp
type CSRoulettePlayerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode  int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`          //下注 0.准备 1.取消准备 2.踢人 3.下注 4.撤销 5.在线玩家列表 6.续投
	OpParam []int64 `protobuf:"varint,2,rep,packed,name=OpParam,proto3" json:"OpParam,omitempty"` //参数 0.下注位置 1.筹码位置 2.筹码数量 默认为1
}

func (x *CSRoulettePlayerOp) Reset() {
	*x = CSRoulettePlayerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRoulettePlayerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRoulettePlayerOp) ProtoMessage() {}

func (x *CSRoulettePlayerOp) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRoulettePlayerOp.ProtoReflect.Descriptor instead.
func (*CSRoulettePlayerOp) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{4}
}

func (x *CSRoulettePlayerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSRoulettePlayerOp) GetOpParam() []int64 {
	if x != nil {
		return x.OpParam
	}
	return nil
}

//PACKET_SC_Roulette_PlayerOp
type SCRoulettePlayerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpRCode        int32              `protobuf:"varint,1,opt,name=OpRCode,proto3" json:"OpRCode,omitempty"`              //请求结果 0.成功 1.押注超过上限 2.金币不足 3.已经续压 4.没有下注无法撤销
	OpCode         int32              `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                //下注 0.准备 1.取消准备 2.踢人 3.下注 4.撤销 6.续投
	Pos            int32              `protobuf:"varint,3,opt,name=Pos,proto3" json:"Pos,omitempty"`                      //玩家pos
	ProceedBetCoin []*RouletteBetInfo `protobuf:"bytes,4,rep,name=ProceedBetCoin,proto3" json:"ProceedBetCoin,omitempty"` //玩家撤销续压的押注额 续压时为续压的押注额
}

func (x *SCRoulettePlayerOp) Reset() {
	*x = SCRoulettePlayerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRoulettePlayerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRoulettePlayerOp) ProtoMessage() {}

func (x *SCRoulettePlayerOp) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRoulettePlayerOp.ProtoReflect.Descriptor instead.
func (*SCRoulettePlayerOp) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{5}
}

func (x *SCRoulettePlayerOp) GetOpRCode() int32 {
	if x != nil {
		return x.OpRCode
	}
	return 0
}

func (x *SCRoulettePlayerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCRoulettePlayerOp) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCRoulettePlayerOp) GetProceedBetCoin() []*RouletteBetInfo {
	if x != nil {
		return x.ProceedBetCoin
	}
	return nil
}

//通知玩家 其他玩家的下注额(不包含自己和上座玩家)
//PACKET_SC_Roulette_BetChange
type SCRouletteBetChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetInfo []*RouletteBetInfo `protobuf:"bytes,1,rep,name=BetInfo,proto3" json:"BetInfo,omitempty"` //时间阶段玩家下注改变值
}

func (x *SCRouletteBetChange) Reset() {
	*x = SCRouletteBetChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRouletteBetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRouletteBetChange) ProtoMessage() {}

func (x *SCRouletteBetChange) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRouletteBetChange.ProtoReflect.Descriptor instead.
func (*SCRouletteBetChange) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{6}
}

func (x *SCRouletteBetChange) GetBetInfo() []*RouletteBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//在线玩家列表
//PACKET_SC_Roulette_PLayerOn
type SCRoulettePlayerOn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*RoulettePlayerData `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"` // 最多21个玩家
}

func (x *SCRoulettePlayerOn) Reset() {
	*x = SCRoulettePlayerOn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRoulettePlayerOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRoulettePlayerOn) ProtoMessage() {}

func (x *SCRoulettePlayerOn) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRoulettePlayerOn.ProtoReflect.Descriptor instead.
func (*SCRoulettePlayerOn) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{7}
}

func (x *SCRoulettePlayerOn) GetPlayers() []*RoulettePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

//房间状态更新
//PACKET_SC_Roulette_RoomState
type SCRouletteRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态 0.准备状态；1.下注 2.开奖 3.结算 4.开始倒计时
	// Params 游戏子状态的参数列表：
	Params []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCRouletteRoomState) Reset() {
	*x = SCRouletteRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRouletteRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRouletteRoomState) ProtoMessage() {}

func (x *SCRouletteRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRouletteRoomState.ProtoReflect.Descriptor instead.
func (*SCRouletteRoomState) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{8}
}

func (x *SCRouletteRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRouletteRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type RouletteBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      int32              `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`           //位置
	Coin     int64              `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`         //赢的总金额
	GainCoin int64              `protobuf:"varint,3,opt,name=GainCoin,proto3" json:"GainCoin,omitempty"` //变动金额
	LastCoin int64              `protobuf:"varint,4,opt,name=LastCoin,proto3" json:"LastCoin,omitempty"` //当前金额
	BetInfo  []*RouletteBetInfo `protobuf:"bytes,5,rep,name=BetInfo,proto3" json:"BetInfo,omitempty"`    //玩家下注总值
}

func (x *RouletteBilled) Reset() {
	*x = RouletteBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouletteBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouletteBilled) ProtoMessage() {}

func (x *RouletteBilled) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouletteBilled.ProtoReflect.Descriptor instead.
func (*RouletteBilled) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{9}
}

func (x *RouletteBilled) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *RouletteBilled) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RouletteBilled) GetGainCoin() int64 {
	if x != nil {
		return x.GainCoin
	}
	return 0
}

func (x *RouletteBilled) GetLastCoin() int64 {
	if x != nil {
		return x.LastCoin
	}
	return 0
}

func (x *RouletteBilled) GetBetInfo() []*RouletteBetInfo {
	if x != nil {
		return x.BetInfo
	}
	return nil
}

//PACKET_SC_Roulette_Billed
type SCRouletteBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*RouletteBilled `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"` //玩家 pos表示位置
}

func (x *SCRouletteBilled) Reset() {
	*x = SCRouletteBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roulette_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRouletteBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRouletteBilled) ProtoMessage() {}

func (x *SCRouletteBilled) ProtoReflect() protoreflect.Message {
	mi := &file_roulette_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRouletteBilled.ProtoReflect.Descriptor instead.
func (*SCRouletteBilled) Descriptor() ([]byte, []int) {
	return file_roulette_proto_rawDescGZIP(), []int{10}
}

func (x *SCRouletteBilled) GetPlayers() []*RouletteBilled {
	if x != nil {
		return x.Players
	}
	return nil
}

var File_roulette_proto protoreflect.FileDescriptor

var file_roulette_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x52, 0x6f,
	0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x43, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x42, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x22, 0xc4, 0x04, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x32, 0x30, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xae,
	0x04, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x78, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x22,
	0x4d, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x46,
	0x0a, 0x12, 0x43, 0x53, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4f,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x70, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x4f, 0x70, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f,
	0x73, 0x12, 0x41, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x42, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x42, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x42,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4c, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x43,
	0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x43, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2a, 0xc6, 0x02, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x4d, 0x6d,
	0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xa2, 0x2a, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x10, 0xa3, 0x2a, 0x12, 0x21, 0x0a,
	0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xa4, 0x2a,
	0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f,
	0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0xa5, 0x2a,
	0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f,
	0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x50, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x10,
	0xa6, 0x2a, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x70, 0x10, 0xa7, 0x2a, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x54, 0x6f, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x10, 0xa8, 0x2a, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x5f, 0x42, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xa9, 0x2a, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b,
	0x72, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_roulette_proto_rawDescOnce sync.Once
	file_roulette_proto_rawDescData = file_roulette_proto_rawDesc
)

func file_roulette_proto_rawDescGZIP() []byte {
	file_roulette_proto_rawDescOnce.Do(func() {
		file_roulette_proto_rawDescData = protoimpl.X.CompressGZIP(file_roulette_proto_rawDescData)
	})
	return file_roulette_proto_rawDescData
}

var file_roulette_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_roulette_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_roulette_proto_goTypes = []interface{}{
	(RouletteMmoPacketID)(0),    // 0: roulette.RouletteMmoPacketID
	(*RouletteBetInfo)(nil),     // 1: roulette.RouletteBetInfo
	(*RoulettePlayerData)(nil),  // 2: roulette.RoulettePlayerData
	(*SCRouletteRoomInfo)(nil),  // 3: roulette.SCRouletteRoomInfo
	(*SCRouletteTopPlayer)(nil), // 4: roulette.SCRouletteTopPlayer
	(*CSRoulettePlayerOp)(nil),  // 5: roulette.CSRoulettePlayerOp
	(*SCRoulettePlayerOp)(nil),  // 6: roulette.SCRoulettePlayerOp
	(*SCRouletteBetChange)(nil), // 7: roulette.SCRouletteBetChange
	(*SCRoulettePlayerOn)(nil),  // 8: roulette.SCRoulettePlayerOn
	(*SCRouletteRoomState)(nil), // 9: roulette.SCRouletteRoomState
	(*RouletteBilled)(nil),      // 10: roulette.RouletteBilled
	(*SCRouletteBilled)(nil),    // 11: roulette.SCRouletteBilled
}
var file_roulette_proto_depIdxs = []int32{
	1,  // 0: roulette.RoulettePlayerData.LastBetInfo:type_name -> roulette.RouletteBetInfo
	1,  // 1: roulette.RoulettePlayerData.BetInfo:type_name -> roulette.RouletteBetInfo
	2,  // 2: roulette.SCRouletteRoomInfo.Players:type_name -> roulette.RoulettePlayerData
	2,  // 3: roulette.SCRouletteTopPlayer.Players:type_name -> roulette.RoulettePlayerData
	1,  // 4: roulette.SCRoulettePlayerOp.ProceedBetCoin:type_name -> roulette.RouletteBetInfo
	1,  // 5: roulette.SCRouletteBetChange.BetInfo:type_name -> roulette.RouletteBetInfo
	2,  // 6: roulette.SCRoulettePlayerOn.Players:type_name -> roulette.RoulettePlayerData
	1,  // 7: roulette.RouletteBilled.BetInfo:type_name -> roulette.RouletteBetInfo
	10, // 8: roulette.SCRouletteBilled.Players:type_name -> roulette.RouletteBilled
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_roulette_proto_init() }
func file_roulette_proto_init() {
	if File_roulette_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_roulette_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoulettePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRouletteRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRouletteTopPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRoulettePlayerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRoulettePlayerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRouletteBetChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRoulettePlayerOn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRouletteRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouletteBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_roulette_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRouletteBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_roulette_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_roulette_proto_goTypes,
		DependencyIndexes: file_roulette_proto_depIdxs,
		EnumInfos:         file_roulette_proto_enumTypes,
		MessageInfos:      file_roulette_proto_msgTypes,
	}.Build()
	File_roulette_proto = out.File
	file_roulette_proto_rawDesc = nil
	file_roulette_proto_goTypes = nil
	file_roulette_proto_depIdxs = nil
}
