// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: easterisland.proto

package easterisland

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess        OpResultCode = 0    //成功
	OpResultCode_OPRC_Error         OpResultCode = 1    //失败
	OpResultCode_OPRC_CoinNotEnough OpResultCode = 1056 //钱不够
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		1056: "OPRC_CoinNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":        0,
		"OPRC_Error":         1,
		"OPRC_CoinNotEnough": 1056,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_easterisland_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_easterisland_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{0}
}

//复活岛
type EasterIslandPacketID int32

const (
	EasterIslandPacketID_PACKET_EasterIsland_ZERO             EasterIslandPacketID = 0    // 弃用消息号
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_ROOMINFO      EasterIslandPacketID = 5200 //房间信息
	EasterIslandPacketID_PACKET_CS_EASTERISLAND_PLAYEROP      EasterIslandPacketID = 5201 //玩家操作（客户->服务）
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_PLAYEROP      EasterIslandPacketID = 5202 //玩家操作（服务->客户）
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_ROOMSTATE     EasterIslandPacketID = 5203 //房间状态
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_GAMEBILLED    EasterIslandPacketID = 5204 //游戏结算
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_PLAYERHISTORY EasterIslandPacketID = 5205 //游戏记录
	EasterIslandPacketID_PACKET_SC_EASTERISLAND_BIGWINHISTORY EasterIslandPacketID = 5206 //大奖记录
)

// Enum value maps for EasterIslandPacketID.
var (
	EasterIslandPacketID_name = map[int32]string{
		0:    "PACKET_EasterIsland_ZERO",
		5200: "PACKET_SC_EASTERISLAND_ROOMINFO",
		5201: "PACKET_CS_EASTERISLAND_PLAYEROP",
		5202: "PACKET_SC_EASTERISLAND_PLAYEROP",
		5203: "PACKET_SC_EASTERISLAND_ROOMSTATE",
		5204: "PACKET_SC_EASTERISLAND_GAMEBILLED",
		5205: "PACKET_SC_EASTERISLAND_PLAYERHISTORY",
		5206: "PACKET_SC_EASTERISLAND_BIGWINHISTORY",
	}
	EasterIslandPacketID_value = map[string]int32{
		"PACKET_EasterIsland_ZERO":             0,
		"PACKET_SC_EASTERISLAND_ROOMINFO":      5200,
		"PACKET_CS_EASTERISLAND_PLAYEROP":      5201,
		"PACKET_SC_EASTERISLAND_PLAYEROP":      5202,
		"PACKET_SC_EASTERISLAND_ROOMSTATE":     5203,
		"PACKET_SC_EASTERISLAND_GAMEBILLED":    5204,
		"PACKET_SC_EASTERISLAND_PLAYERHISTORY": 5205,
		"PACKET_SC_EASTERISLAND_BIGWINHISTORY": 5206,
	}
)

func (x EasterIslandPacketID) Enum() *EasterIslandPacketID {
	p := new(EasterIslandPacketID)
	*p = x
	return p
}

func (x EasterIslandPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EasterIslandPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_easterisland_proto_enumTypes[1].Descriptor()
}

func (EasterIslandPacketID) Type() protoreflect.EnumType {
	return &file_easterisland_proto_enumTypes[1]
}

func (x EasterIslandPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EasterIslandPacketID.Descriptor instead.
func (EasterIslandPacketID) EnumDescriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{1}
}

type EasterIslandPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                 //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	HeadOutLine int32    `protobuf:"varint,6,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,7,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"` //其他数据 如:ip 等
}

func (x *EasterIslandPlayerData) Reset() {
	*x = EasterIslandPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterIslandPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterIslandPlayerData) ProtoMessage() {}

func (x *EasterIslandPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterIslandPlayerData.ProtoReflect.Descriptor instead.
func (*EasterIslandPlayerData) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{0}
}

func (x *EasterIslandPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EasterIslandPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *EasterIslandPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *EasterIslandPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *EasterIslandPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *EasterIslandPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *EasterIslandPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *EasterIslandPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//小游戏信息
type EasterIslandBonusGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BonusData       []int64 `protobuf:"varint,1,rep,packed,name=BonusData,proto3" json:"BonusData,omitempty"`
	TotalPrizeValue int64   `protobuf:"varint,2,opt,name=TotalPrizeValue,proto3" json:"TotalPrizeValue,omitempty"`
	Mutiplier       int32   `protobuf:"varint,3,opt,name=Mutiplier,proto3" json:"Mutiplier,omitempty"`
	DataMultiplier  int64   `protobuf:"varint,4,opt,name=DataMultiplier,proto3" json:"DataMultiplier,omitempty"`
}

func (x *EasterIslandBonusGameInfo) Reset() {
	*x = EasterIslandBonusGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterIslandBonusGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterIslandBonusGameInfo) ProtoMessage() {}

func (x *EasterIslandBonusGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterIslandBonusGameInfo.ProtoReflect.Descriptor instead.
func (*EasterIslandBonusGameInfo) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{1}
}

func (x *EasterIslandBonusGameInfo) GetBonusData() []int64 {
	if x != nil {
		return x.BonusData
	}
	return nil
}

func (x *EasterIslandBonusGameInfo) GetTotalPrizeValue() int64 {
	if x != nil {
		return x.TotalPrizeValue
	}
	return 0
}

func (x *EasterIslandBonusGameInfo) GetMutiplier() int32 {
	if x != nil {
		return x.Mutiplier
	}
	return 0
}

func (x *EasterIslandBonusGameInfo) GetDataMultiplier() int64 {
	if x != nil {
		return x.DataMultiplier
	}
	return 0
}

//房间信息
type SCEasterIslandRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId          int32                      `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                    //房间id
	Creator         int32                      `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                  //创建者SnId
	GameId          int32                      `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                    //游戏id
	RoomMode        int32                      `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                //游戏模式
	Params          []int32                    `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`             //规则参数
	State           int32                      `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`                      //房间当前状态
	BetLines        []int64                    `protobuf:"varint,7,rep,packed,name=BetLines,proto3" json:"BetLines,omitempty"`         //玩家下注选线数组
	Chip            int32                      `protobuf:"varint,8,opt,name=Chip,proto3" json:"Chip,omitempty"`                        //当前选择的押注
	Players         []*EasterIslandPlayerData  `protobuf:"bytes,9,rep,name=Players,proto3" json:"Players,omitempty"`                   //房间内的玩家信息
	FreeTimes       int32                      `protobuf:"varint,10,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`             //免费转动次数
	Jackpot         int64                      `protobuf:"varint,11,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                 //奖池金额
	TotalPriceBonus int64                      `protobuf:"varint,12,opt,name=TotalPriceBonus,proto3" json:"TotalPriceBonus,omitempty"` //总bonus分 大于0时代表小游戏还未结束
	SpinID          int64                      `protobuf:"varint,13,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                   //操作ID
	ParamsEx        []int32                    `protobuf:"varint,14,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`        //其他参数
	BonusGame       *EasterIslandBonusGameInfo `protobuf:"bytes,15,opt,name=BonusGame,proto3" json:"BonusGame,omitempty"`              //小游戏未结束 附加小游戏信息
	BonusX          []int32                    `protobuf:"varint,16,rep,packed,name=BonusX,proto3" json:"BonusX,omitempty"`            //小游戏未结束 附加小游戏倍数选项，Bonus图标的数量为3/4/5时，分别为 1,2,3 或 2,3,4 或 3,4,5
	SceneType       int32                      `protobuf:"varint,17,opt,name=SceneType,proto3" json:"SceneType,omitempty"`             //场次
	GameFreeId      int32                      `protobuf:"varint,18,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	BilledData      *GameBilledData            `protobuf:"bytes,19,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //上一局结算信息，用于断线重连
}

func (x *SCEasterIslandRoomInfo) Reset() {
	*x = SCEasterIslandRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandRoomInfo) ProtoMessage() {}

func (x *SCEasterIslandRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandRoomInfo.ProtoReflect.Descriptor instead.
func (*SCEasterIslandRoomInfo) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{2}
}

func (x *SCEasterIslandRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetBetLines() []int64 {
	if x != nil {
		return x.BetLines
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetPlayers() []*EasterIslandPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetTotalPriceBonus() int64 {
	if x != nil {
		return x.TotalPriceBonus
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetBonusGame() *EasterIslandBonusGameInfo {
	if x != nil {
		return x.BonusGame
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetBonusX() []int32 {
	if x != nil {
		return x.BonusX
	}
	return nil
}

func (x *SCEasterIslandRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCEasterIslandRoomInfo) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//玩家操作
type CSEasterIslandOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0:开始{0押注倍数,1-n选线} 1:玩家记录信息 2:大奖记录 3:小游戏
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSEasterIslandOp) Reset() {
	*x = CSEasterIslandOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSEasterIslandOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSEasterIslandOp) ProtoMessage() {}

func (x *CSEasterIslandOp) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSEasterIslandOp.ProtoReflect.Descriptor instead.
func (*CSEasterIslandOp) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{3}
}

func (x *CSEasterIslandOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSEasterIslandOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCEasterIslandOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                          //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                      //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                               //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=easterisland.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCEasterIslandOp) Reset() {
	*x = SCEasterIslandOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandOp) ProtoMessage() {}

func (x *SCEasterIslandOp) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandOp.ProtoReflect.Descriptor instead.
func (*SCEasterIslandOp) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{4}
}

func (x *SCEasterIslandOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCEasterIslandOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCEasterIslandOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCEasterIslandOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//每条线的结算数据
type EasterIslandLinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineId     int32   `protobuf:"varint,1,opt,name=LineId,proto3" json:"LineId,omitempty"`            //中奖线路，25条线路中的一条[1,25]
	PrizeId    int32   `protobuf:"varint,2,opt,name=PrizeId,proto3" json:"PrizeId,omitempty"`          //中奖Id(暂时忽略)
	Position   []int32 `protobuf:"varint,3,rep,packed,name=Position,proto3" json:"Position,omitempty"` //线条匹配位置
	PrizeValue int64   `protobuf:"varint,4,opt,name=PrizeValue,proto3" json:"PrizeValue,omitempty"`    //线条奖金
}

func (x *EasterIslandLinesInfo) Reset() {
	*x = EasterIslandLinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterIslandLinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterIslandLinesInfo) ProtoMessage() {}

func (x *EasterIslandLinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterIslandLinesInfo.ProtoReflect.Descriptor instead.
func (*EasterIslandLinesInfo) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{5}
}

func (x *EasterIslandLinesInfo) GetLineId() int32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *EasterIslandLinesInfo) GetPrizeId() int32 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

func (x *EasterIslandLinesInfo) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *EasterIslandLinesInfo) GetPrizeValue() int64 {
	if x != nil {
		return x.PrizeValue
	}
	return 0
}

type GameBilledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID                 int64                      `protobuf:"varint,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                                 //操作ID
	SlotsData              []int32                    `protobuf:"varint,2,rep,packed,name=SlotsData,proto3" json:"SlotsData,omitempty"`                    //需要翻出的牌，数组15个,如：[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 4, 5, 6]
	AddFreeSpin            int32                      `protobuf:"varint,3,opt,name=AddFreeSpin,proto3" json:"AddFreeSpin,omitempty"`                       //新增免费转动次数
	IsJackpot              bool                       `protobuf:"varint,4,opt,name=IsJackpot,proto3" json:"IsJackpot,omitempty"`                           //是否爆奖
	PrizeLines             []*EasterIslandLinesInfo   `protobuf:"bytes,5,rep,name=PrizeLines,proto3" json:"PrizeLines,omitempty"`                          //中奖的结果数组,存每条线的情况
	TotalPrizeValue        int64                      `protobuf:"varint,6,opt,name=TotalPrizeValue,proto3" json:"TotalPrizeValue,omitempty"`               //中奖的总分数
	TotalPaylinePrizeValue int64                      `protobuf:"varint,7,opt,name=TotalPaylinePrizeValue,proto3" json:"TotalPaylinePrizeValue,omitempty"` //除了爆奖金额之外的线条奖金
	TotalJackpotValue      int64                      `protobuf:"varint,8,opt,name=TotalJackpotValue,proto3" json:"TotalJackpotValue,omitempty"`           //爆奖金额
	Balance                int64                      `protobuf:"varint,9,opt,name=Balance,proto3" json:"Balance,omitempty"`                               //玩家余额
	FreeSpins              int32                      `protobuf:"varint,10,opt,name=FreeSpins,proto3" json:"FreeSpins,omitempty"`                          //剩余免费转动次数
	Jackpot                int64                      `protobuf:"varint,11,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                              //奖池金额
	BonusX                 []int32                    `protobuf:"varint,12,rep,packed,name=BonusX,proto3" json:"BonusX,omitempty"`                         //小游戏倍数，Bonus图标的数量为3/4/5时，分别为 1,2,3 或 2,3,4 或 3,4,5
	BonusGame              *EasterIslandBonusGameInfo `protobuf:"bytes,13,opt,name=BonusGame,proto3" json:"BonusGame,omitempty"`                           //Bonus的数量大于等于3时的小游戏
	ResponseStatus         int64                      `protobuf:"varint,14,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`                //状态码
}

func (x *GameBilledData) Reset() {
	*x = GameBilledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBilledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBilledData) ProtoMessage() {}

func (x *GameBilledData) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBilledData.ProtoReflect.Descriptor instead.
func (*GameBilledData) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{6}
}

func (x *GameBilledData) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *GameBilledData) GetSlotsData() []int32 {
	if x != nil {
		return x.SlotsData
	}
	return nil
}

func (x *GameBilledData) GetAddFreeSpin() int32 {
	if x != nil {
		return x.AddFreeSpin
	}
	return 0
}

func (x *GameBilledData) GetIsJackpot() bool {
	if x != nil {
		return x.IsJackpot
	}
	return false
}

func (x *GameBilledData) GetPrizeLines() []*EasterIslandLinesInfo {
	if x != nil {
		return x.PrizeLines
	}
	return nil
}

func (x *GameBilledData) GetTotalPrizeValue() int64 {
	if x != nil {
		return x.TotalPrizeValue
	}
	return 0
}

func (x *GameBilledData) GetTotalPaylinePrizeValue() int64 {
	if x != nil {
		return x.TotalPaylinePrizeValue
	}
	return 0
}

func (x *GameBilledData) GetTotalJackpotValue() int64 {
	if x != nil {
		return x.TotalJackpotValue
	}
	return 0
}

func (x *GameBilledData) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GameBilledData) GetFreeSpins() int32 {
	if x != nil {
		return x.FreeSpins
	}
	return 0
}

func (x *GameBilledData) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *GameBilledData) GetBonusX() []int32 {
	if x != nil {
		return x.BonusX
	}
	return nil
}

func (x *GameBilledData) GetBonusGame() *EasterIslandBonusGameInfo {
	if x != nil {
		return x.BonusGame
	}
	return nil
}

func (x *GameBilledData) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

//发送给客户端的数据 结算
type SCEasterIslandGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BilledData *GameBilledData `protobuf:"bytes,1,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //结算信息
}

func (x *SCEasterIslandGameBilled) Reset() {
	*x = SCEasterIslandGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandGameBilled) ProtoMessage() {}

func (x *SCEasterIslandGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandGameBilled.ProtoReflect.Descriptor instead.
func (*SCEasterIslandGameBilled) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{7}
}

func (x *SCEasterIslandGameBilled) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

// 玩家记录信息
type EasterIslandPlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID          string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                    // 操作id
	CreatedTime     int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`         // 时间
	TotalBetValue   int64  `protobuf:"varint,3,opt,name=TotalBetValue,proto3" json:"TotalBetValue,omitempty"`     // 总下注
	TotalPriceValue int64  `protobuf:"varint,4,opt,name=TotalPriceValue,proto3" json:"TotalPriceValue,omitempty"` // 总赢分
	IsFree          bool   `protobuf:"varint,5,opt,name=IsFree,proto3" json:"IsFree,omitempty"`                   // 是否免费
	TotalBonusValue int64  `protobuf:"varint,6,opt,name=TotalBonusValue,proto3" json:"TotalBonusValue,omitempty"` // 是否免费
}

func (x *EasterIslandPlayerHistoryInfo) Reset() {
	*x = EasterIslandPlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterIslandPlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterIslandPlayerHistoryInfo) ProtoMessage() {}

func (x *EasterIslandPlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterIslandPlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*EasterIslandPlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{8}
}

func (x *EasterIslandPlayerHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *EasterIslandPlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *EasterIslandPlayerHistoryInfo) GetTotalBetValue() int64 {
	if x != nil {
		return x.TotalBetValue
	}
	return 0
}

func (x *EasterIslandPlayerHistoryInfo) GetTotalPriceValue() int64 {
	if x != nil {
		return x.TotalPriceValue
	}
	return 0
}

func (x *EasterIslandPlayerHistoryInfo) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *EasterIslandPlayerHistoryInfo) GetTotalBonusValue() int64 {
	if x != nil {
		return x.TotalBonusValue
	}
	return 0
}

// 玩家记录
type SCEasterIslandPlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*EasterIslandPlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
}

func (x *SCEasterIslandPlayerHistory) Reset() {
	*x = SCEasterIslandPlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandPlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandPlayerHistory) ProtoMessage() {}

func (x *SCEasterIslandPlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandPlayerHistory.ProtoReflect.Descriptor instead.
func (*SCEasterIslandPlayerHistory) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{9}
}

func (x *SCEasterIslandPlayerHistory) GetPlayerHistory() []*EasterIslandPlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

// 大奖记录信息
type EasterIslandBigWinHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID      string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`            // 操作id
	CreatedTime int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"` // 时间
	RoomID      int64  `protobuf:"varint,3,opt,name=RoomID,proto3" json:"RoomID,omitempty"`           // 房间ID
	PriceValue  int64  `protobuf:"varint,4,opt,name=PriceValue,proto3" json:"PriceValue,omitempty"`   // 大奖赢分
	UserName    string `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`        // 昵称
}

func (x *EasterIslandBigWinHistoryInfo) Reset() {
	*x = EasterIslandBigWinHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasterIslandBigWinHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasterIslandBigWinHistoryInfo) ProtoMessage() {}

func (x *EasterIslandBigWinHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasterIslandBigWinHistoryInfo.ProtoReflect.Descriptor instead.
func (*EasterIslandBigWinHistoryInfo) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{10}
}

func (x *EasterIslandBigWinHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *EasterIslandBigWinHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *EasterIslandBigWinHistoryInfo) GetRoomID() int64 {
	if x != nil {
		return x.RoomID
	}
	return 0
}

func (x *EasterIslandBigWinHistoryInfo) GetPriceValue() int64 {
	if x != nil {
		return x.PriceValue
	}
	return 0
}

func (x *EasterIslandBigWinHistoryInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// 大奖记录
type SCEasterIslandBigWinHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigWinHistory []*EasterIslandBigWinHistoryInfo `protobuf:"bytes,1,rep,name=BigWinHistory,proto3" json:"BigWinHistory,omitempty"`
}

func (x *SCEasterIslandBigWinHistory) Reset() {
	*x = SCEasterIslandBigWinHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandBigWinHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandBigWinHistory) ProtoMessage() {}

func (x *SCEasterIslandBigWinHistory) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandBigWinHistory.ProtoReflect.Descriptor instead.
func (*SCEasterIslandBigWinHistory) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{11}
}

func (x *SCEasterIslandBigWinHistory) GetBigWinHistory() []*EasterIslandBigWinHistoryInfo {
	if x != nil {
		return x.BigWinHistory
	}
	return nil
}

//房间状态
type SCEasterIslandRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态
}

func (x *SCEasterIslandRoomState) Reset() {
	*x = SCEasterIslandRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_easterisland_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCEasterIslandRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCEasterIslandRoomState) ProtoMessage() {}

func (x *SCEasterIslandRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_easterisland_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCEasterIslandRoomState.ProtoReflect.Descriptor instead.
func (*SCEasterIslandRoomState) Descriptor() ([]byte, []int) {
	return file_easterisland_proto_rawDescGZIP(), []int{12}
}

func (x *SCEasterIslandRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

var File_easterisland_proto protoreflect.FileDescriptor

var file_easterisland_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x56, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x19,
	0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x75, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x8d, 0x05, 0x0a, 0x16, 0x53, 0x43, 0x45, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x43, 0x68, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x45, 0x0a, 0x09,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x45,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x58, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x53, 0x45, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x10,
	0x53, 0x43, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x15, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x04, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12,
	0x43, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x58,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x58, 0x12, 0x45,
	0x0a, 0x09, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x2e, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a,
	0x18, 0x53, 0x43, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x45, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x70, 0x0a, 0x1b, 0x53, 0x43, 0x45, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x45, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1b, 0x53, 0x43, 0x45, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x42, 0x69, 0x67, 0x57,
	0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x43, 0x45,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x48, 0x0a, 0x0c, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x10, 0xa0, 0x08, 0x2a, 0xcb, 0x02, 0x0a, 0x14, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x1f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x49,
	0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xd0,
	0x28, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x45,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x4f, 0x50, 0x10, 0xd1, 0x28, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4c, 0x41, 0x4e,
	0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xd2, 0x28, 0x12, 0x25, 0x0a,
	0x20, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0xd3, 0x28, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xd4, 0x28, 0x12, 0x29, 0x0a, 0x24,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0xd5, 0x28, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x49, 0x53, 0x4c, 0x41, 0x4e,
	0x44, 0x5f, 0x42, 0x49, 0x47, 0x57, 0x49, 0x4e, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0xd6, 0x28, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_easterisland_proto_rawDescOnce sync.Once
	file_easterisland_proto_rawDescData = file_easterisland_proto_rawDesc
)

func file_easterisland_proto_rawDescGZIP() []byte {
	file_easterisland_proto_rawDescOnce.Do(func() {
		file_easterisland_proto_rawDescData = protoimpl.X.CompressGZIP(file_easterisland_proto_rawDescData)
	})
	return file_easterisland_proto_rawDescData
}

var file_easterisland_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_easterisland_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_easterisland_proto_goTypes = []interface{}{
	(OpResultCode)(0),                     // 0: easterisland.OpResultCode
	(EasterIslandPacketID)(0),             // 1: easterisland.EasterIslandPacketID
	(*EasterIslandPlayerData)(nil),        // 2: easterisland.EasterIslandPlayerData
	(*EasterIslandBonusGameInfo)(nil),     // 3: easterisland.EasterIslandBonusGameInfo
	(*SCEasterIslandRoomInfo)(nil),        // 4: easterisland.SCEasterIslandRoomInfo
	(*CSEasterIslandOp)(nil),              // 5: easterisland.CSEasterIslandOp
	(*SCEasterIslandOp)(nil),              // 6: easterisland.SCEasterIslandOp
	(*EasterIslandLinesInfo)(nil),         // 7: easterisland.EasterIslandLinesInfo
	(*GameBilledData)(nil),                // 8: easterisland.GameBilledData
	(*SCEasterIslandGameBilled)(nil),      // 9: easterisland.SCEasterIslandGameBilled
	(*EasterIslandPlayerHistoryInfo)(nil), // 10: easterisland.EasterIslandPlayerHistoryInfo
	(*SCEasterIslandPlayerHistory)(nil),   // 11: easterisland.SCEasterIslandPlayerHistory
	(*EasterIslandBigWinHistoryInfo)(nil), // 12: easterisland.EasterIslandBigWinHistoryInfo
	(*SCEasterIslandBigWinHistory)(nil),   // 13: easterisland.SCEasterIslandBigWinHistory
	(*SCEasterIslandRoomState)(nil),       // 14: easterisland.SCEasterIslandRoomState
}
var file_easterisland_proto_depIdxs = []int32{
	2,  // 0: easterisland.SCEasterIslandRoomInfo.Players:type_name -> easterisland.EasterIslandPlayerData
	3,  // 1: easterisland.SCEasterIslandRoomInfo.BonusGame:type_name -> easterisland.EasterIslandBonusGameInfo
	8,  // 2: easterisland.SCEasterIslandRoomInfo.BilledData:type_name -> easterisland.GameBilledData
	0,  // 3: easterisland.SCEasterIslandOp.OpRetCode:type_name -> easterisland.OpResultCode
	7,  // 4: easterisland.GameBilledData.PrizeLines:type_name -> easterisland.EasterIslandLinesInfo
	3,  // 5: easterisland.GameBilledData.BonusGame:type_name -> easterisland.EasterIslandBonusGameInfo
	8,  // 6: easterisland.SCEasterIslandGameBilled.BilledData:type_name -> easterisland.GameBilledData
	10, // 7: easterisland.SCEasterIslandPlayerHistory.PlayerHistory:type_name -> easterisland.EasterIslandPlayerHistoryInfo
	12, // 8: easterisland.SCEasterIslandBigWinHistory.BigWinHistory:type_name -> easterisland.EasterIslandBigWinHistoryInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_easterisland_proto_init() }
func file_easterisland_proto_init() {
	if File_easterisland_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_easterisland_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterIslandPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterIslandBonusGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSEasterIslandOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterIslandLinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBilledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterIslandPlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandPlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasterIslandBigWinHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandBigWinHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_easterisland_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCEasterIslandRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_easterisland_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_easterisland_proto_goTypes,
		DependencyIndexes: file_easterisland_proto_depIdxs,
		EnumInfos:         file_easterisland_proto_enumTypes,
		MessageInfos:      file_easterisland_proto_msgTypes,
	}.Build()
	File_easterisland_proto = out.File
	file_easterisland_proto_rawDesc = nil
	file_easterisland_proto_goTypes = nil
	file_easterisland_proto_depIdxs = nil
}
