// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess OpResultCode = 0 //成功
	OpResultCode_OPRC_Error  OpResultCode = 1 //失败
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess": 0,
		"OPRC_Error":  1,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

//任务消息id
type TaskPacketID int32

const (
	TaskPacketID_PACKET_Task_ZERO        TaskPacketID = 0 // 弃用消息号
	TaskPacketID_PACKET_CS_TASKLIST      TaskPacketID = 2400
	TaskPacketID_PACKET_SC_TASKLIST      TaskPacketID = 2401
	TaskPacketID_PACKET_SC_TASKCHG       TaskPacketID = 2402
	TaskPacketID_PACKET_SC_TACKCOMPLETE  TaskPacketID = 2403
	TaskPacketID_PACKET_SC_TASKDEL       TaskPacketID = 2404
	TaskPacketID_PACKET_CS_TACKDRAWPRIZE TaskPacketID = 2405
	TaskPacketID_PACKET_SC_TACKDRAWPRIZE TaskPacketID = 2406
)

// Enum value maps for TaskPacketID.
var (
	TaskPacketID_name = map[int32]string{
		0:    "PACKET_Task_ZERO",
		2400: "PACKET_CS_TASKLIST",
		2401: "PACKET_SC_TASKLIST",
		2402: "PACKET_SC_TASKCHG",
		2403: "PACKET_SC_TACKCOMPLETE",
		2404: "PACKET_SC_TASKDEL",
		2405: "PACKET_CS_TACKDRAWPRIZE",
		2406: "PACKET_SC_TACKDRAWPRIZE",
	}
	TaskPacketID_value = map[string]int32{
		"PACKET_Task_ZERO":        0,
		"PACKET_CS_TASKLIST":      2400,
		"PACKET_SC_TASKLIST":      2401,
		"PACKET_SC_TASKCHG":       2402,
		"PACKET_SC_TACKCOMPLETE":  2403,
		"PACKET_SC_TASKDEL":       2404,
		"PACKET_CS_TACKDRAWPRIZE": 2405,
		"PACKET_SC_TACKDRAWPRIZE": 2406,
	}
)

func (x TaskPacketID) Enum() *TaskPacketID {
	p := new(TaskPacketID)
	*p = x
	return p
}

func (x TaskPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_task_proto_enumTypes[1].Descriptor()
}

func (TaskPacketID) Type() protoreflect.EnumType {
	return &file_task_proto_enumTypes[1]
}

func (x TaskPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskPacketID.Descriptor instead.
func (TaskPacketID) EnumDescriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

//任务数据
type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                         //任务ID
	Desc           string  `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`                      //任务描述
	Count          int64   `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`                   //当前计数
	GoalCount      int64   `protobuf:"varint,4,opt,name=GoalCount,proto3" json:"GoalCount,omitempty"`           //目标计数
	CompletedTimes int32   `protobuf:"varint,5,opt,name=CompletedTimes,proto3" json:"CompletedTimes,omitempty"` //已完成次数
	LimitTimes     int32   `protobuf:"varint,6,opt,name=LimitTimes,proto3" json:"LimitTimes,omitempty"`         //接受任务的时间
	Status         int32   `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`                 //任务状态 0:进行中 1:已完成 2:奖励已领取 3:已过期
	Prizes         int32   `protobuf:"varint,8,opt,name=Prizes,proto3" json:"Prizes,omitempty"`                 //奖励内容
	GameFreeId     []int32 `protobuf:"varint,9,rep,packed,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`  //游戏场次id
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TaskData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TaskData) GetGoalCount() int64 {
	if x != nil {
		return x.GoalCount
	}
	return 0
}

func (x *TaskData) GetCompletedTimes() int32 {
	if x != nil {
		return x.CompletedTimes
	}
	return 0
}

func (x *TaskData) GetLimitTimes() int32 {
	if x != nil {
		return x.LimitTimes
	}
	return 0
}

func (x *TaskData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskData) GetPrizes() int32 {
	if x != nil {
		return x.Prizes
	}
	return 0
}

func (x *TaskData) GetGameFreeId() []int32 {
	if x != nil {
		return x.GameFreeId
	}
	return nil
}

//任务列表
//PACKET_CS_TASKLIST
type CSTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSTaskList) Reset() {
	*x = CSTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTaskList) ProtoMessage() {}

func (x *CSTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTaskList.ProtoReflect.Descriptor instead.
func (*CSTaskList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

//任务列表
//PACKET_SC_TASKLIST
type SCTaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskData `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *SCTaskList) Reset() {
	*x = SCTaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTaskList) ProtoMessage() {}

func (x *SCTaskList) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTaskList.ProtoReflect.Descriptor instead.
func (*SCTaskList) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *SCTaskList) GetTasks() []*TaskData {
	if x != nil {
		return x.Tasks
	}
	return nil
}

//任务进度改变
//PACKET_SC_TASKCHG
type SCTaskChg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskData `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
}

func (x *SCTaskChg) Reset() {
	*x = SCTaskChg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTaskChg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTaskChg) ProtoMessage() {}

func (x *SCTaskChg) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTaskChg.ProtoReflect.Descriptor instead.
func (*SCTaskChg) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *SCTaskChg) GetTasks() []*TaskData {
	if x != nil {
		return x.Tasks
	}
	return nil
}

//任务完成
//PACKET_SC_TACKCOMPLETE
type SCTaskComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int32 `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *SCTaskComplete) Reset() {
	*x = SCTaskComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTaskComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTaskComplete) ProtoMessage() {}

func (x *SCTaskComplete) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTaskComplete.ProtoReflect.Descriptor instead.
func (*SCTaskComplete) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *SCTaskComplete) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

//删除任务
//PACKET_SC_TASKDEL
type SCTaskDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIds []int32 `protobuf:"varint,1,rep,packed,name=TaskIds,proto3" json:"TaskIds,omitempty"`
}

func (x *SCTaskDel) Reset() {
	*x = SCTaskDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTaskDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTaskDel) ProtoMessage() {}

func (x *SCTaskDel) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTaskDel.ProtoReflect.Descriptor instead.
func (*SCTaskDel) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *SCTaskDel) GetTaskIds() []int32 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

//领取任务奖励
//PACKET_CS_TACKDRAWPRIZE
type CSTaskDrawPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int32 `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CSTaskDrawPrize) Reset() {
	*x = CSTaskDrawPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTaskDrawPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTaskDrawPrize) ProtoMessage() {}

func (x *CSTaskDrawPrize) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTaskDrawPrize.ProtoReflect.Descriptor instead.
func (*CSTaskDrawPrize) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *CSTaskDrawPrize) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

//PACKET_SC_TACKDRAWPRIZE
type SCTaskDrawPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int32        `protobuf:"varint,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	OpCode OpResultCode `protobuf:"varint,2,opt,name=OpCode,proto3,enum=task.OpResultCode" json:"OpCode,omitempty"` //操作码
	Prize  int32        `protobuf:"varint,3,opt,name=Prize,proto3" json:"Prize,omitempty"`                          //任务奖励
	Data   *TaskData    `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`                             //任务数据更新
}

func (x *SCTaskDrawPrize) Reset() {
	*x = SCTaskDrawPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTaskDrawPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTaskDrawPrize) ProtoMessage() {}

func (x *SCTaskDrawPrize) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTaskDrawPrize.ProtoReflect.Descriptor instead.
func (*SCTaskDrawPrize) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *SCTaskDrawPrize) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *SCTaskDrawPrize) GetOpCode() OpResultCode {
	if x != nil {
		return x.OpCode
	}
	return OpResultCode_OPRC_Sucess
}

func (x *SCTaskDrawPrize) GetPrize() int32 {
	if x != nil {
		return x.Prize
	}
	return 0
}

func (x *SCTaskDrawPrize) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x6f,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22,
	0x0c, 0x0a, 0x0a, 0x43, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a,
	0x0a, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x67, 0x12, 0x24,
	0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x25,
	0x0a, 0x09, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x72, 0x61, 0x77, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x72, 0x61, 0x77, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x2a, 0x2f, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x01, 0x2a, 0xdf, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54,
	0x61, 0x73, 0x6b, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0xe0, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xe1, 0x12, 0x12, 0x16, 0x0a, 0x11,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x43, 0x48,
	0x47, 0x10, 0xe2, 0x12, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x54, 0x41, 0x43, 0x4b, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xe3,
	0x12, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x44, 0x45, 0x4c, 0x10, 0xe4, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x54, 0x41, 0x43, 0x4b, 0x44, 0x52, 0x41, 0x57, 0x50,
	0x52, 0x49, 0x5a, 0x45, 0x10, 0xe5, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x54, 0x41, 0x43, 0x4b, 0x44, 0x52, 0x41, 0x57, 0x50, 0x52, 0x49,
	0x5a, 0x45, 0x10, 0xe6, 0x12, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x74, 0x61, 0x73, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_task_proto_goTypes = []interface{}{
	(OpResultCode)(0),       // 0: task.OpResultCode
	(TaskPacketID)(0),       // 1: task.TaskPacketID
	(*TaskData)(nil),        // 2: task.TaskData
	(*CSTaskList)(nil),      // 3: task.CSTaskList
	(*SCTaskList)(nil),      // 4: task.SCTaskList
	(*SCTaskChg)(nil),       // 5: task.SCTaskChg
	(*SCTaskComplete)(nil),  // 6: task.SCTaskComplete
	(*SCTaskDel)(nil),       // 7: task.SCTaskDel
	(*CSTaskDrawPrize)(nil), // 8: task.CSTaskDrawPrize
	(*SCTaskDrawPrize)(nil), // 9: task.SCTaskDrawPrize
}
var file_task_proto_depIdxs = []int32{
	2, // 0: task.SCTaskList.Tasks:type_name -> task.TaskData
	2, // 1: task.SCTaskChg.Tasks:type_name -> task.TaskData
	0, // 2: task.SCTaskDrawPrize.OpCode:type_name -> task.OpResultCode
	2, // 3: task.SCTaskDrawPrize.Data:type_name -> task.TaskData
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTaskChg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTaskComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTaskDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTaskDrawPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTaskDrawPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		EnumInfos:         file_task_proto_enumTypes,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}
