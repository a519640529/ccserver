// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: dezhoupoker.proto

package dezhoupoker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess OpResultCode = 0 //成功
	OpResultCode_OPRC_Error  OpResultCode = 1 //失败
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess": 0,
		"OPRC_Error":  1,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dezhoupoker_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_dezhoupoker_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{0}
}

//德州扑克
type DZPKPacketID int32

const (
	DZPKPacketID_PACKET_BlackJack_ZERO                   DZPKPacketID = 0    // 弃用消息号
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_ROOMINFO          DZPKPacketID = 5340 //房间信息
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_ROOMSTATE         DZPKPacketID = 5341 //房间状态
	DZPKPacketID_PACKET_CS_DEZHOUPOKER_OP                DZPKPacketID = 5342 //玩家操作
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_OP                DZPKPacketID = 5343 //玩家操作
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_GAMEBILLED        DZPKPacketID = 5346 //游戏结算
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_NEXTOPERNOTIFY    DZPKPacketID = 5347 //广播通知下一个操作玩家和操作参数
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_CARD              DZPKPacketID = 5348 //发牌
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_BANKANDBLINDPOS   DZPKPacketID = 5349 //庄家和大小盲的位置
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_POTS              DZPKPacketID = 5350 //池
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_SITDOWN           DZPKPacketID = 5351 //坐下
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_STANDUP           DZPKPacketID = 5352 //站起
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_GAMECOIN          DZPKPacketID = 5353 //带入金币变化时推送
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_PLAYERENTER       DZPKPacketID = 5354 //玩家进入
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_PLAYERLEAVE       DZPKPacketID = 5355 //玩家离开
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_SHOWPOKER         DZPKPacketID = 5356 //亮牌
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_GAMEBILLED_MIDDLE DZPKPacketID = 5357 //中途结算
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_AUTOBUYIN         DZPKPacketID = 5358 //自动带入
	DZPKPacketID_PACKET_SC_DEZHOUPOKER_GAMEBILLEDBYPOTS  DZPKPacketID = 5359 //根据池来结算
	DZPKPacketID_PACKET_CSC_DEZHOUPOKER_WPUPDATE         DZPKPacketID = 5360 //玩家的手牌胜率
)

// Enum value maps for DZPKPacketID.
var (
	DZPKPacketID_name = map[int32]string{
		0:    "PACKET_BlackJack_ZERO",
		5340: "PACKET_SC_DEZHOUPOKER_ROOMINFO",
		5341: "PACKET_SC_DEZHOUPOKER_ROOMSTATE",
		5342: "PACKET_CS_DEZHOUPOKER_OP",
		5343: "PACKET_SC_DEZHOUPOKER_OP",
		5346: "PACKET_SC_DEZHOUPOKER_GAMEBILLED",
		5347: "PACKET_SC_DEZHOUPOKER_NEXTOPERNOTIFY",
		5348: "PACKET_SC_DEZHOUPOKER_CARD",
		5349: "PACKET_SC_DEZHOUPOKER_BANKANDBLINDPOS",
		5350: "PACKET_SC_DEZHOUPOKER_POTS",
		5351: "PACKET_SC_DEZHOUPOKER_SITDOWN",
		5352: "PACKET_SC_DEZHOUPOKER_STANDUP",
		5353: "PACKET_SC_DEZHOUPOKER_GAMECOIN",
		5354: "PACKET_SC_DEZHOUPOKER_PLAYERENTER",
		5355: "PACKET_SC_DEZHOUPOKER_PLAYERLEAVE",
		5356: "PACKET_SC_DEZHOUPOKER_SHOWPOKER",
		5357: "PACKET_SC_DEZHOUPOKER_GAMEBILLED_MIDDLE",
		5358: "PACKET_SC_DEZHOUPOKER_AUTOBUYIN",
		5359: "PACKET_SC_DEZHOUPOKER_GAMEBILLEDBYPOTS",
		5360: "PACKET_CSC_DEZHOUPOKER_WPUPDATE",
	}
	DZPKPacketID_value = map[string]int32{
		"PACKET_BlackJack_ZERO":                   0,
		"PACKET_SC_DEZHOUPOKER_ROOMINFO":          5340,
		"PACKET_SC_DEZHOUPOKER_ROOMSTATE":         5341,
		"PACKET_CS_DEZHOUPOKER_OP":                5342,
		"PACKET_SC_DEZHOUPOKER_OP":                5343,
		"PACKET_SC_DEZHOUPOKER_GAMEBILLED":        5346,
		"PACKET_SC_DEZHOUPOKER_NEXTOPERNOTIFY":    5347,
		"PACKET_SC_DEZHOUPOKER_CARD":              5348,
		"PACKET_SC_DEZHOUPOKER_BANKANDBLINDPOS":   5349,
		"PACKET_SC_DEZHOUPOKER_POTS":              5350,
		"PACKET_SC_DEZHOUPOKER_SITDOWN":           5351,
		"PACKET_SC_DEZHOUPOKER_STANDUP":           5352,
		"PACKET_SC_DEZHOUPOKER_GAMECOIN":          5353,
		"PACKET_SC_DEZHOUPOKER_PLAYERENTER":       5354,
		"PACKET_SC_DEZHOUPOKER_PLAYERLEAVE":       5355,
		"PACKET_SC_DEZHOUPOKER_SHOWPOKER":         5356,
		"PACKET_SC_DEZHOUPOKER_GAMEBILLED_MIDDLE": 5357,
		"PACKET_SC_DEZHOUPOKER_AUTOBUYIN":         5358,
		"PACKET_SC_DEZHOUPOKER_GAMEBILLEDBYPOTS":  5359,
		"PACKET_CSC_DEZHOUPOKER_WPUPDATE":         5360,
	}
)

func (x DZPKPacketID) Enum() *DZPKPacketID {
	p := new(DZPKPacketID)
	*p = x
	return p
}

func (x DZPKPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DZPKPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_dezhoupoker_proto_enumTypes[1].Descriptor()
}

func (DZPKPacketID) Type() protoreflect.EnumType {
	return &file_dezhoupoker_proto_enumTypes[1]
}

func (x DZPKPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DZPKPacketID.Descriptor instead.
func (DZPKPacketID) EnumDescriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{1}
}

//玩家信息
type DezhouPokerPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                           //名字
	SnId             int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                          //账号
	Head             int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                          //头像
	Sex              int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                            //性别
	Params           []string `protobuf:"bytes,5,rep,name=Params,proto3" json:"Params,omitempty"`                       //其他数据 如:昵称 头像 性别 ip 等
	Coin             int64    `protobuf:"varint,6,opt,name=Coin,proto3" json:"Coin,omitempty"`                          //金币
	Pos              int32    `protobuf:"varint,7,opt,name=Pos,proto3" json:"Pos,omitempty"`                            //座位位置
	Flag             int32    `protobuf:"varint,8,opt,name=Flag,proto3" json:"Flag,omitempty"`                          //二进制标记 详见:数据字典
	Longitude        int32    `protobuf:"varint,9,opt,name=Longitude,proto3" json:"Longitude,omitempty"`                //经度
	Latitude         int32    `protobuf:"varint,10,opt,name=Latitude,proto3" json:"Latitude,omitempty"`                 //纬度
	City             string   `protobuf:"bytes,11,opt,name=City,proto3" json:"City,omitempty"`                          //城市 例:伦敦
	LastOp           int32    `protobuf:"varint,12,opt,name=LastOp,proto3" json:"LastOp,omitempty"`                     //如上:玩家操作
	Cards            []int32  `protobuf:"varint,13,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                //手牌
	CurRoundTotalBet int64    `protobuf:"varint,14,opt,name=CurRoundTotalBet,proto3" json:"CurRoundTotalBet,omitempty"` //本轮押注已押的金币
	GameCoin         int64    `protobuf:"varint,15,opt,name=GameCoin,proto3" json:"GameCoin,omitempty"`                 //游戏内带入的金币
	VIP              int32    `protobuf:"varint,16,opt,name=VIP,proto3" json:"VIP,omitempty"`                           //玩家VIP等级
	HeadOutLine      int32    `protobuf:"varint,17,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"`           //头像框
	NiceId           int32    `protobuf:"varint,18,opt,name=NiceId,proto3" json:"NiceId,omitempty"`                     //靓号[机器人用]
}

func (x *DezhouPokerPlayerData) Reset() {
	*x = DezhouPokerPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DezhouPokerPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DezhouPokerPlayerData) ProtoMessage() {}

func (x *DezhouPokerPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DezhouPokerPlayerData.ProtoReflect.Descriptor instead.
func (*DezhouPokerPlayerData) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{0}
}

func (x *DezhouPokerPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DezhouPokerPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DezhouPokerPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DezhouPokerPlayerData) GetLastOp() int32 {
	if x != nil {
		return x.LastOp
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DezhouPokerPlayerData) GetCurRoundTotalBet() int64 {
	if x != nil {
		return x.CurRoundTotalBet
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetGameCoin() int64 {
	if x != nil {
		return x.GameCoin
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *DezhouPokerPlayerData) GetNiceId() int32 {
	if x != nil {
		return x.NiceId
	}
	return 0
}

//房间信息
//PACKET_SC_DEZHOUPOKER_ROOMINFO
type SCDezhouPokerRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId                   int32                    `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                                      //房间id
	Creator                  int32                    `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                                    //创建者SnId
	GameId                   int32                    `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                                      //游戏id
	RoomMode                 int32                    `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                                  //游戏模式
	Params                   []int32                  `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`                               //规则参数
	BankerPos                int32                    `protobuf:"varint,6,opt,name=BankerPos,proto3" json:"BankerPos,omitempty"`                                //庄家位置
	State                    int32                    `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`                                        //房间当前状态,如上
	TimeOut                  int32                    `protobuf:"varint,8,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                                    //等待剩余时间 单位:秒
	Players                  []*DezhouPokerPlayerData `protobuf:"bytes,9,rep,name=Players,proto3" json:"Players,omitempty"`                                     //房间内的玩家信息
	PosList                  []int32                  `protobuf:"varint,10,rep,packed,name=PosList,proto3" json:"PosList,omitempty"`                            //所有参与本局游戏的玩家位置，包括庄家，大小盲
	TotalBet                 int64                    `protobuf:"varint,11,opt,name=TotalBet,proto3" json:"TotalBet,omitempty"`                                 //本局桌面上已压的筹码总和
	CurOpIdx                 int32                    `protobuf:"varint,12,opt,name=CurOpIdx,proto3" json:"CurOpIdx,omitempty"`                                 //当前等待操作的玩家
	Cards                    []int32                  `protobuf:"varint,13,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                                //公牌
	Pots                     []int64                  `protobuf:"varint,14,rep,packed,name=Pots,proto3" json:"Pots,omitempty"`                                  //主池+边池
	MatchParams              []int32                  `protobuf:"varint,15,rep,packed,name=MatchParams,proto3" json:"MatchParams,omitempty"`                    //比赛参数
	SmallBlind               int64                    `protobuf:"varint,16,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`                             //小盲
	MinRaise                 int64                    `protobuf:"varint,17,opt,name=MinRaise,proto3" json:"MinRaise,omitempty"`                                 //最小加注值
	RoundMaxBet              int64                    `protobuf:"varint,18,opt,name=RoundMaxBet,proto3" json:"RoundMaxBet,omitempty"`                           //当前轮最大下注值
	NextOperPos              int32                    `protobuf:"varint,19,opt,name=NextOperPos,proto3" json:"NextOperPos,omitempty"`                           //下一个操作者位置
	NextOperCurRoundTotalBet int64                    `protobuf:"varint,20,opt,name=NextOperCurRoundTotalBet,proto3" json:"NextOperCurRoundTotalBet,omitempty"` //本轮押注已押的金币.这个变量其实在Players中已经存在
	CurOpTimeOut             int32                    `protobuf:"varint,21,opt,name=CurOpTimeOut,proto3" json:"CurOpTimeOut,omitempty"`                         //当前等待操作的玩家持续时间
	NumOfGames               int32                    `protobuf:"varint,22,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`                             //当前局数
	TotalOfGames             int32                    `protobuf:"varint,23,opt,name=TotalOfGames,proto3" json:"TotalOfGames,omitempty"`                         //总局数
}

func (x *SCDezhouPokerRoomInfo) Reset() {
	*x = SCDezhouPokerRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerRoomInfo) ProtoMessage() {}

func (x *SCDezhouPokerRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerRoomInfo.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerRoomInfo) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{1}
}

func (x *SCDezhouPokerRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetBankerPos() int32 {
	if x != nil {
		return x.BankerPos
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetPlayers() []*DezhouPokerPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetPosList() []int32 {
	if x != nil {
		return x.PosList
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetCurOpIdx() int32 {
	if x != nil {
		return x.CurOpIdx
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetPots() []int64 {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetMatchParams() []int32 {
	if x != nil {
		return x.MatchParams
	}
	return nil
}

func (x *SCDezhouPokerRoomInfo) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetRoundMaxBet() int64 {
	if x != nil {
		return x.RoundMaxBet
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetNextOperPos() int32 {
	if x != nil {
		return x.NextOperPos
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetNextOperCurRoundTotalBet() int64 {
	if x != nil {
		return x.NextOperCurRoundTotalBet
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetCurOpTimeOut() int32 {
	if x != nil {
		return x.CurOpTimeOut
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCDezhouPokerRoomInfo) GetTotalOfGames() int32 {
	if x != nil {
		return x.TotalOfGames
	}
	return 0
}

//房间状态更新
//PACKET_SC_DEZHOUPOKER_ROOMSTATE
type SCDezhouPokerRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //参数 case State=0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 : 无参数
}

func (x *SCDezhouPokerRoomState) Reset() {
	*x = SCDezhouPokerRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerRoomState) ProtoMessage() {}

func (x *SCDezhouPokerRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerRoomState.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerRoomState) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{2}
}

func (x *SCDezhouPokerRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCDezhouPokerRoomState) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

type SCDezhouPokerBankerAndBlindPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerPos     int32   `protobuf:"varint,1,opt,name=BankerPos,proto3" json:"BankerPos,omitempty"`         //庄家位置
	SmallBlindPos int32   `protobuf:"varint,2,opt,name=SmallBlindPos,proto3" json:"SmallBlindPos,omitempty"` //小盲位置
	BigBlindPos   int32   `protobuf:"varint,3,opt,name=BigBlindPos,proto3" json:"BigBlindPos,omitempty"`     //大盲位置
	PosList       []int32 `protobuf:"varint,4,rep,packed,name=PosList,proto3" json:"PosList,omitempty"`      //所有参与本局游戏的玩家位置，包括庄家，大小盲
	SmallBlind    int64   `protobuf:"varint,5,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`       //小盲
}

func (x *SCDezhouPokerBankerAndBlindPos) Reset() {
	*x = SCDezhouPokerBankerAndBlindPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerBankerAndBlindPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerBankerAndBlindPos) ProtoMessage() {}

func (x *SCDezhouPokerBankerAndBlindPos) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerBankerAndBlindPos.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerBankerAndBlindPos) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{3}
}

func (x *SCDezhouPokerBankerAndBlindPos) GetBankerPos() int32 {
	if x != nil {
		return x.BankerPos
	}
	return 0
}

func (x *SCDezhouPokerBankerAndBlindPos) GetSmallBlindPos() int32 {
	if x != nil {
		return x.SmallBlindPos
	}
	return 0
}

func (x *SCDezhouPokerBankerAndBlindPos) GetBigBlindPos() int32 {
	if x != nil {
		return x.BigBlindPos
	}
	return 0
}

func (x *SCDezhouPokerBankerAndBlindPos) GetPosList() []int32 {
	if x != nil {
		return x.PosList
	}
	return nil
}

func (x *SCDezhouPokerBankerAndBlindPos) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

//PACKET_SC_DEZHOUPOKER_POTS = 5350
type SCDezhouPokerPots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pots []int64 `protobuf:"varint,1,rep,packed,name=Pots,proto3" json:"Pots,omitempty"` //池
}

func (x *SCDezhouPokerPots) Reset() {
	*x = SCDezhouPokerPots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPots) ProtoMessage() {}

func (x *SCDezhouPokerPots) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPots.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPots) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{4}
}

func (x *SCDezhouPokerPots) GetPots() []int64 {
	if x != nil {
		return x.Pots
	}
	return nil
}

//玩家操作
//PACKET_SC_DEZHOUPOKER_OP
type CSDezhouPokerPlayerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode  int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`          //见上
	OpParam []int64 `protobuf:"varint,2,rep,packed,name=OpParam,proto3" json:"OpParam,omitempty"` //待定
}

func (x *CSDezhouPokerPlayerOp) Reset() {
	*x = CSDezhouPokerPlayerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSDezhouPokerPlayerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSDezhouPokerPlayerOp) ProtoMessage() {}

func (x *CSDezhouPokerPlayerOp) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSDezhouPokerPlayerOp.ProtoReflect.Descriptor instead.
func (*CSDezhouPokerPlayerOp) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{5}
}

func (x *CSDezhouPokerPlayerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSDezhouPokerPlayerOp) GetOpParam() []int64 {
	if x != nil {
		return x.OpParam
	}
	return nil
}

type SCDezhouPokerPlayerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode  int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`          //详见:玩家操作码
	OpParam []int64 `protobuf:"varint,2,rep,packed,name=OpParam,proto3" json:"OpParam,omitempty"` //case OpCode=1,2,3,4,5,6,7,8 : 参数1:当前操作下注的金额 参数2:当前轮总下注额 参数3:身上剩余金币 参数4:房间内总的下注额
	//case OpCode=9,10 : 无参数
	Pos       int32        `protobuf:"varint,3,opt,name=Pos,proto3" json:"Pos,omitempty"`                                           //玩家位置
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=dezhoupoker.OpResultCode" json:"OpRetCode,omitempty"` //返回错误码,详见:enums.proto
}

func (x *SCDezhouPokerPlayerOp) Reset() {
	*x = SCDezhouPokerPlayerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerOp) ProtoMessage() {}

func (x *SCDezhouPokerPlayerOp) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerOp.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerOp) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{6}
}

func (x *SCDezhouPokerPlayerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCDezhouPokerPlayerOp) GetOpParam() []int64 {
	if x != nil {
		return x.OpParam
	}
	return nil
}

func (x *SCDezhouPokerPlayerOp) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCDezhouPokerPlayerOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//带入金币 PACKET_SC_DEZHOUPOKER_AUTOBUYIN
type SCDezhouPokerBuyIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoBuyIn  int64 `protobuf:"varint,1,opt,name=AutoBuyIn,proto3" json:"AutoBuyIn,omitempty"`   //自动带入
	ToGameCoin int64 `protobuf:"varint,2,opt,name=ToGameCoin,proto3" json:"ToGameCoin,omitempty"` //最大带入
}

func (x *SCDezhouPokerBuyIn) Reset() {
	*x = SCDezhouPokerBuyIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerBuyIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerBuyIn) ProtoMessage() {}

func (x *SCDezhouPokerBuyIn) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerBuyIn.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerBuyIn) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{7}
}

func (x *SCDezhouPokerBuyIn) GetAutoBuyIn() int64 {
	if x != nil {
		return x.AutoBuyIn
	}
	return 0
}

func (x *SCDezhouPokerBuyIn) GetToGameCoin() int64 {
	if x != nil {
		return x.ToGameCoin
	}
	return 0
}

//金币变化 PACKET_SC_DEZHOUPOKER_GAMECOIN
type SCDezhouPokerPlayerGameCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos        int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`               //玩家位置
	GameCoin   int64 `protobuf:"varint,2,opt,name=GameCoin,proto3" json:"GameCoin,omitempty"`     //剩余筹码
	State      int32 `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`           //0.默认不处理  1.自动带入
	ChangeCoin int64 `protobuf:"varint,4,opt,name=ChangeCoin,proto3" json:"ChangeCoin,omitempty"` //变化金币
}

func (x *SCDezhouPokerPlayerGameCoin) Reset() {
	*x = SCDezhouPokerPlayerGameCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerGameCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerGameCoin) ProtoMessage() {}

func (x *SCDezhouPokerPlayerGameCoin) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerGameCoin.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerGameCoin) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{8}
}

func (x *SCDezhouPokerPlayerGameCoin) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCDezhouPokerPlayerGameCoin) GetGameCoin() int64 {
	if x != nil {
		return x.GameCoin
	}
	return 0
}

func (x *SCDezhouPokerPlayerGameCoin) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCDezhouPokerPlayerGameCoin) GetChangeCoin() int64 {
	if x != nil {
		return x.ChangeCoin
	}
	return 0
}

//玩家站起。游戏中站起默认为弃牌
//玩家站起
type SCDezhouPokerPlayerStandUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos       int32        `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`                                           //玩家位置
	OpRetCode OpResultCode `protobuf:"varint,2,opt,name=OpRetCode,proto3,enum=dezhoupoker.OpResultCode" json:"OpRetCode,omitempty"` //返回错误码，详见:enums.proto
}

func (x *SCDezhouPokerPlayerStandUp) Reset() {
	*x = SCDezhouPokerPlayerStandUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerStandUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerStandUp) ProtoMessage() {}

func (x *SCDezhouPokerPlayerStandUp) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerStandUp.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerStandUp) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{9}
}

func (x *SCDezhouPokerPlayerStandUp) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCDezhouPokerPlayerStandUp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//玩家坐下。要排定钱是否足够。自动带入最小带入
//玩家坐下
type SCDezhouPokerPlayerSit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *DezhouPokerPlayerData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`                                          //玩家数据
	OpRetCode OpResultCode           `protobuf:"varint,2,opt,name=OpRetCode,proto3,enum=dezhoupoker.OpResultCode" json:"OpRetCode,omitempty"` //返回错误码，详见:enums.proto
}

func (x *SCDezhouPokerPlayerSit) Reset() {
	*x = SCDezhouPokerPlayerSit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerSit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerSit) ProtoMessage() {}

func (x *SCDezhouPokerPlayerSit) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerSit.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerSit) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{10}
}

func (x *SCDezhouPokerPlayerSit) GetData() *DezhouPokerPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SCDezhouPokerPlayerSit) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

type DezhouPokerCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
}

func (x *DezhouPokerCards) Reset() {
	*x = DezhouPokerCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DezhouPokerCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DezhouPokerCards) ProtoMessage() {}

func (x *DezhouPokerCards) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DezhouPokerCards.ProtoReflect.Descriptor instead.
func (*DezhouPokerCards) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{11}
}

func (x *DezhouPokerCards) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

//下一个玩家的操作提示
//PACKET_SC_DEZHOUPOKER_NEXTOPERNOTIFY
type SCDezhouPokerOperNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinRaise                 int64 `protobuf:"varint,1,opt,name=MinRaise,proto3" json:"MinRaise,omitempty"`                                 //最小加注值
	RoundMaxBet              int64 `protobuf:"varint,2,opt,name=RoundMaxBet,proto3" json:"RoundMaxBet,omitempty"`                           //当前轮最大下注值
	NextOperPos              int32 `protobuf:"varint,3,opt,name=NextOperPos,proto3" json:"NextOperPos,omitempty"`                           //下一个操作者位置
	NextOperCurRoundTotalBet int64 `protobuf:"varint,4,opt,name=NextOperCurRoundTotalBet,proto3" json:"NextOperCurRoundTotalBet,omitempty"` //下一个操作者本轮押注已押的金币
	// robot
	PlayerSeat      int32               `protobuf:"varint,5,opt,name=PlayerSeat,proto3" json:"PlayerSeat,omitempty"`
	ButtonSeat      int32               `protobuf:"varint,6,opt,name=ButtonSeat,proto3" json:"ButtonSeat,omitempty"`
	TotalPlayers    int32               `protobuf:"varint,7,opt,name=TotalPlayers,proto3" json:"TotalPlayers,omitempty"`
	Round           int32               `protobuf:"varint,8,opt,name=Round,proto3" json:"Round,omitempty"`
	Pot             int64               `protobuf:"varint,9,opt,name=Pot,proto3" json:"Pot,omitempty"`
	BetChips        int64               `protobuf:"varint,10,opt,name=BetChips,proto3" json:"BetChips,omitempty"`
	PlayersHole     []*DezhouPokerCards `protobuf:"bytes,11,rep,name=PlayersHole,proto3" json:"PlayersHole,omitempty"`
	Board           []int32             `protobuf:"varint,12,rep,packed,name=Board,proto3" json:"Board,omitempty"`
	Actions         string              `protobuf:"bytes,13,opt,name=Actions,proto3" json:"Actions,omitempty"`
	RemainChips     int64               `protobuf:"varint,14,opt,name=RemainChips,proto3" json:"RemainChips,omitempty"`
	RaiseOption     []int64             `protobuf:"varint,15,rep,packed,name=RaiseOption,proto3" json:"RaiseOption,omitempty"`
	Survival        []int32             `protobuf:"varint,16,rep,packed,name=Survival,proto3" json:"Survival,omitempty"`
	CurrRoundPerBet []int64             `protobuf:"varint,17,rep,packed,name=CurrRoundPerBet,proto3" json:"CurrRoundPerBet,omitempty"` //当前轮，每个人总的下注额
	RolePos         int32               `protobuf:"varint,18,opt,name=RolePos,proto3" json:"RolePos,omitempty"`                        //玩家位置信息
	RestPlayerCnt   int32               `protobuf:"varint,19,opt,name=RestPlayerCnt,proto3" json:"RestPlayerCnt,omitempty"`            //当前剩余玩家数量
}

func (x *SCDezhouPokerOperNotify) Reset() {
	*x = SCDezhouPokerOperNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerOperNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerOperNotify) ProtoMessage() {}

func (x *SCDezhouPokerOperNotify) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerOperNotify.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerOperNotify) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{12}
}

func (x *SCDezhouPokerOperNotify) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetRoundMaxBet() int64 {
	if x != nil {
		return x.RoundMaxBet
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetNextOperPos() int32 {
	if x != nil {
		return x.NextOperPos
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetNextOperCurRoundTotalBet() int64 {
	if x != nil {
		return x.NextOperCurRoundTotalBet
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetPlayerSeat() int32 {
	if x != nil {
		return x.PlayerSeat
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetButtonSeat() int32 {
	if x != nil {
		return x.ButtonSeat
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetTotalPlayers() int32 {
	if x != nil {
		return x.TotalPlayers
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetPot() int64 {
	if x != nil {
		return x.Pot
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetPlayersHole() []*DezhouPokerCards {
	if x != nil {
		return x.PlayersHole
	}
	return nil
}

func (x *SCDezhouPokerOperNotify) GetBoard() []int32 {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *SCDezhouPokerOperNotify) GetActions() string {
	if x != nil {
		return x.Actions
	}
	return ""
}

func (x *SCDezhouPokerOperNotify) GetRemainChips() int64 {
	if x != nil {
		return x.RemainChips
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetRaiseOption() []int64 {
	if x != nil {
		return x.RaiseOption
	}
	return nil
}

func (x *SCDezhouPokerOperNotify) GetSurvival() []int32 {
	if x != nil {
		return x.Survival
	}
	return nil
}

func (x *SCDezhouPokerOperNotify) GetCurrRoundPerBet() []int64 {
	if x != nil {
		return x.CurrRoundPerBet
	}
	return nil
}

func (x *SCDezhouPokerOperNotify) GetRolePos() int32 {
	if x != nil {
		return x.RolePos
	}
	return 0
}

func (x *SCDezhouPokerOperNotify) GetRestPlayerCnt() int32 {
	if x != nil {
		return x.RestPlayerCnt
	}
	return 0
}

//发牌
//PACKET_SC_DEZHOUPOKER_CARD
type SCDezhouPokerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort  int32   `protobuf:"varint,1,opt,name=Sort,proto3" json:"Sort,omitempty"`          //0，公牌;1 玩家手牌
	Cards []int32 `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` //手牌
}

func (x *SCDezhouPokerCard) Reset() {
	*x = SCDezhouPokerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerCard) ProtoMessage() {}

func (x *SCDezhouPokerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerCard.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerCard) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{13}
}

func (x *SCDezhouPokerCard) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SCDezhouPokerCard) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

type DezhouPokerCardsWP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId               int32   `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Cards              []int32 `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`
	WinningProbability int32   `protobuf:"varint,3,opt,name=WinningProbability,proto3" json:"WinningProbability,omitempty"`
}

func (x *DezhouPokerCardsWP) Reset() {
	*x = DezhouPokerCardsWP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DezhouPokerCardsWP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DezhouPokerCardsWP) ProtoMessage() {}

func (x *DezhouPokerCardsWP) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DezhouPokerCardsWP.ProtoReflect.Descriptor instead.
func (*DezhouPokerCardsWP) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{14}
}

func (x *DezhouPokerCardsWP) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DezhouPokerCardsWP) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DezhouPokerCardsWP) GetWinningProbability() int32 {
	if x != nil {
		return x.WinningProbability
	}
	return 0
}

//手牌胜率
//PACKET_CSC_DEZHOUPOKER_WPUPDATE
type CSCDezhouPokerWPUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DezhouPokerCardsWP `protobuf:"bytes,1,rep,name=Datas,proto3" json:"Datas,omitempty"`
}

func (x *CSCDezhouPokerWPUpdate) Reset() {
	*x = CSCDezhouPokerWPUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCDezhouPokerWPUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCDezhouPokerWPUpdate) ProtoMessage() {}

func (x *CSCDezhouPokerWPUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCDezhouPokerWPUpdate.ProtoReflect.Descriptor instead.
func (*CSCDezhouPokerWPUpdate) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{15}
}

func (x *CSCDezhouPokerWPUpdate) GetDatas() []*DezhouPokerCardsWP {
	if x != nil {
		return x.Datas
	}
	return nil
}

//玩家进入
//PACKET_SC_DEZHOUPOKER_PlayerEnter
type SCDezhouPokerPlayerEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DezhouPokerPlayerData `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"` //玩家数据
}

func (x *SCDezhouPokerPlayerEnter) Reset() {
	*x = SCDezhouPokerPlayerEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerEnter) ProtoMessage() {}

func (x *SCDezhouPokerPlayerEnter) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerEnter.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerEnter) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{16}
}

func (x *SCDezhouPokerPlayerEnter) GetData() *DezhouPokerPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

//玩家离开
//PACKET_SC_DEZHOUPOKER_PLAYERLEAVE
type SCDezhouPokerPlayerLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"` //玩家位置
}

func (x *SCDezhouPokerPlayerLeave) Reset() {
	*x = SCDezhouPokerPlayerLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerPlayerLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerPlayerLeave) ProtoMessage() {}

func (x *SCDezhouPokerPlayerLeave) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerPlayerLeave.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerPlayerLeave) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{17}
}

func (x *SCDezhouPokerPlayerLeave) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

//亮牌
type PlayerPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos   int32   `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`            //座位位置
	Cards []int32 `protobuf:"varint,2,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` //手牌
}

func (x *PlayerPoker) Reset() {
	*x = PlayerPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerPoker) ProtoMessage() {}

func (x *PlayerPoker) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerPoker.ProtoReflect.Descriptor instead.
func (*PlayerPoker) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerPoker) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *PlayerPoker) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

//PACKET_SC_DEZHOUPOKER_SHOWPOKER
type SCDezhouPokerShowPoker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerPoker []*PlayerPoker `protobuf:"bytes,1,rep,name=PlayerPoker,proto3" json:"PlayerPoker,omitempty"`
}

func (x *SCDezhouPokerShowPoker) Reset() {
	*x = SCDezhouPokerShowPoker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerShowPoker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerShowPoker) ProtoMessage() {}

func (x *SCDezhouPokerShowPoker) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerShowPoker.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerShowPoker) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{19}
}

func (x *SCDezhouPokerShowPoker) GetPlayerPoker() []*PlayerPoker {
	if x != nil {
		return x.PlayerPoker
	}
	return nil
}

//结算结果
type DezhouPokerPlayerGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos          int32   `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`                          //玩家位置
	KindOfCard   int32   `protobuf:"varint,2,opt,name=KindOfCard,proto3" json:"KindOfCard,omitempty"`            //牌型
	Cards        []int32 `protobuf:"varint,3,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`               // 5张牌
	WinCoin      int64   `protobuf:"varint,4,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`                  //输赢金额
	GameCoin     int64   `protobuf:"varint,5,opt,name=GameCoin,proto3" json:"GameCoin,omitempty"`                //结算后身上余额
	PotIndexList []int32 `protobuf:"varint,6,rep,packed,name=PotIndexList,proto3" json:"PotIndexList,omitempty"` //赢的池下标
	IsWin        int32   `protobuf:"varint,7,opt,name=IsWin,proto3" json:"IsWin,omitempty"`                      //输赢  赢1 输 2  平0
}

func (x *DezhouPokerPlayerGameBilled) Reset() {
	*x = DezhouPokerPlayerGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DezhouPokerPlayerGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DezhouPokerPlayerGameBilled) ProtoMessage() {}

func (x *DezhouPokerPlayerGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DezhouPokerPlayerGameBilled.ProtoReflect.Descriptor instead.
func (*DezhouPokerPlayerGameBilled) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{20}
}

func (x *DezhouPokerPlayerGameBilled) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DezhouPokerPlayerGameBilled) GetKindOfCard() int32 {
	if x != nil {
		return x.KindOfCard
	}
	return 0
}

func (x *DezhouPokerPlayerGameBilled) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DezhouPokerPlayerGameBilled) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

func (x *DezhouPokerPlayerGameBilled) GetGameCoin() int64 {
	if x != nil {
		return x.GameCoin
	}
	return 0
}

func (x *DezhouPokerPlayerGameBilled) GetPotIndexList() []int32 {
	if x != nil {
		return x.PotIndexList
	}
	return nil
}

func (x *DezhouPokerPlayerGameBilled) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

//PACKET_SC_DEZHOUPOKER_GAMEBILLED
type SCDezhouPokerGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DezhouPokerPlayerGameBilled `protobuf:"bytes,1,rep,name=Datas,proto3" json:"Datas,omitempty"` //参与分钱的玩家
}

func (x *SCDezhouPokerGameBilled) Reset() {
	*x = SCDezhouPokerGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerGameBilled) ProtoMessage() {}

func (x *SCDezhouPokerGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerGameBilled.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerGameBilled) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{21}
}

func (x *SCDezhouPokerGameBilled) GetDatas() []*DezhouPokerPlayerGameBilled {
	if x != nil {
		return x.Datas
	}
	return nil
}

//PACKET_SC_DEZHOUPOKER_GAMEBILLED_MIDDLE
type SCDezhouPokerGameBilledMiddle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos          int32   `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`                          //玩家位置
	WinCoin      int64   `protobuf:"varint,2,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`                  //输赢的金额
	GameCoin     int64   `protobuf:"varint,3,opt,name=GameCoin,proto3" json:"GameCoin,omitempty"`                //结算后身上余额
	PotIndexList []int32 `protobuf:"varint,4,rep,packed,name=PotIndexList,proto3" json:"PotIndexList,omitempty"` //赢的池下标
	IsWin        int32   `protobuf:"varint,5,opt,name=IsWin,proto3" json:"IsWin,omitempty"`                      //输赢  赢1 输 2  平0
}

func (x *SCDezhouPokerGameBilledMiddle) Reset() {
	*x = SCDezhouPokerGameBilledMiddle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerGameBilledMiddle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerGameBilledMiddle) ProtoMessage() {}

func (x *SCDezhouPokerGameBilledMiddle) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerGameBilledMiddle.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerGameBilledMiddle) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{22}
}

func (x *SCDezhouPokerGameBilledMiddle) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCDezhouPokerGameBilledMiddle) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

func (x *SCDezhouPokerGameBilledMiddle) GetGameCoin() int64 {
	if x != nil {
		return x.GameCoin
	}
	return 0
}

func (x *SCDezhouPokerGameBilledMiddle) GetPotIndexList() []int32 {
	if x != nil {
		return x.PotIndexList
	}
	return nil
}

func (x *SCDezhouPokerGameBilledMiddle) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

//每个池的结算结果
type DezhouPokerPlayerGameBilledPotItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerDatas []*DezhouPokerPlayerGameBilled `protobuf:"bytes,1,rep,name=PlayerDatas,proto3" json:"PlayerDatas,omitempty"` //该池的玩家信息
}

func (x *DezhouPokerPlayerGameBilledPotItem) Reset() {
	*x = DezhouPokerPlayerGameBilledPotItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DezhouPokerPlayerGameBilledPotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DezhouPokerPlayerGameBilledPotItem) ProtoMessage() {}

func (x *DezhouPokerPlayerGameBilledPotItem) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DezhouPokerPlayerGameBilledPotItem.ProtoReflect.Descriptor instead.
func (*DezhouPokerPlayerGameBilledPotItem) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{23}
}

func (x *DezhouPokerPlayerGameBilledPotItem) GetPlayerDatas() []*DezhouPokerPlayerGameBilled {
	if x != nil {
		return x.PlayerDatas
	}
	return nil
}

//发给客户端的根据池展现方式
type SCDezhouPokerGameBilledByPots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DezhouPokerPlayerGameBilledPotItem `protobuf:"bytes,1,rep,name=Datas,proto3" json:"Datas,omitempty"` //每个边池的数据
}

func (x *SCDezhouPokerGameBilledByPots) Reset() {
	*x = SCDezhouPokerGameBilledByPots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dezhoupoker_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDezhouPokerGameBilledByPots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDezhouPokerGameBilledByPots) ProtoMessage() {}

func (x *SCDezhouPokerGameBilledByPots) ProtoReflect() protoreflect.Message {
	mi := &file_dezhoupoker_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDezhouPokerGameBilledByPots.ProtoReflect.Descriptor instead.
func (*SCDezhouPokerGameBilledByPots) Descriptor() ([]byte, []int) {
	return file_dezhoupoker_proto_rawDescGZIP(), []int{24}
}

func (x *SCDezhouPokerGameBilledByPots) GetDatas() []*DezhouPokerPlayerGameBilledPotItem {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_dezhoupoker_proto protoreflect.FileDescriptor

var file_dezhoupoker_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x22, 0xc7, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x73, 0x74,
	0x4f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50,
	0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x05, 0x0a, 0x15, 0x53,
	0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x49, 0x64, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x4f, 0x70, 0x49, 0x64, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x4d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65,
	0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x4f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x43, 0x75, 0x72, 0x4f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x46, 0x0a, 0x16, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x53, 0x43, 0x44,
	0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x22, 0x27, 0x0a, 0x11, 0x53,
	0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04,
	0x50, 0x6f, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x53, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x94, 0x01, 0x0a, 0x15, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x12, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68,
	0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x75, 0x74, 0x6f, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x53,
	0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x67,
	0x0a, 0x1a, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x37,
	0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x53, 0x43, 0x44, 0x65,
	0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x69, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x98, 0x05,
	0x0a, 0x17, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6e,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x69, 0x6e,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x61,
	0x78, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x65,
	0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x65, 0x78,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4e, 0x65, 0x78,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x43, 0x75, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x53, 0x65, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x50, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x3f, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x48, 0x6f, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x48, 0x6f, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65,
	0x50, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x43, 0x44, 0x65,
	0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x12, 0x44, 0x65, 0x7a, 0x68, 0x6f,
	0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x57, 0x50, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x57, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x16, 0x43, 0x53, 0x43, 0x44, 0x65,
	0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x50, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x57,
	0x50, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x52, 0x0a, 0x18, 0x53, 0x43, 0x44, 0x65,
	0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x18,
	0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x54, 0x0a, 0x16, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x7a, 0x68,
	0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4b, 0x69, 0x6e,
	0x64, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4b,
	0x69, 0x6e, 0x64, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x22,
	0x59, 0x0a, 0x17, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x7a, 0x68,
	0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x53,
	0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x22, 0x70,
	0x0a, 0x22, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x7a, 0x68,
	0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x22, 0x66, 0x0a, 0x1d, 0x53, 0x43, 0x44, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x50, 0x6f, 0x74,
	0x73, 0x12, 0x45, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x64, 0x65, 0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x7a, 0x68, 0x6f, 0x75, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x2a, 0x2f, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0xfc, 0x05, 0x0a, 0x0c, 0x44, 0x5a,
	0x50, 0x4b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xdc, 0x29, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xdd, 0x29,
	0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x44, 0x45,
	0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x10, 0xde, 0x29, 0x12,
	0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a,
	0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x10, 0xdf, 0x29, 0x12, 0x25,
	0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48,
	0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0xe2, 0x29, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xe3, 0x29,
	0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45,
	0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xe4,
	0x29, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44,
	0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x41,
	0x4e, 0x44, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x50, 0x4f, 0x53, 0x10, 0xe5, 0x29, 0x12, 0x1f, 0x0a,
	0x1a, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f,
	0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x54, 0x53, 0x10, 0xe6, 0x29, 0x12, 0x22,
	0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48,
	0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0xe7, 0x29, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x55, 0x50, 0x10, 0xe8, 0x29, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xe9, 0x29, 0x12, 0x26, 0x0a, 0x21, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0xea, 0x29, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0xeb, 0x29, 0x12, 0x24, 0x0a, 0x1f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50,
	0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0xec,
	0x29, 0x12, 0x2c, 0x0a, 0x27, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44,
	0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0xed, 0x29, 0x12,
	0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a,
	0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x42, 0x55, 0x59,
	0x49, 0x4e, 0x10, 0xee, 0x29, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x42, 0x59, 0x50, 0x4f, 0x54, 0x53, 0x10,
	0xef, 0x29, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x43,
	0x5f, 0x44, 0x45, 0x5a, 0x48, 0x4f, 0x55, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x57, 0x50, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf0, 0x29, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b, 0x64, 0x65,
	0x7a, 0x68, 0x6f, 0x75, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dezhoupoker_proto_rawDescOnce sync.Once
	file_dezhoupoker_proto_rawDescData = file_dezhoupoker_proto_rawDesc
)

func file_dezhoupoker_proto_rawDescGZIP() []byte {
	file_dezhoupoker_proto_rawDescOnce.Do(func() {
		file_dezhoupoker_proto_rawDescData = protoimpl.X.CompressGZIP(file_dezhoupoker_proto_rawDescData)
	})
	return file_dezhoupoker_proto_rawDescData
}

var file_dezhoupoker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dezhoupoker_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_dezhoupoker_proto_goTypes = []interface{}{
	(OpResultCode)(0),                          // 0: dezhoupoker.OpResultCode
	(DZPKPacketID)(0),                          // 1: dezhoupoker.DZPKPacketID
	(*DezhouPokerPlayerData)(nil),              // 2: dezhoupoker.DezhouPokerPlayerData
	(*SCDezhouPokerRoomInfo)(nil),              // 3: dezhoupoker.SCDezhouPokerRoomInfo
	(*SCDezhouPokerRoomState)(nil),             // 4: dezhoupoker.SCDezhouPokerRoomState
	(*SCDezhouPokerBankerAndBlindPos)(nil),     // 5: dezhoupoker.SCDezhouPokerBankerAndBlindPos
	(*SCDezhouPokerPots)(nil),                  // 6: dezhoupoker.SCDezhouPokerPots
	(*CSDezhouPokerPlayerOp)(nil),              // 7: dezhoupoker.CSDezhouPokerPlayerOp
	(*SCDezhouPokerPlayerOp)(nil),              // 8: dezhoupoker.SCDezhouPokerPlayerOp
	(*SCDezhouPokerBuyIn)(nil),                 // 9: dezhoupoker.SCDezhouPokerBuyIn
	(*SCDezhouPokerPlayerGameCoin)(nil),        // 10: dezhoupoker.SCDezhouPokerPlayerGameCoin
	(*SCDezhouPokerPlayerStandUp)(nil),         // 11: dezhoupoker.SCDezhouPokerPlayerStandUp
	(*SCDezhouPokerPlayerSit)(nil),             // 12: dezhoupoker.SCDezhouPokerPlayerSit
	(*DezhouPokerCards)(nil),                   // 13: dezhoupoker.DezhouPokerCards
	(*SCDezhouPokerOperNotify)(nil),            // 14: dezhoupoker.SCDezhouPokerOperNotify
	(*SCDezhouPokerCard)(nil),                  // 15: dezhoupoker.SCDezhouPokerCard
	(*DezhouPokerCardsWP)(nil),                 // 16: dezhoupoker.DezhouPokerCardsWP
	(*CSCDezhouPokerWPUpdate)(nil),             // 17: dezhoupoker.CSCDezhouPokerWPUpdate
	(*SCDezhouPokerPlayerEnter)(nil),           // 18: dezhoupoker.SCDezhouPokerPlayerEnter
	(*SCDezhouPokerPlayerLeave)(nil),           // 19: dezhoupoker.SCDezhouPokerPlayerLeave
	(*PlayerPoker)(nil),                        // 20: dezhoupoker.PlayerPoker
	(*SCDezhouPokerShowPoker)(nil),             // 21: dezhoupoker.SCDezhouPokerShowPoker
	(*DezhouPokerPlayerGameBilled)(nil),        // 22: dezhoupoker.DezhouPokerPlayerGameBilled
	(*SCDezhouPokerGameBilled)(nil),            // 23: dezhoupoker.SCDezhouPokerGameBilled
	(*SCDezhouPokerGameBilledMiddle)(nil),      // 24: dezhoupoker.SCDezhouPokerGameBilledMiddle
	(*DezhouPokerPlayerGameBilledPotItem)(nil), // 25: dezhoupoker.DezhouPokerPlayerGameBilledPotItem
	(*SCDezhouPokerGameBilledByPots)(nil),      // 26: dezhoupoker.SCDezhouPokerGameBilledByPots
}
var file_dezhoupoker_proto_depIdxs = []int32{
	2,  // 0: dezhoupoker.SCDezhouPokerRoomInfo.Players:type_name -> dezhoupoker.DezhouPokerPlayerData
	0,  // 1: dezhoupoker.SCDezhouPokerPlayerOp.OpRetCode:type_name -> dezhoupoker.OpResultCode
	0,  // 2: dezhoupoker.SCDezhouPokerPlayerStandUp.OpRetCode:type_name -> dezhoupoker.OpResultCode
	2,  // 3: dezhoupoker.SCDezhouPokerPlayerSit.Data:type_name -> dezhoupoker.DezhouPokerPlayerData
	0,  // 4: dezhoupoker.SCDezhouPokerPlayerSit.OpRetCode:type_name -> dezhoupoker.OpResultCode
	13, // 5: dezhoupoker.SCDezhouPokerOperNotify.PlayersHole:type_name -> dezhoupoker.DezhouPokerCards
	16, // 6: dezhoupoker.CSCDezhouPokerWPUpdate.Datas:type_name -> dezhoupoker.DezhouPokerCardsWP
	2,  // 7: dezhoupoker.SCDezhouPokerPlayerEnter.Data:type_name -> dezhoupoker.DezhouPokerPlayerData
	20, // 8: dezhoupoker.SCDezhouPokerShowPoker.PlayerPoker:type_name -> dezhoupoker.PlayerPoker
	22, // 9: dezhoupoker.SCDezhouPokerGameBilled.Datas:type_name -> dezhoupoker.DezhouPokerPlayerGameBilled
	22, // 10: dezhoupoker.DezhouPokerPlayerGameBilledPotItem.PlayerDatas:type_name -> dezhoupoker.DezhouPokerPlayerGameBilled
	25, // 11: dezhoupoker.SCDezhouPokerGameBilledByPots.Datas:type_name -> dezhoupoker.DezhouPokerPlayerGameBilledPotItem
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dezhoupoker_proto_init() }
func file_dezhoupoker_proto_init() {
	if File_dezhoupoker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dezhoupoker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DezhouPokerPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerBankerAndBlindPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSDezhouPokerPlayerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerBuyIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerGameCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerStandUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerSit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DezhouPokerCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerOperNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DezhouPokerCardsWP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCDezhouPokerWPUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerPlayerLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerShowPoker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DezhouPokerPlayerGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerGameBilledMiddle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DezhouPokerPlayerGameBilledPotItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dezhoupoker_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDezhouPokerGameBilledByPots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dezhoupoker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dezhoupoker_proto_goTypes,
		DependencyIndexes: file_dezhoupoker_proto_depIdxs,
		EnumInfos:         file_dezhoupoker_proto_enumTypes,
		MessageInfos:      file_dezhoupoker_proto_msgTypes,
	}.Build()
	File_dezhoupoker_proto = out.File
	file_dezhoupoker_proto_rawDesc = nil
	file_dezhoupoker_proto_goTypes = nil
	file_dezhoupoker_proto_depIdxs = nil
}
