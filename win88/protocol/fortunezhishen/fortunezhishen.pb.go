// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: fortunezhishen.proto

package fortunezhishen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//FortuneZhiShen
//财运之神
type FortuneZSPacketID int32

const (
	FortuneZSPacketID_PACKET_FORTUNEZHISHEN_ZERO         FortuneZSPacketID = 0    // 弃用消息号
	FortuneZSPacketID_PACKET_SC_FORTUNEZHISHEN_ROOMINFO  FortuneZSPacketID = 5160 //房间信息
	FortuneZSPacketID_PACKET_CS_FORTUNEZHISHEN_PLAYEROP  FortuneZSPacketID = 5161 //玩家操作（客户-》服务）
	FortuneZSPacketID_PACKET_SC_FORTUNEZHISHEN_PLAYEROP  FortuneZSPacketID = 5162 //玩家操作（服务-》客户）
	FortuneZSPacketID_PACKET_SC_FORTUNEZHISHEN_ROOMSTATE FortuneZSPacketID = 5163 //房间状态
	FortuneZSPacketID_PACKET_SC_FORTUNEZHISHEN_PRIZE     FortuneZSPacketID = 5164 //游戏奖池
	FortuneZSPacketID_PACKET_SC_FORTUNEZHISHEN_BILLED    FortuneZSPacketID = 5165 //游戏结算
)

// Enum value maps for FortuneZSPacketID.
var (
	FortuneZSPacketID_name = map[int32]string{
		0:    "PACKET_FORTUNEZHISHEN_ZERO",
		5160: "PACKET_SC_FORTUNEZHISHEN_ROOMINFO",
		5161: "PACKET_CS_FORTUNEZHISHEN_PLAYEROP",
		5162: "PACKET_SC_FORTUNEZHISHEN_PLAYEROP",
		5163: "PACKET_SC_FORTUNEZHISHEN_ROOMSTATE",
		5164: "PACKET_SC_FORTUNEZHISHEN_PRIZE",
		5165: "PACKET_SC_FORTUNEZHISHEN_BILLED",
	}
	FortuneZSPacketID_value = map[string]int32{
		"PACKET_FORTUNEZHISHEN_ZERO":         0,
		"PACKET_SC_FORTUNEZHISHEN_ROOMINFO":  5160,
		"PACKET_CS_FORTUNEZHISHEN_PLAYEROP":  5161,
		"PACKET_SC_FORTUNEZHISHEN_PLAYEROP":  5162,
		"PACKET_SC_FORTUNEZHISHEN_ROOMSTATE": 5163,
		"PACKET_SC_FORTUNEZHISHEN_PRIZE":     5164,
		"PACKET_SC_FORTUNEZHISHEN_BILLED":    5165,
	}
)

func (x FortuneZSPacketID) Enum() *FortuneZSPacketID {
	p := new(FortuneZSPacketID)
	*p = x
	return p
}

func (x FortuneZSPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FortuneZSPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_fortunezhishen_proto_enumTypes[0].Descriptor()
}

func (FortuneZSPacketID) Type() protoreflect.EnumType {
	return &file_fortunezhishen_proto_enumTypes[0]
}

func (x FortuneZSPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FortuneZSPacketID.Descriptor instead.
func (FortuneZSPacketID) EnumDescriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{0}
}

type FortuneZhiShenPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	HeadOutLine int32    `protobuf:"varint,10,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,11,opt,name=VIP,proto3" json:"VIP,omitempty"`
}

func (x *FortuneZhiShenPlayerData) Reset() {
	*x = FortuneZhiShenPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FortuneZhiShenPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FortuneZhiShenPlayerData) ProtoMessage() {}

func (x *FortuneZhiShenPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FortuneZhiShenPlayerData.ProtoReflect.Descriptor instead.
func (*FortuneZhiShenPlayerData) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{0}
}

func (x *FortuneZhiShenPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FortuneZhiShenPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FortuneZhiShenPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *FortuneZhiShenPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *FortuneZhiShenPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

//房间信息
//PACKET_SC_FORTUNEZHISHEN_ROOMINFO
type SCFortuneZhiShenRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId           int32                       `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                             //房间id
	Creator          int32                       `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                           //创建者SnId
	GameId           int32                       `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                             //游戏id
	RoomMode         int32                       `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                         //游戏模式
	Params           []int32                     `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`                      //规则参数
	NumOfGames       int32                       `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`                     //当前第几局
	State            int32                       `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`                               //房间当前状态
	DisbandGen       int32                       `protobuf:"varint,8,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`                     //解散申请
	AgentId          int32                       `protobuf:"varint,9,opt,name=AgentId,proto3" json:"AgentId,omitempty"`                           //代开房者
	ParamsEx         []int32                     `protobuf:"varint,10,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`                 //其他参数
	SceneType        int32                       `protobuf:"varint,11,opt,name=SceneType,proto3" json:"SceneType,omitempty"`                      //房间模式 0:房卡模式 1:钻石模式
	Players          []*FortuneZhiShenPlayerData `protobuf:"bytes,12,rep,name=Players,proto3" json:"Players,omitempty"`                           //房间内的玩家信息
	TotalChipIdx     int32                       `protobuf:"varint,13,opt,name=TotalChipIdx,proto3" json:"TotalChipIdx,omitempty"`                //投注索引
	FirstFreeTimes   int32                       `protobuf:"varint,14,opt,name=FirstFreeTimes,proto3" json:"FirstFreeTimes,omitempty"`            //第一个小游戏剩余免费次数
	SecondFreeTimes  int32                       `protobuf:"varint,15,opt,name=SecondFreeTimes,proto3" json:"SecondFreeTimes,omitempty"`          //第二个小游戏剩余免费次数
	UiShow           []int32                     `protobuf:"varint,16,rep,packed,name=UiShow,proto3" json:"UiShow,omitempty"`                     //界面展示 横向有序展示
	GemstoneRateCoin []int64                     `protobuf:"varint,17,rep,packed,name=GemstoneRateCoin,proto3" json:"GemstoneRateCoin,omitempty"` //宝石上边显示的数据 按顺序展示
	NowGameState     int32                       `protobuf:"varint,18,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`                //0.普通模式 1.免费模式 2.旋转并停留模式0 3.旋转并停留模式1
	BetLimit         int32                       `protobuf:"varint,19,opt,name=BetLimit,proto3" json:"BetLimit,omitempty"`                        //押注限制(低于该值不能押注)
	WinCoin          int64                       `protobuf:"varint,20,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`                          //普通
	FirstWinCoin     int64                       `protobuf:"varint,21,opt,name=FirstWinCoin,proto3" json:"FirstWinCoin,omitempty"`                //免费
	SecondWinCOin    int64                       `protobuf:"varint,22,opt,name=SecondWinCOin,proto3" json:"SecondWinCOin,omitempty"`              //旋转
	GameFreeId       int32                       `protobuf:"varint,23,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
}

func (x *SCFortuneZhiShenRoomInfo) Reset() {
	*x = SCFortuneZhiShenRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFortuneZhiShenRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFortuneZhiShenRoomInfo) ProtoMessage() {}

func (x *SCFortuneZhiShenRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFortuneZhiShenRoomInfo.ProtoReflect.Descriptor instead.
func (*SCFortuneZhiShenRoomInfo) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{1}
}

func (x *SCFortuneZhiShenRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCFortuneZhiShenRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCFortuneZhiShenRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetPlayers() []*FortuneZhiShenPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCFortuneZhiShenRoomInfo) GetTotalChipIdx() int32 {
	if x != nil {
		return x.TotalChipIdx
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetFirstFreeTimes() int32 {
	if x != nil {
		return x.FirstFreeTimes
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetSecondFreeTimes() int32 {
	if x != nil {
		return x.SecondFreeTimes
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetUiShow() []int32 {
	if x != nil {
		return x.UiShow
	}
	return nil
}

func (x *SCFortuneZhiShenRoomInfo) GetGemstoneRateCoin() []int64 {
	if x != nil {
		return x.GemstoneRateCoin
	}
	return nil
}

func (x *SCFortuneZhiShenRoomInfo) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetBetLimit() int32 {
	if x != nil {
		return x.BetLimit
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetFirstWinCoin() int64 {
	if x != nil {
		return x.FirstWinCoin
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetSecondWinCOin() int64 {
	if x != nil {
		return x.SecondWinCOin
	}
	return 0
}

func (x *SCFortuneZhiShenRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//玩家操作
//PACKET_CS_FORTUNEZHISHEN_PLAYEROP
type CSFortuneZhiShenOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0.旋转 1.切换
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数 下注索引编号
}

func (x *CSFortuneZhiShenOp) Reset() {
	*x = CSFortuneZhiShenOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFortuneZhiShenOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFortuneZhiShenOp) ProtoMessage() {}

func (x *CSFortuneZhiShenOp) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFortuneZhiShenOp.ProtoReflect.Descriptor instead.
func (*CSFortuneZhiShenOp) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{2}
}

func (x *CSFortuneZhiShenOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSFortuneZhiShenOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
//PACKET_SC_FORTUNEZHISHEN_PLAYEROP
type SCFortuneZhiShenOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode    int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	OpRetCode int32   `protobuf:"varint,2,opt,name=OpRetCode,proto3" json:"OpRetCode,omitempty"`  //操作结果 1.金币不足 2.低于该值不能押注
	Params    []int64 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *SCFortuneZhiShenOp) Reset() {
	*x = SCFortuneZhiShenOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFortuneZhiShenOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFortuneZhiShenOp) ProtoMessage() {}

func (x *SCFortuneZhiShenOp) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFortuneZhiShenOp.ProtoReflect.Descriptor instead.
func (*SCFortuneZhiShenOp) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{3}
}

func (x *SCFortuneZhiShenOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCFortuneZhiShenOp) GetOpRetCode() int32 {
	if x != nil {
		return x.OpRetCode
	}
	return 0
}

func (x *SCFortuneZhiShenOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间状态
//PACKET_SC_FORTUNEZHISHEN_ROOMSTATE
type SCFortuneZhiShenRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCFortuneZhiShenRoomState) Reset() {
	*x = SCFortuneZhiShenRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFortuneZhiShenRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFortuneZhiShenRoomState) ProtoMessage() {}

func (x *SCFortuneZhiShenRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFortuneZhiShenRoomState.ProtoReflect.Descriptor instead.
func (*SCFortuneZhiShenRoomState) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{4}
}

func (x *SCFortuneZhiShenRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCFortuneZhiShenRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCFortuneZhiShenRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//PACKET_SC_FORTUNEZHISHEN_PRIZE
type SCFortuneZhiShenPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrandPrize []int64 `protobuf:"varint,1,rep,packed,name=GrandPrize,proto3" json:"GrandPrize,omitempty"` //巨奖
	BigPrize   []int64 `protobuf:"varint,2,rep,packed,name=BigPrize,proto3" json:"BigPrize,omitempty"`     //大奖
	MidPrize   []int64 `protobuf:"varint,3,rep,packed,name=MidPrize,proto3" json:"MidPrize,omitempty"`     //中奖
	SmallPrize []int64 `protobuf:"varint,4,rep,packed,name=SmallPrize,proto3" json:"SmallPrize,omitempty"` //小奖
}

func (x *SCFortuneZhiShenPrize) Reset() {
	*x = SCFortuneZhiShenPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFortuneZhiShenPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFortuneZhiShenPrize) ProtoMessage() {}

func (x *SCFortuneZhiShenPrize) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFortuneZhiShenPrize.ProtoReflect.Descriptor instead.
func (*SCFortuneZhiShenPrize) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{5}
}

func (x *SCFortuneZhiShenPrize) GetGrandPrize() []int64 {
	if x != nil {
		return x.GrandPrize
	}
	return nil
}

func (x *SCFortuneZhiShenPrize) GetBigPrize() []int64 {
	if x != nil {
		return x.BigPrize
	}
	return nil
}

func (x *SCFortuneZhiShenPrize) GetMidPrize() []int64 {
	if x != nil {
		return x.MidPrize
	}
	return nil
}

func (x *SCFortuneZhiShenPrize) GetSmallPrize() []int64 {
	if x != nil {
		return x.SmallPrize
	}
	return nil
}

type FortuneZhiShenWinLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poss     []int32 `protobuf:"varint,1,rep,packed,name=Poss,proto3" json:"Poss,omitempty"`  //中奖 元素组(0-14)
	WinScore int64   `protobuf:"varint,2,opt,name=WinScore,proto3" json:"WinScore,omitempty"` //单线分数
}

func (x *FortuneZhiShenWinLine) Reset() {
	*x = FortuneZhiShenWinLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FortuneZhiShenWinLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FortuneZhiShenWinLine) ProtoMessage() {}

func (x *FortuneZhiShenWinLine) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FortuneZhiShenWinLine.ProtoReflect.Descriptor instead.
func (*FortuneZhiShenWinLine) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{6}
}

func (x *FortuneZhiShenWinLine) GetPoss() []int32 {
	if x != nil {
		return x.Poss
	}
	return nil
}

func (x *FortuneZhiShenWinLine) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

//PACKET_SC_FORTUNEZHISHEN_BILLED
type SCFortuneZhiShenBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin             int64                    `protobuf:"varint,1,opt,name=Coin,proto3" json:"Coin,omitempty"`                                //当前金额
	WinCoin          int64                    `protobuf:"varint,2,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`                          //普通
	FirstWinCoin     int64                    `protobuf:"varint,3,opt,name=FirstWinCoin,proto3" json:"FirstWinCoin,omitempty"`                //免费
	SecondWinCOin    int64                    `protobuf:"varint,4,opt,name=SecondWinCOin,proto3" json:"SecondWinCOin,omitempty"`              //旋转
	UiShow           []int32                  `protobuf:"varint,5,rep,packed,name=UiShow,proto3" json:"UiShow,omitempty"`                     //界面展示 横向有序展示
	WinLines         []*FortuneZhiShenWinLine `protobuf:"bytes,6,rep,name=WinLines,proto3" json:"WinLines,omitempty"`                         //中奖线数
	FirstFreeTimes   int32                    `protobuf:"varint,7,opt,name=FirstFreeTimes,proto3" json:"FirstFreeTimes,omitempty"`            //第一个小游戏剩余免费次数
	SecondFreeTimes  int32                    `protobuf:"varint,8,opt,name=SecondFreeTimes,proto3" json:"SecondFreeTimes,omitempty"`          //第二个小游戏剩余免费次数
	GemstoneRateCoin []int64                  `protobuf:"varint,9,rep,packed,name=GemstoneRateCoin,proto3" json:"GemstoneRateCoin,omitempty"` //宝石上边显示的数据 按顺序展示
	NowGameState     int32                    `protobuf:"varint,10,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`               //0.普通模式 1.免费模式 2.旋转并停留模式0 3.旋转并停留模式1
	WinRate          int64                    `protobuf:"varint,11,opt,name=WinRate,proto3" json:"WinRate,omitempty"`                         //中奖倍率
	HitPrize         []int64                  `protobuf:"varint,12,rep,packed,name=HitPrize,proto3" json:"HitPrize,omitempty"`                //小 中 大 巨 额外奖励  0 1 2 3 4
}

func (x *SCFortuneZhiShenBilled) Reset() {
	*x = SCFortuneZhiShenBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fortunezhishen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFortuneZhiShenBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFortuneZhiShenBilled) ProtoMessage() {}

func (x *SCFortuneZhiShenBilled) ProtoReflect() protoreflect.Message {
	mi := &file_fortunezhishen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFortuneZhiShenBilled.ProtoReflect.Descriptor instead.
func (*SCFortuneZhiShenBilled) Descriptor() ([]byte, []int) {
	return file_fortunezhishen_proto_rawDescGZIP(), []int{7}
}

func (x *SCFortuneZhiShenBilled) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetFirstWinCoin() int64 {
	if x != nil {
		return x.FirstWinCoin
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetSecondWinCOin() int64 {
	if x != nil {
		return x.SecondWinCOin
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetUiShow() []int32 {
	if x != nil {
		return x.UiShow
	}
	return nil
}

func (x *SCFortuneZhiShenBilled) GetWinLines() []*FortuneZhiShenWinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *SCFortuneZhiShenBilled) GetFirstFreeTimes() int32 {
	if x != nil {
		return x.FirstFreeTimes
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetSecondFreeTimes() int32 {
	if x != nil {
		return x.SecondFreeTimes
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetGemstoneRateCoin() []int64 {
	if x != nil {
		return x.GemstoneRateCoin
	}
	return nil
}

func (x *SCFortuneZhiShenBilled) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *SCFortuneZhiShenBilled) GetHitPrize() []int64 {
	if x != nil {
		return x.HitPrize
	}
	return nil
}

var File_fortunezhishen_proto protoreflect.FileDescriptor

var file_fortunezhishen_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x7a,
	0x68, 0x69, 0x73, 0x68, 0x65, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f,
	0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x22, 0x84, 0x06, 0x0a, 0x18,
	0x53, 0x43, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f,
	0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68,
	0x65, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69,
	0x70, 0x49, 0x64, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69,
	0x53, 0x68, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x55, 0x69, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x6d, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x47, 0x65,
	0x6d, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x4f, 0x69, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x4f,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x53, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a,
	0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x12, 0x53, 0x43, 0x46, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x4f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x65, 0x0a, 0x19,
	0x53, 0x43, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x43, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x69, 0x67, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x42, 0x69, 0x67, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc3,
	0x03, 0x0a, 0x16, 0x53, 0x43, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53,
	0x68, 0x65, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x4f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x43, 0x4f, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x55, 0x69, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x08, 0x57, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68, 0x65, 0x6e, 0x2e, 0x46, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x5a, 0x68, 0x69, 0x53, 0x68, 0x65, 0x6e, 0x57, 0x69, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x65, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x47, 0x65, 0x6d, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x47, 0x65, 0x6d, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f,
	0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x48, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x2a, 0x9f, 0x02, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x5a, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a, 0x48, 0x49, 0x53,
	0x48, 0x45, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a,
	0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0xa8, 0x28, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a, 0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xa9, 0x28, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a,
	0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10,
	0xaa, 0x28, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a, 0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xab, 0x28, 0x12, 0x23, 0x0a, 0x1e, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x46, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x45,
	0x5a, 0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x5a, 0x45, 0x10, 0xac, 0x28,
	0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x46, 0x4f,
	0x52, 0x54, 0x55, 0x4e, 0x45, 0x5a, 0x48, 0x49, 0x53, 0x48, 0x45, 0x4e, 0x5f, 0x42, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0xad, 0x28, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x3b, 0x66, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x7a, 0x68, 0x69, 0x73, 0x68, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_fortunezhishen_proto_rawDescOnce sync.Once
	file_fortunezhishen_proto_rawDescData = file_fortunezhishen_proto_rawDesc
)

func file_fortunezhishen_proto_rawDescGZIP() []byte {
	file_fortunezhishen_proto_rawDescOnce.Do(func() {
		file_fortunezhishen_proto_rawDescData = protoimpl.X.CompressGZIP(file_fortunezhishen_proto_rawDescData)
	})
	return file_fortunezhishen_proto_rawDescData
}

var file_fortunezhishen_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fortunezhishen_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fortunezhishen_proto_goTypes = []interface{}{
	(FortuneZSPacketID)(0),            // 0: fortunezhishen.FortuneZSPacketID
	(*FortuneZhiShenPlayerData)(nil),  // 1: fortunezhishen.FortuneZhiShenPlayerData
	(*SCFortuneZhiShenRoomInfo)(nil),  // 2: fortunezhishen.SCFortuneZhiShenRoomInfo
	(*CSFortuneZhiShenOp)(nil),        // 3: fortunezhishen.CSFortuneZhiShenOp
	(*SCFortuneZhiShenOp)(nil),        // 4: fortunezhishen.SCFortuneZhiShenOp
	(*SCFortuneZhiShenRoomState)(nil), // 5: fortunezhishen.SCFortuneZhiShenRoomState
	(*SCFortuneZhiShenPrize)(nil),     // 6: fortunezhishen.SCFortuneZhiShenPrize
	(*FortuneZhiShenWinLine)(nil),     // 7: fortunezhishen.FortuneZhiShenWinLine
	(*SCFortuneZhiShenBilled)(nil),    // 8: fortunezhishen.SCFortuneZhiShenBilled
}
var file_fortunezhishen_proto_depIdxs = []int32{
	1, // 0: fortunezhishen.SCFortuneZhiShenRoomInfo.Players:type_name -> fortunezhishen.FortuneZhiShenPlayerData
	7, // 1: fortunezhishen.SCFortuneZhiShenBilled.WinLines:type_name -> fortunezhishen.FortuneZhiShenWinLine
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_fortunezhishen_proto_init() }
func file_fortunezhishen_proto_init() {
	if File_fortunezhishen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fortunezhishen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FortuneZhiShenPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFortuneZhiShenRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFortuneZhiShenOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFortuneZhiShenOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFortuneZhiShenRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFortuneZhiShenPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FortuneZhiShenWinLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fortunezhishen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFortuneZhiShenBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fortunezhishen_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fortunezhishen_proto_goTypes,
		DependencyIndexes: file_fortunezhishen_proto_depIdxs,
		EnumInfos:         file_fortunezhishen_proto_enumTypes,
		MessageInfos:      file_fortunezhishen_proto_msgTypes,
	}.Build()
	File_fortunezhishen_proto = out.File
	file_fortunezhishen_proto_rawDesc = nil
	file_fortunezhishen_proto_goTypes = nil
	file_fortunezhishen_proto_depIdxs = nil
}
