// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: friend.proto

package friend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess                       OpResultCode = 0    //成功
	OpResultCode_OPRC_Error                        OpResultCode = 1    //失败
	OpResultCode_OPRC_Friend_NoPlayer              OpResultCode = 1001 //好友不存在
	OpResultCode_OPRC_Friend_AlreadyAdd            OpResultCode = 1002 //已经是好友
	OpResultCode_OPRC_Friend_AlreadyApply          OpResultCode = 1003 //已经申请过添加好友
	OpResultCode_OPRC_Friend_FriendMax             OpResultCode = 1004 //好友已满员
	OpResultCode_OPRC_Friend_DestFriendMax         OpResultCode = 1005 //对方好友已满员
	OpResultCode_OPRC_Friend_DestApplyFriendMax    OpResultCode = 1006 //对方好友申请已达上限
	OpResultCode_OPRC_InviteFriend_NoOnline        OpResultCode = 1007 //好友不在线
	OpResultCode_OPRC_InviteFriend_NotFriend       OpResultCode = 1008 //不是好友
	OpResultCode_OPRC_InviteFriend_SceneNotExist   OpResultCode = 1009 //场景不存在
	OpResultCode_OPRC_InviteFriend_RoomLimit       OpResultCode = 1010 //只能进入私有房间
	OpResultCode_OPRC_InviteFriend_RoomNotExist    OpResultCode = 1011 //房间不存在
	OpResultCode_OPRC_InviteFriend_SceneDeleting   OpResultCode = 1012 //场景正在删除
	OpResultCode_OPRC_InviteFriend_SceneClosed     OpResultCode = 1013 //场景已关闭
	OpResultCode_OPRC_InviteFriend_CoinLimit       OpResultCode = 1014 //金币不足
	OpResultCode_OPRC_InviteFriend_GameNotExist    OpResultCode = 1015 //游戏不存在
	OpResultCode_OPRC_InviteFriend_GameNotCanEnter OpResultCode = 1016 //游戏已开始
	OpResultCode_OPRC_InviteFriend_RoomFull        OpResultCode = 1017 //房间已满员
	OpResultCode_OPRC_InviteFriend_Gaming          OpResultCode = 1018 //好友已在游戏中
	OpResultCode_OPRC_InviteFriend_PosIsError      OpResultCode = 1019 //座位不存在
	OpResultCode_OPRC_InviteFriend_HadInRoom       OpResultCode = 1020 //已在房间中
	OpResultCode_OPRC_Friend_NotOpMyself           OpResultCode = 1021 //不能操作自己
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		1001: "OPRC_Friend_NoPlayer",
		1002: "OPRC_Friend_AlreadyAdd",
		1003: "OPRC_Friend_AlreadyApply",
		1004: "OPRC_Friend_FriendMax",
		1005: "OPRC_Friend_DestFriendMax",
		1006: "OPRC_Friend_DestApplyFriendMax",
		1007: "OPRC_InviteFriend_NoOnline",
		1008: "OPRC_InviteFriend_NotFriend",
		1009: "OPRC_InviteFriend_SceneNotExist",
		1010: "OPRC_InviteFriend_RoomLimit",
		1011: "OPRC_InviteFriend_RoomNotExist",
		1012: "OPRC_InviteFriend_SceneDeleting",
		1013: "OPRC_InviteFriend_SceneClosed",
		1014: "OPRC_InviteFriend_CoinLimit",
		1015: "OPRC_InviteFriend_GameNotExist",
		1016: "OPRC_InviteFriend_GameNotCanEnter",
		1017: "OPRC_InviteFriend_RoomFull",
		1018: "OPRC_InviteFriend_Gaming",
		1019: "OPRC_InviteFriend_PosIsError",
		1020: "OPRC_InviteFriend_HadInRoom",
		1021: "OPRC_Friend_NotOpMyself",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":                       0,
		"OPRC_Error":                        1,
		"OPRC_Friend_NoPlayer":              1001,
		"OPRC_Friend_AlreadyAdd":            1002,
		"OPRC_Friend_AlreadyApply":          1003,
		"OPRC_Friend_FriendMax":             1004,
		"OPRC_Friend_DestFriendMax":         1005,
		"OPRC_Friend_DestApplyFriendMax":    1006,
		"OPRC_InviteFriend_NoOnline":        1007,
		"OPRC_InviteFriend_NotFriend":       1008,
		"OPRC_InviteFriend_SceneNotExist":   1009,
		"OPRC_InviteFriend_RoomLimit":       1010,
		"OPRC_InviteFriend_RoomNotExist":    1011,
		"OPRC_InviteFriend_SceneDeleting":   1012,
		"OPRC_InviteFriend_SceneClosed":     1013,
		"OPRC_InviteFriend_CoinLimit":       1014,
		"OPRC_InviteFriend_GameNotExist":    1015,
		"OPRC_InviteFriend_GameNotCanEnter": 1016,
		"OPRC_InviteFriend_RoomFull":        1017,
		"OPRC_InviteFriend_Gaming":          1018,
		"OPRC_InviteFriend_PosIsError":      1019,
		"OPRC_InviteFriend_HadInRoom":       1020,
		"OPRC_Friend_NotOpMyself":           1021,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_friend_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{0}
}

//好友数据消息id
type FriendPacketID int32

const (
	FriendPacketID_PACKET_FriendPACKET_ZERO    FriendPacketID = 0    // 弃用消息号
	FriendPacketID_PACKET_CSFriendList         FriendPacketID = 2700 //0.好友列表 1.申请列表 2.推荐列表
	FriendPacketID_PACKET_SCFriendList         FriendPacketID = 2701
	FriendPacketID_PACKET_CSFriendOp           FriendPacketID = 2702 //0.申请 1.同意 2.拒绝 3.删除
	FriendPacketID_PACKET_SCFriendOp           FriendPacketID = 2703
	FriendPacketID_PACKET_CSQueryPlayerGameLog FriendPacketID = 2704 //战绩
	FriendPacketID_PACKET_SCQueryPlayerGameLog FriendPacketID = 2705
	FriendPacketID_PACKET_CSInviteFriend       FriendPacketID = 2706 //邀请游戏
	FriendPacketID_PACKET_SCInviteFriend       FriendPacketID = 2707
	FriendPacketID_PACKET_CSInviteFriendOp     FriendPacketID = 2708 //同意、拒绝邀请
	FriendPacketID_PACKET_SCInviteFriendOp     FriendPacketID = 2709
	FriendPacketID_PACKET_SCFriendApplyData    FriendPacketID = 2710 // 好友申请数据
	FriendPacketID_PACKET_SCFriendUnreadData   FriendPacketID = 2711 // 未读消息数据
	FriendPacketID_PACKET_CSFuzzyQueryPlayer   FriendPacketID = 2712 //根据id或者昵称查询玩家
	FriendPacketID_PACKET_SCFuzzyQueryPlayer   FriendPacketID = 2713
)

// Enum value maps for FriendPacketID.
var (
	FriendPacketID_name = map[int32]string{
		0:    "PACKET_FriendPACKET_ZERO",
		2700: "PACKET_CSFriendList",
		2701: "PACKET_SCFriendList",
		2702: "PACKET_CSFriendOp",
		2703: "PACKET_SCFriendOp",
		2704: "PACKET_CSQueryPlayerGameLog",
		2705: "PACKET_SCQueryPlayerGameLog",
		2706: "PACKET_CSInviteFriend",
		2707: "PACKET_SCInviteFriend",
		2708: "PACKET_CSInviteFriendOp",
		2709: "PACKET_SCInviteFriendOp",
		2710: "PACKET_SCFriendApplyData",
		2711: "PACKET_SCFriendUnreadData",
		2712: "PACKET_CSFuzzyQueryPlayer",
		2713: "PACKET_SCFuzzyQueryPlayer",
	}
	FriendPacketID_value = map[string]int32{
		"PACKET_FriendPACKET_ZERO":    0,
		"PACKET_CSFriendList":         2700,
		"PACKET_SCFriendList":         2701,
		"PACKET_CSFriendOp":           2702,
		"PACKET_SCFriendOp":           2703,
		"PACKET_CSQueryPlayerGameLog": 2704,
		"PACKET_SCQueryPlayerGameLog": 2705,
		"PACKET_CSInviteFriend":       2706,
		"PACKET_SCInviteFriend":       2707,
		"PACKET_CSInviteFriendOp":     2708,
		"PACKET_SCInviteFriendOp":     2709,
		"PACKET_SCFriendApplyData":    2710,
		"PACKET_SCFriendUnreadData":   2711,
		"PACKET_CSFuzzyQueryPlayer":   2712,
		"PACKET_SCFuzzyQueryPlayer":   2713,
	}
)

func (x FriendPacketID) Enum() *FriendPacketID {
	p := new(FriendPacketID)
	*p = x
	return p
}

func (x FriendPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FriendPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_proto_enumTypes[1].Descriptor()
}

func (FriendPacketID) Type() protoreflect.EnumType {
	return &file_friend_proto_enumTypes[1]
}

func (x FriendPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FriendPacketID.Descriptor instead.
func (FriendPacketID) EnumDescriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{1}
}

//获取好友列表
//PACKET_CSFriendList
type CSFriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListType int32 `protobuf:"varint,1,opt,name=ListType,proto3" json:"ListType,omitempty"` //0.好友列表 1.申请列表 2.推荐列表
}

func (x *CSFriendList) Reset() {
	*x = CSFriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFriendList) ProtoMessage() {}

func (x *CSFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFriendList.ProtoReflect.Descriptor instead.
func (*CSFriendList) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{0}
}

func (x *CSFriendList) GetListType() int32 {
	if x != nil {
		return x.ListType
	}
	return 0
}

type FriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId       int32  `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`  //名字
	Sex        int32  `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`   //性别
	Head       int32  `protobuf:"varint,4,opt,name=Head,proto3" json:"Head,omitempty"` //头像
	Online     bool   `protobuf:"varint,7,opt,name=Online,proto3" json:"Online,omitempty"`
	CreateTs   int64  `protobuf:"varint,9,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`      //创建时间
	LogoutTs   int64  `protobuf:"varint,10,opt,name=LogoutTs,proto3" json:"LogoutTs,omitempty"`     //离线时间
	LastChatTs int64  `protobuf:"varint,11,opt,name=LastChatTs,proto3" json:"LastChatTs,omitempty"` //最后聊天时间
	IsShield   bool   `protobuf:"varint,12,opt,name=IsShield,proto3" json:"IsShield,omitempty"`     //屏蔽关系
}

func (x *FriendInfo) Reset() {
	*x = FriendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInfo) ProtoMessage() {}

func (x *FriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInfo.ProtoReflect.Descriptor instead.
func (*FriendInfo) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{1}
}

func (x *FriendInfo) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *FriendInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FriendInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *FriendInfo) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *FriendInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *FriendInfo) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

func (x *FriendInfo) GetLogoutTs() int64 {
	if x != nil {
		return x.LogoutTs
	}
	return 0
}

func (x *FriendInfo) GetLastChatTs() int64 {
	if x != nil {
		return x.LastChatTs
	}
	return 0
}

func (x *FriendInfo) GetIsShield() bool {
	if x != nil {
		return x.IsShield
	}
	return false
}

//PACKET_SCFriendList
type SCFriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListType  int32         `protobuf:"varint,1,opt,name=ListType,proto3" json:"ListType,omitempty"` //0.好友列表 1.申请列表 2.推荐列表
	FriendArr []*FriendInfo `protobuf:"bytes,2,rep,name=FriendArr,proto3" json:"FriendArr,omitempty"`
	OpRetCode OpResultCode  `protobuf:"varint,3,opt,name=OpRetCode,proto3,enum=friend.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCFriendList) Reset() {
	*x = SCFriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendList) ProtoMessage() {}

func (x *SCFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendList.ProtoReflect.Descriptor instead.
func (*SCFriendList) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{2}
}

func (x *SCFriendList) GetListType() int32 {
	if x != nil {
		return x.ListType
	}
	return 0
}

func (x *SCFriendList) GetFriendArr() []*FriendInfo {
	if x != nil {
		return x.FriendArr
	}
	return nil
}

func (x *SCFriendList) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//好友操作
//PACKET_CSFriendOp
type CSFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"` //0.申请 1.同意 2.拒绝 3.删除
	SnId   int32 `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`
}

func (x *CSFriendOp) Reset() {
	*x = CSFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFriendOp) ProtoMessage() {}

func (x *CSFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFriendOp.ProtoReflect.Descriptor instead.
func (*CSFriendOp) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{3}
}

func (x *CSFriendOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSFriendOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

//PACKET_SCFriendOp
type SCFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode    int32        `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"` //0.申请 1.同意 2.拒绝 3.删除
	SnId      int32        `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Friend    *FriendInfo  `protobuf:"bytes,3,opt,name=Friend,proto3" json:"Friend,omitempty"`
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=friend.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCFriendOp) Reset() {
	*x = SCFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendOp) ProtoMessage() {}

func (x *SCFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendOp.ProtoReflect.Descriptor instead.
func (*SCFriendOp) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{4}
}

func (x *SCFriendOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCFriendOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCFriendOp) GetFriend() *FriendInfo {
	if x != nil {
		return x.Friend
	}
	return nil
}

func (x *SCFriendOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//PACKET_CSQueryPlayerGameLog
type CSQueryPlayerGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid   int32 `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	GameId int32 `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	Size   int32 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *CSQueryPlayerGameLog) Reset() {
	*x = CSQueryPlayerGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSQueryPlayerGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSQueryPlayerGameLog) ProtoMessage() {}

func (x *CSQueryPlayerGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSQueryPlayerGameLog.ProtoReflect.Descriptor instead.
func (*CSQueryPlayerGameLog) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{5}
}

func (x *CSQueryPlayerGameLog) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *CSQueryPlayerGameLog) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *CSQueryPlayerGameLog) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PlayerGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId    int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`       //游戏id
	BaseScore int32 `protobuf:"varint,2,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"` //游戏底注
	IsWin     int32 `protobuf:"varint,3,opt,name=IsWin,proto3" json:"IsWin,omitempty"`         //1:赢 0:平 -1:输
	Ts        int64 `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (x *PlayerGameLog) Reset() {
	*x = PlayerGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGameLog) ProtoMessage() {}

func (x *PlayerGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGameLog.ProtoReflect.Descriptor instead.
func (*PlayerGameLog) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerGameLog) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *PlayerGameLog) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *PlayerGameLog) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

func (x *PlayerGameLog) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

//PACKET_SCQueryPlayerGameLog
type SCQueryPlayerGameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid     int32            `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	GameId   int32            `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	Size     int32            `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	GameLogs []*PlayerGameLog `protobuf:"bytes,4,rep,name=GameLogs,proto3" json:"GameLogs,omitempty"`
}

func (x *SCQueryPlayerGameLog) Reset() {
	*x = SCQueryPlayerGameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCQueryPlayerGameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCQueryPlayerGameLog) ProtoMessage() {}

func (x *SCQueryPlayerGameLog) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCQueryPlayerGameLog.ProtoReflect.Descriptor instead.
func (*SCQueryPlayerGameLog) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{7}
}

func (x *SCQueryPlayerGameLog) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *SCQueryPlayerGameLog) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCQueryPlayerGameLog) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SCQueryPlayerGameLog) GetGameLogs() []*PlayerGameLog {
	if x != nil {
		return x.GameLogs
	}
	return nil
}

//PACKET_CSInviteFriend
type CSInviteFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToSnId int32 `protobuf:"varint,1,opt,name=ToSnId,proto3" json:"ToSnId,omitempty"` //被邀请者
	Pos    int32 `protobuf:"varint,2,opt,name=Pos,proto3" json:"Pos,omitempty"`
}

func (x *CSInviteFriend) Reset() {
	*x = CSInviteFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSInviteFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSInviteFriend) ProtoMessage() {}

func (x *CSInviteFriend) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSInviteFriend.ProtoReflect.Descriptor instead.
func (*CSInviteFriend) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{8}
}

func (x *CSInviteFriend) GetToSnId() int32 {
	if x != nil {
		return x.ToSnId
	}
	return 0
}

func (x *CSInviteFriend) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

//PACKET_SCInviteFriend
type SCInviteFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcSnId   int32        `protobuf:"varint,1,opt,name=SrcSnId,proto3" json:"SrcSnId,omitempty"` //邀请者
	SrcName   string       `protobuf:"bytes,2,opt,name=SrcName,proto3" json:"SrcName,omitempty"`
	SrcHead   int32        `protobuf:"varint,3,opt,name=SrcHead,proto3" json:"SrcHead,omitempty"`
	GameId    int32        `protobuf:"varint,4,opt,name=GameId,proto3" json:"GameId,omitempty"`
	RoomId    int32        `protobuf:"varint,5,opt,name=RoomId,proto3" json:"RoomId,omitempty"`
	Pos       int32        `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`
	OpRetCode OpResultCode `protobuf:"varint,7,opt,name=OpRetCode,proto3,enum=friend.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCInviteFriend) Reset() {
	*x = SCInviteFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCInviteFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCInviteFriend) ProtoMessage() {}

func (x *SCInviteFriend) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCInviteFriend.ProtoReflect.Descriptor instead.
func (*SCInviteFriend) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{9}
}

func (x *SCInviteFriend) GetSrcSnId() int32 {
	if x != nil {
		return x.SrcSnId
	}
	return 0
}

func (x *SCInviteFriend) GetSrcName() string {
	if x != nil {
		return x.SrcName
	}
	return ""
}

func (x *SCInviteFriend) GetSrcHead() int32 {
	if x != nil {
		return x.SrcHead
	}
	return 0
}

func (x *SCInviteFriend) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCInviteFriend) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCInviteFriend) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCInviteFriend) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//PACKET_CSInviteFriendOp
type CSInviteFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"` //0.同意 1.拒绝
	SnId   int32 `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`     // 拒绝/同意对象
	Pos    int32 `protobuf:"varint,3,opt,name=Pos,proto3" json:"Pos,omitempty"`
}

func (x *CSInviteFriendOp) Reset() {
	*x = CSInviteFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSInviteFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSInviteFriendOp) ProtoMessage() {}

func (x *CSInviteFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSInviteFriendOp.ProtoReflect.Descriptor instead.
func (*CSInviteFriendOp) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{10}
}

func (x *CSInviteFriendOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSInviteFriendOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *CSInviteFriendOp) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

//PACKET_SCInviteFriendOp
type SCInviteFriendOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"` //操作者
	Name      string       `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OpCode    int32        `protobuf:"varint,3,opt,name=OpCode,proto3" json:"OpCode,omitempty"` //0.同意 1.拒绝
	Pos       int32        `protobuf:"varint,4,opt,name=Pos,proto3" json:"Pos,omitempty"`
	OpRetCode OpResultCode `protobuf:"varint,5,opt,name=OpRetCode,proto3,enum=friend.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCInviteFriendOp) Reset() {
	*x = SCInviteFriendOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCInviteFriendOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCInviteFriendOp) ProtoMessage() {}

func (x *SCInviteFriendOp) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCInviteFriendOp.ProtoReflect.Descriptor instead.
func (*SCInviteFriendOp) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{11}
}

func (x *SCInviteFriendOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCInviteFriendOp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SCInviteFriendOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCInviteFriendOp) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCInviteFriendOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

type FriendApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid     int32  `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CreateTs int64  `protobuf:"varint,3,opt,name=CreateTs,proto3" json:"CreateTs,omitempty"`
}

func (x *FriendApply) Reset() {
	*x = FriendApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApply) ProtoMessage() {}

func (x *FriendApply) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApply.ProtoReflect.Descriptor instead.
func (*FriendApply) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{12}
}

func (x *FriendApply) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *FriendApply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FriendApply) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

//PACKET_SCFriendApplyData
type SCFriendApplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendApplys []*FriendApply `protobuf:"bytes,1,rep,name=FriendApplys,proto3" json:"FriendApplys,omitempty"`
}

func (x *SCFriendApplyData) Reset() {
	*x = SCFriendApplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendApplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendApplyData) ProtoMessage() {}

func (x *SCFriendApplyData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendApplyData.ProtoReflect.Descriptor instead.
func (*SCFriendApplyData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{13}
}

func (x *SCFriendApplyData) GetFriendApplys() []*FriendApply {
	if x != nil {
		return x.FriendApplys
	}
	return nil
}

type FriendUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid      int32 `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	UnreadNum int32 `protobuf:"varint,2,opt,name=UnreadNum,proto3" json:"UnreadNum,omitempty"`
}

func (x *FriendUnread) Reset() {
	*x = FriendUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendUnread) ProtoMessage() {}

func (x *FriendUnread) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendUnread.ProtoReflect.Descriptor instead.
func (*FriendUnread) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{14}
}

func (x *FriendUnread) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *FriendUnread) GetUnreadNum() int32 {
	if x != nil {
		return x.UnreadNum
	}
	return 0
}

//PACKET_SCFriendUnreadData
type SCFriendUnreadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendUnreads []*FriendUnread `protobuf:"bytes,1,rep,name=FriendUnreads,proto3" json:"FriendUnreads,omitempty"`
}

func (x *SCFriendUnreadData) Reset() {
	*x = SCFriendUnreadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFriendUnreadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFriendUnreadData) ProtoMessage() {}

func (x *SCFriendUnreadData) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFriendUnreadData.ProtoReflect.Descriptor instead.
func (*SCFriendUnreadData) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{15}
}

func (x *SCFriendUnreadData) GetFriendUnreads() []*FriendUnread {
	if x != nil {
		return x.FriendUnreads
	}
	return nil
}

//PACKET_CSFuzzyQueryPlayer //根据id或者昵称查询玩家
type CSFuzzyQueryPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryContent string `protobuf:"bytes,1,opt,name=QueryContent,proto3" json:"QueryContent,omitempty"`
}

func (x *CSFuzzyQueryPlayer) Reset() {
	*x = CSFuzzyQueryPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFuzzyQueryPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFuzzyQueryPlayer) ProtoMessage() {}

func (x *CSFuzzyQueryPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFuzzyQueryPlayer.ProtoReflect.Descriptor instead.
func (*CSFuzzyQueryPlayer) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{16}
}

func (x *CSFuzzyQueryPlayer) GetQueryContent() string {
	if x != nil {
		return x.QueryContent
	}
	return ""
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId int32  `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`  //名字
	Sex  int32  `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`   //性别
	Head int32  `protobuf:"varint,4,opt,name=Head,proto3" json:"Head,omitempty"` //头像
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerInfo) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *PlayerInfo) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

//PACKET_SCFuzzyQueryPlayer
type SCFuzzyQueryPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryContent string        `protobuf:"bytes,1,opt,name=QueryContent,proto3" json:"QueryContent,omitempty"`
	Players      []*PlayerInfo `protobuf:"bytes,2,rep,name=Players,proto3" json:"Players,omitempty"`
}

func (x *SCFuzzyQueryPlayer) Reset() {
	*x = SCFuzzyQueryPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFuzzyQueryPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFuzzyQueryPlayer) ProtoMessage() {}

func (x *SCFuzzyQueryPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFuzzyQueryPlayer.ProtoReflect.Descriptor instead.
func (*SCFuzzyQueryPlayer) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{18}
}

func (x *SCFuzzyQueryPlayer) GetQueryContent() string {
	if x != nil {
		return x.QueryContent
	}
	return ""
}

func (x *SCFuzzyQueryPlayer) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

var File_friend_proto protoreflect.FileDescriptor

var file_friend_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x2a, 0x0a, 0x0c, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0c,
	0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38,
	0x0a, 0x0a, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x53, 0x43, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x53, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x53, 0x43, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x43, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x53, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x6f, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73,
	0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x53, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x53, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x63, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x53, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x43,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x53, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0c,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x43, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x0d, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x12, 0x43, 0x53, 0x46,
	0x75, 0x7a, 0x7a, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x22,
	0x66, 0x0a, 0x12, 0x53, 0x43, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2a, 0xf3, 0x05, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x4e, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x10, 0xe9, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x64, 0x64, 0x10, 0xea,
	0x07, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x10, 0xeb, 0x07,
	0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x10, 0xec, 0x07, 0x12, 0x1e, 0x0a, 0x19,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x44, 0x65, 0x73, 0x74,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x10, 0xed, 0x07, 0x12, 0x23, 0x0a, 0x1e,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x44, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x10, 0xee,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x4e, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0xef, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x10, 0xf0, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xf1, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xf2, 0x07, 0x12, 0x23, 0x0a, 0x1e,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xf3,
	0x07, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0xf4, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0xf5, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xf6, 0x07, 0x12, 0x23, 0x0a,
	0x1e, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10,
	0xf7, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x43,
	0x61, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0xf8, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xf9, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0xfa, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x50, 0x6f, 0x73, 0x49, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xfb, 0x07, 0x12, 0x20, 0x0a,
	0x1b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x5f, 0x48, 0x61, 0x64, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xfc, 0x07, 0x12,
	0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x4e,
	0x6f, 0x74, 0x4f, 0x70, 0x4d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x10, 0xfd, 0x07, 0x2a, 0xc9, 0x03,
	0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x8c, 0x15, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0x8d, 0x15, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x10, 0x8e, 0x15, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x10,
	0x8f, 0x15, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f,
	0x67, 0x10, 0x90, 0x15, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x6f, 0x67, 0x10, 0x91, 0x15, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10,
	0x92, 0x15, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x93, 0x15, 0x12, 0x1c,
	0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x10, 0x94, 0x15, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x10, 0x95, 0x15, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10, 0x96, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x10, 0x97, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x98, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x99, 0x15, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_friend_proto_rawDescOnce sync.Once
	file_friend_proto_rawDescData = file_friend_proto_rawDesc
)

func file_friend_proto_rawDescGZIP() []byte {
	file_friend_proto_rawDescOnce.Do(func() {
		file_friend_proto_rawDescData = protoimpl.X.CompressGZIP(file_friend_proto_rawDescData)
	})
	return file_friend_proto_rawDescData
}

var file_friend_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_friend_proto_goTypes = []interface{}{
	(OpResultCode)(0),            // 0: friend.OpResultCode
	(FriendPacketID)(0),          // 1: friend.FriendPacketID
	(*CSFriendList)(nil),         // 2: friend.CSFriendList
	(*FriendInfo)(nil),           // 3: friend.FriendInfo
	(*SCFriendList)(nil),         // 4: friend.SCFriendList
	(*CSFriendOp)(nil),           // 5: friend.CSFriendOp
	(*SCFriendOp)(nil),           // 6: friend.SCFriendOp
	(*CSQueryPlayerGameLog)(nil), // 7: friend.CSQueryPlayerGameLog
	(*PlayerGameLog)(nil),        // 8: friend.PlayerGameLog
	(*SCQueryPlayerGameLog)(nil), // 9: friend.SCQueryPlayerGameLog
	(*CSInviteFriend)(nil),       // 10: friend.CSInviteFriend
	(*SCInviteFriend)(nil),       // 11: friend.SCInviteFriend
	(*CSInviteFriendOp)(nil),     // 12: friend.CSInviteFriendOp
	(*SCInviteFriendOp)(nil),     // 13: friend.SCInviteFriendOp
	(*FriendApply)(nil),          // 14: friend.FriendApply
	(*SCFriendApplyData)(nil),    // 15: friend.SCFriendApplyData
	(*FriendUnread)(nil),         // 16: friend.FriendUnread
	(*SCFriendUnreadData)(nil),   // 17: friend.SCFriendUnreadData
	(*CSFuzzyQueryPlayer)(nil),   // 18: friend.CSFuzzyQueryPlayer
	(*PlayerInfo)(nil),           // 19: friend.PlayerInfo
	(*SCFuzzyQueryPlayer)(nil),   // 20: friend.SCFuzzyQueryPlayer
}
var file_friend_proto_depIdxs = []int32{
	3,  // 0: friend.SCFriendList.FriendArr:type_name -> friend.FriendInfo
	0,  // 1: friend.SCFriendList.OpRetCode:type_name -> friend.OpResultCode
	3,  // 2: friend.SCFriendOp.Friend:type_name -> friend.FriendInfo
	0,  // 3: friend.SCFriendOp.OpRetCode:type_name -> friend.OpResultCode
	8,  // 4: friend.SCQueryPlayerGameLog.GameLogs:type_name -> friend.PlayerGameLog
	0,  // 5: friend.SCInviteFriend.OpRetCode:type_name -> friend.OpResultCode
	0,  // 6: friend.SCInviteFriendOp.OpRetCode:type_name -> friend.OpResultCode
	14, // 7: friend.SCFriendApplyData.FriendApplys:type_name -> friend.FriendApply
	16, // 8: friend.SCFriendUnreadData.FriendUnreads:type_name -> friend.FriendUnread
	19, // 9: friend.SCFuzzyQueryPlayer.Players:type_name -> friend.PlayerInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_friend_proto_init() }
func file_friend_proto_init() {
	if File_friend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_friend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSQueryPlayerGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCQueryPlayerGameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSInviteFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCInviteFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSInviteFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCInviteFriendOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendApplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFriendUnreadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFuzzyQueryPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFuzzyQueryPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_friend_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_friend_proto_goTypes,
		DependencyIndexes: file_friend_proto_depIdxs,
		EnumInfos:         file_friend_proto_enumTypes,
		MessageInfos:      file_friend_proto_msgTypes,
	}.Build()
	File_friend_proto = out.File
	file_friend_proto_rawDesc = nil
	file_friend_proto_goTypes = nil
	file_friend_proto_depIdxs = nil
}
