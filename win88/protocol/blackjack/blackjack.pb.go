// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: blackjack.proto

package blackjack

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlackJackPacketID int32

const (
	BlackJackPacketID_PACKET_BlackJack_ZERO BlackJackPacketID = 0    // 弃用消息号
	BlackJackPacketID_CS_PLAYER_OPERATE     BlackJackPacketID = 5320 // 玩家操作
	BlackJackPacketID_SC_ROOM_INFO          BlackJackPacketID = 5321 // 房间信息
	BlackJackPacketID_SC_PLAYER_ENTER       BlackJackPacketID = 5322 // 玩家进入
	BlackJackPacketID_SC_PLAYER_LEAVE       BlackJackPacketID = 5323 // 玩家离开
	BlackJackPacketID_SC_ROOM_STATUS        BlackJackPacketID = 5324 // 房间状态
	BlackJackPacketID_SC_PLAYER_BET         BlackJackPacketID = 5325 // 玩家下注
	BlackJackPacketID_SC_PLAYER_Pos         BlackJackPacketID = 5326 // 玩家位置
	BlackJackPacketID_SC_DEAL               BlackJackPacketID = 5327 // 发牌信息
	BlackJackPacketID_SC_NOTIFY_BUY         BlackJackPacketID = 5328 // 通知买保险
	BlackJackPacketID_SC_PLAYER_BUY         BlackJackPacketID = 5329 // 买保险结果
	//SC_BANKER_CARDS   = 5330; // 庄家手牌
	BlackJackPacketID_SC_NOTIFY_OPERATE BlackJackPacketID = 5331 // 通知闲家操作
	BlackJackPacketID_SC_PLAYER_OPERATE BlackJackPacketID = 5332 // 闲家操作
	BlackJackPacketID_SC_NOTIFY_CARDS   BlackJackPacketID = 5333 // 通知牌型
	BlackJackPacketID_SC_END            BlackJackPacketID = 5334 // 通知结算
	BlackJackPacketID_SC_BUY_END        BlackJackPacketID = 5335 // 保险结算
	BlackJackPacketID_SC_SIT            BlackJackPacketID = 5336 // 坐下
)

// Enum value maps for BlackJackPacketID.
var (
	BlackJackPacketID_name = map[int32]string{
		0:    "PACKET_BlackJack_ZERO",
		5320: "CS_PLAYER_OPERATE",
		5321: "SC_ROOM_INFO",
		5322: "SC_PLAYER_ENTER",
		5323: "SC_PLAYER_LEAVE",
		5324: "SC_ROOM_STATUS",
		5325: "SC_PLAYER_BET",
		5326: "SC_PLAYER_Pos",
		5327: "SC_DEAL",
		5328: "SC_NOTIFY_BUY",
		5329: "SC_PLAYER_BUY",
		5331: "SC_NOTIFY_OPERATE",
		5332: "SC_PLAYER_OPERATE",
		5333: "SC_NOTIFY_CARDS",
		5334: "SC_END",
		5335: "SC_BUY_END",
		5336: "SC_SIT",
	}
	BlackJackPacketID_value = map[string]int32{
		"PACKET_BlackJack_ZERO": 0,
		"CS_PLAYER_OPERATE":     5320,
		"SC_ROOM_INFO":          5321,
		"SC_PLAYER_ENTER":       5322,
		"SC_PLAYER_LEAVE":       5323,
		"SC_ROOM_STATUS":        5324,
		"SC_PLAYER_BET":         5325,
		"SC_PLAYER_Pos":         5326,
		"SC_DEAL":               5327,
		"SC_NOTIFY_BUY":         5328,
		"SC_PLAYER_BUY":         5329,
		"SC_NOTIFY_OPERATE":     5331,
		"SC_PLAYER_OPERATE":     5332,
		"SC_NOTIFY_CARDS":       5333,
		"SC_END":                5334,
		"SC_BUY_END":            5335,
		"SC_SIT":                5336,
	}
)

func (x BlackJackPacketID) Enum() *BlackJackPacketID {
	p := new(BlackJackPacketID)
	*p = x
	return p
}

func (x BlackJackPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackJackPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[0].Descriptor()
}

func (BlackJackPacketID) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[0]
}

func (x BlackJackPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackJackPacketID.Descriptor instead.
func (BlackJackPacketID) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

type SCBlackJackPlayerBet_ErrorCode int32

const (
	SCBlackJackPlayerBet_Success SCBlackJackPlayerBet_ErrorCode = 0 // 成功
	SCBlackJackPlayerBet_ErrCoin SCBlackJackPlayerBet_ErrorCode = 1 // 下注金额错误
	SCBlackJackPlayerBet_ErrBet  SCBlackJackPlayerBet_ErrorCode = 2 // 当前座位先下注
	SCBlackJackPlayerBet_ErrPos  SCBlackJackPlayerBet_ErrorCode = 3 // 已下注
)

// Enum value maps for SCBlackJackPlayerBet_ErrorCode.
var (
	SCBlackJackPlayerBet_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "ErrCoin",
		2: "ErrBet",
		3: "ErrPos",
	}
	SCBlackJackPlayerBet_ErrorCode_value = map[string]int32{
		"Success": 0,
		"ErrCoin": 1,
		"ErrBet":  2,
		"ErrPos":  3,
	}
)

func (x SCBlackJackPlayerBet_ErrorCode) Enum() *SCBlackJackPlayerBet_ErrorCode {
	p := new(SCBlackJackPlayerBet_ErrorCode)
	*p = x
	return p
}

func (x SCBlackJackPlayerBet_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCBlackJackPlayerBet_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[1].Descriptor()
}

func (SCBlackJackPlayerBet_ErrorCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[1]
}

func (x SCBlackJackPlayerBet_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCBlackJackPlayerBet_ErrorCode.Descriptor instead.
func (SCBlackJackPlayerBet_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{7, 0}
}

type SCBlackJackBuy_ErrorCode int32

const (
	SCBlackJackBuy_Success SCBlackJackBuy_ErrorCode = 0 // 成功
	SCBlackJackBuy_ErrCoin SCBlackJackBuy_ErrorCode = 1 // 金额错误
	SCBlackJackBuy_ErrPos  SCBlackJackBuy_ErrorCode = 2 // 非当前玩家操作
	SCBlackJackBuy_UnBuy   SCBlackJackBuy_ErrorCode = 3 // 不买
)

// Enum value maps for SCBlackJackBuy_ErrorCode.
var (
	SCBlackJackBuy_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "ErrCoin",
		2: "ErrPos",
		3: "UnBuy",
	}
	SCBlackJackBuy_ErrorCode_value = map[string]int32{
		"Success": 0,
		"ErrCoin": 1,
		"ErrPos":  2,
		"UnBuy":   3,
	}
)

func (x SCBlackJackBuy_ErrorCode) Enum() *SCBlackJackBuy_ErrorCode {
	p := new(SCBlackJackBuy_ErrorCode)
	*p = x
	return p
}

func (x SCBlackJackBuy_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCBlackJackBuy_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[2].Descriptor()
}

func (SCBlackJackBuy_ErrorCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[2]
}

func (x SCBlackJackBuy_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCBlackJackBuy_ErrorCode.Descriptor instead.
func (SCBlackJackBuy_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{11, 0}
}

type SCBlackJackPlayerOperate_ErrorCode int32

const (
	SCBlackJackPlayerOperate_Success SCBlackJackPlayerOperate_ErrorCode = 0 // 成功
	SCBlackJackPlayerOperate_ErrCoin SCBlackJackPlayerOperate_ErrorCode = 1 // 金币不足
	SCBlackJackPlayerOperate_ErrPos  SCBlackJackPlayerOperate_ErrorCode = 2 // 非当前玩家操作
	SCBlackJackPlayerOperate_ErrOp   SCBlackJackPlayerOperate_ErrorCode = 3 // 不能操作
)

// Enum value maps for SCBlackJackPlayerOperate_ErrorCode.
var (
	SCBlackJackPlayerOperate_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "ErrCoin",
		2: "ErrPos",
		3: "ErrOp",
	}
	SCBlackJackPlayerOperate_ErrorCode_value = map[string]int32{
		"Success": 0,
		"ErrCoin": 1,
		"ErrPos":  2,
		"ErrOp":   3,
	}
)

func (x SCBlackJackPlayerOperate_ErrorCode) Enum() *SCBlackJackPlayerOperate_ErrorCode {
	p := new(SCBlackJackPlayerOperate_ErrorCode)
	*p = x
	return p
}

func (x SCBlackJackPlayerOperate_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCBlackJackPlayerOperate_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[3].Descriptor()
}

func (SCBlackJackPlayerOperate_ErrorCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[3]
}

func (x SCBlackJackPlayerOperate_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCBlackJackPlayerOperate_ErrorCode.Descriptor instead.
func (SCBlackJackPlayerOperate_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{12, 0}
}

type SCBlackJackSit_ErrorCode int32

const (
	SCBlackJackSit_Success SCBlackJackSit_ErrorCode = 0 // 成功
	SCBlackJackSit_ErrPos  SCBlackJackSit_ErrorCode = 1 // 没有空位
)

// Enum value maps for SCBlackJackSit_ErrorCode.
var (
	SCBlackJackSit_ErrorCode_name = map[int32]string{
		0: "Success",
		1: "ErrPos",
	}
	SCBlackJackSit_ErrorCode_value = map[string]int32{
		"Success": 0,
		"ErrPos":  1,
	}
)

func (x SCBlackJackSit_ErrorCode) Enum() *SCBlackJackSit_ErrorCode {
	p := new(SCBlackJackSit_ErrorCode)
	*p = x
	return p
}

func (x SCBlackJackSit_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCBlackJackSit_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_proto_enumTypes[4].Descriptor()
}

func (SCBlackJackSit_ErrorCode) Type() protoreflect.EnumType {
	return &file_blackjack_proto_enumTypes[4]
}

func (x SCBlackJackSit_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCBlackJackSit_ErrorCode.Descriptor instead.
func (SCBlackJackSit_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{17, 0}
}

// CS_PLAYER_OPERATE
type CSBlackJackOP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"` // 操作码
	//    SubBet      = 0  下注 Param[0] 下注位置0~4 Param[1] 下注金额
	//    SubBuy      = 1  买保险 Params[0] = 1 买 0 不买
	//    SubFenPai   = 2  分牌
	//    SubDouble   = 3  双倍
	//    SubSkip     = 4  停牌
	//    SubOuts     = 5  要牌
	//    SubLeave    = 6  离开
	//    SubSit      = 7  坐下
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` // 操作参数
}

func (x *CSBlackJackOP) Reset() {
	*x = CSBlackJackOP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSBlackJackOP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSBlackJackOP) ProtoMessage() {}

func (x *CSBlackJackOP) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSBlackJackOP.ProtoReflect.Descriptor instead.
func (*CSBlackJackOP) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{0}
}

func (x *CSBlackJackOP) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSBlackJackOP) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

type BlackJackCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards   []int32 `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` // 一副手牌(-1代表暗牌)
	DCards  int32   `protobuf:"varint,2,opt,name=DCards,proto3" json:"DCards,omitempty"`      // 双倍牌
	Type    int32   `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`          // 类型
	Point   []int32 `protobuf:"varint,4,rep,packed,name=Point,proto3" json:"Point,omitempty"` // 点数
	State   int32   `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`        // 操作状态: 0 默认 1 已停牌
	Id      int32   `protobuf:"varint,6,opt,name=Id,proto3" json:"Id,omitempty"`              // 手牌序号: 0 左侧手牌 1 右侧手牌
	Seat    int32   `protobuf:"varint,7,opt,name=Seat,proto3" json:"Seat,omitempty"`          // 座位号
	BetCoin int64   `protobuf:"varint,8,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"`    // 下注额
}

func (x *BlackJackCards) Reset() {
	*x = BlackJackCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackJackCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackJackCards) ProtoMessage() {}

func (x *BlackJackCards) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackJackCards.ProtoReflect.Descriptor instead.
func (*BlackJackCards) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{1}
}

func (x *BlackJackCards) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BlackJackCards) GetDCards() int32 {
	if x != nil {
		return x.DCards
	}
	return 0
}

func (x *BlackJackCards) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BlackJackCards) GetPoint() []int32 {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *BlackJackCards) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *BlackJackCards) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BlackJackCards) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *BlackJackCards) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

type BlackJackPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                          // 名字
	SnId         int32             `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                         // 账号
	Head         int32             `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                         // 头像
	Sex          int32             `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                           // 性别
	Coin         int64             `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                         // 金币
	Pos          int32             `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                           // 位置
	Seat         int32             `protobuf:"varint,7,opt,name=Seat,proto3" json:"Seat,omitempty"`                         // 座位号
	Flag         int32             `protobuf:"varint,8,opt,name=Flag,proto3" json:"Flag,omitempty"`                         // 二进制标记 第一位:是否掉线(0:在线 1:掉线) 第二位:是否准备(0:未准备 1:已准备)
	Cards        []*BlackJackCards `protobuf:"bytes,9,rep,name=Cards,proto3" json:"Cards,omitempty"`                        // 手牌
	BetCoin      int64             `protobuf:"varint,10,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"`                  // 下注金币
	Params       []string          `protobuf:"bytes,11,rep,name=Params,proto3" json:"Params,omitempty"`                     // 其他数据 如:ip 等
	Longitude    int32             `protobuf:"varint,12,opt,name=Longitude,proto3" json:"Longitude,omitempty"`              // 经度
	Latitude     int32             `protobuf:"varint,13,opt,name=Latitude,proto3" json:"Latitude,omitempty"`                // 纬度
	City         string            `protobuf:"bytes,14,opt,name=City,proto3" json:"City,omitempty"`                         // 城市 例:中国-河南省-郑州市
	NiceId       int32             `protobuf:"varint,15,opt,name=NiceId,proto3" json:"NiceId,omitempty"`                    // 靓号
	AgentCode    string            `protobuf:"bytes,16,opt,name=AgentCode,proto3" json:"AgentCode,omitempty"`               // 代理商编号
	AllInCoin    int64             `protobuf:"varint,17,opt,name=AllInCoin,proto3" json:"AllInCoin,omitempty"`              // 可推注值
	HeadOutLine  int32             `protobuf:"varint,18,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"`          // 头像框
	VIP          int32             `protobuf:"varint,19,opt,name=VIP,proto3" json:"VIP,omitempty"`                          // vip
	BaoCoin      int64             `protobuf:"varint,20,opt,name=BaoCoin,proto3" json:"BaoCoin,omitempty"`                  // 保险金
	OpFlagParams []int32           `protobuf:"varint,21,rep,packed,name=OpFlagParams,proto3" json:"OpFlagParams,omitempty"` // 操作标记参数
}

func (x *BlackJackPlayer) Reset() {
	*x = BlackJackPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackJackPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackJackPlayer) ProtoMessage() {}

func (x *BlackJackPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackJackPlayer.ProtoReflect.Descriptor instead.
func (*BlackJackPlayer) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{2}
}

func (x *BlackJackPlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlackJackPlayer) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *BlackJackPlayer) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *BlackJackPlayer) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *BlackJackPlayer) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *BlackJackPlayer) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *BlackJackPlayer) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *BlackJackPlayer) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *BlackJackPlayer) GetCards() []*BlackJackCards {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *BlackJackPlayer) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

func (x *BlackJackPlayer) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BlackJackPlayer) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *BlackJackPlayer) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *BlackJackPlayer) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *BlackJackPlayer) GetNiceId() int32 {
	if x != nil {
		return x.NiceId
	}
	return 0
}

func (x *BlackJackPlayer) GetAgentCode() string {
	if x != nil {
		return x.AgentCode
	}
	return ""
}

func (x *BlackJackPlayer) GetAllInCoin() int64 {
	if x != nil {
		return x.AllInCoin
	}
	return 0
}

func (x *BlackJackPlayer) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *BlackJackPlayer) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *BlackJackPlayer) GetBaoCoin() int64 {
	if x != nil {
		return x.BaoCoin
	}
	return 0
}

func (x *BlackJackPlayer) GetOpFlagParams() []int32 {
	if x != nil {
		return x.OpFlagParams
	}
	return nil
}

// SC_ROOM_INFO
type SCBlackJackRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       int32              `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`              // 房间id
	Creator      int32              `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`            // 创建者SnId
	GameId       int32              `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`              // 游戏id
	RoomMode     int32              `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`          // 游戏模式
	Params       []int32            `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`       // 规则参数
	NumOfGames   int32              `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`      // 当前第几局
	BankerPos    int32              `protobuf:"varint,7,opt,name=BankerPos,proto3" json:"BankerPos,omitempty"`        // 庄家位置
	State        int32              `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                // 房间当前状态
	TimeOut      int32              `protobuf:"varint,9,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`            // 消耗时间，单位：秒
	Players      []*BlackJackPlayer `protobuf:"bytes,10,rep,name=Players,proto3" json:"Players,omitempty"`            // 房间内的玩家信息
	DisbandGen   int32              `protobuf:"varint,11,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`     // 解散申请
	AgentId      int32              `protobuf:"varint,12,opt,name=AgentId,proto3" json:"AgentId,omitempty"`           // 代开房者
	ParamsEx     []int32            `protobuf:"varint,13,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`  // 比赛参数
	SceneType    int32              `protobuf:"varint,14,opt,name=SceneType,proto3" json:"SceneType,omitempty"`       // 房间模式
	Pos          int32              `protobuf:"varint,15,opt,name=Pos,proto3" json:"Pos,omitempty"`                   // 操作位置
	BetScope     []int64            `protobuf:"varint,16,rep,packed,name=BetScope,proto3" json:"BetScope,omitempty"`  // 下注范围
	TotalOfGames int32              `protobuf:"varint,17,opt,name=TotalOfGames,proto3" json:"TotalOfGames,omitempty"` // 总局数
	Num          int32              `protobuf:"varint,18,opt,name=Num,proto3" json:"Num,omitempty"`                   // 剩余牌数
	IsAudience   bool               `protobuf:"varint,19,opt,name=IsAudience,proto3" json:"IsAudience,omitempty"`     // 当前玩家是否观众中
}

func (x *SCBlackJackRoomInfo) Reset() {
	*x = SCBlackJackRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackRoomInfo) ProtoMessage() {}

func (x *SCBlackJackRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackRoomInfo.ProtoReflect.Descriptor instead.
func (*SCBlackJackRoomInfo) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{3}
}

func (x *SCBlackJackRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCBlackJackRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetBankerPos() int32 {
	if x != nil {
		return x.BankerPos
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetPlayers() []*BlackJackPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCBlackJackRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCBlackJackRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetBetScope() []int64 {
	if x != nil {
		return x.BetScope
	}
	return nil
}

func (x *SCBlackJackRoomInfo) GetTotalOfGames() int32 {
	if x != nil {
		return x.TotalOfGames
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SCBlackJackRoomInfo) GetIsAudience() bool {
	if x != nil {
		return x.IsAudience
	}
	return false
}

// SC_PLAYER_ENTER
type SCBlackJackPlayerEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *BlackJackPlayer `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player,omitempty"` // 玩家信息
}

func (x *SCBlackJackPlayerEnter) Reset() {
	*x = SCBlackJackPlayerEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackPlayerEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackPlayerEnter) ProtoMessage() {}

func (x *SCBlackJackPlayerEnter) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackPlayerEnter.ProtoReflect.Descriptor instead.
func (*SCBlackJackPlayerEnter) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{4}
}

func (x *SCBlackJackPlayerEnter) GetPlayer() *BlackJackPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

// SC_PLAYER_LEAVE
type SCBlackJackPlayerLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos []int32 `protobuf:"varint,1,rep,packed,name=Pos,proto3" json:"Pos,omitempty"` // 玩家位置: 第一个是玩家的真实座位，其余为代玩座位,代玩是以前的规则，现在没有了
}

func (x *SCBlackJackPlayerLeave) Reset() {
	*x = SCBlackJackPlayerLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackPlayerLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackPlayerLeave) ProtoMessage() {}

func (x *SCBlackJackPlayerLeave) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackPlayerLeave.ProtoReflect.Descriptor instead.
func (*SCBlackJackPlayerLeave) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{5}
}

func (x *SCBlackJackPlayerLeave) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

// SC_ROOM_STATUS
type SCBlackJackRoomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"` // 状态码
	//    StatusWait   = 0 // 等待状态
	//    StatusReady  = 1 // 准备状态
	//    StatusBet    = 2 // 下注状态 Param [最小下注，最大下注]
	//    StatusDeal   = 3 // 发牌状态
	//    StatusBuy    = 4 // 买保险状态
	//    StatusBuyEnd = 5 // 保险结算状态
	//    StatusPlayer = 6 // 闲家操作
	//    StatusBanker = 7 // 庄家操作
	//    StatusEnd    = 8 // 结算状态
	Param []int64 `protobuf:"varint,2,rep,packed,name=Param,proto3" json:"Param,omitempty"`
}

func (x *SCBlackJackRoomStatus) Reset() {
	*x = SCBlackJackRoomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackRoomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackRoomStatus) ProtoMessage() {}

func (x *SCBlackJackRoomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackRoomStatus.ProtoReflect.Descriptor instead.
func (*SCBlackJackRoomStatus) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{6}
}

func (x *SCBlackJackRoomStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SCBlackJackRoomStatus) GetParam() []int64 {
	if x != nil {
		return x.Param
	}
	return nil
}

// SC_PLAYER_BET
type SCBlackJackPlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   SCBlackJackPlayerBet_ErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=blackjack.SCBlackJackPlayerBet_ErrorCode" json:"Code,omitempty"` // 错误码
	Pos1   int32                          `protobuf:"varint,2,opt,name=Pos1,proto3" json:"Pos1,omitempty"`                                               // 扣钱位置（玩家真实座位号）
	Pos2   int32                          `protobuf:"varint,3,opt,name=Pos2,proto3" json:"Pos2,omitempty"`                                               // 下注位置
	Coin   int64                          `protobuf:"varint,4,opt,name=Coin,proto3" json:"Coin,omitempty"`                                               // 下注金额
	ReCoin int64                          `protobuf:"varint,5,opt,name=ReCoin,proto3" json:"ReCoin,omitempty"`                                           // 剩余金额
}

func (x *SCBlackJackPlayerBet) Reset() {
	*x = SCBlackJackPlayerBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackPlayerBet) ProtoMessage() {}

func (x *SCBlackJackPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackPlayerBet.ProtoReflect.Descriptor instead.
func (*SCBlackJackPlayerBet) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{7}
}

func (x *SCBlackJackPlayerBet) GetCode() SCBlackJackPlayerBet_ErrorCode {
	if x != nil {
		return x.Code
	}
	return SCBlackJackPlayerBet_Success
}

func (x *SCBlackJackPlayerBet) GetPos1() int32 {
	if x != nil {
		return x.Pos1
	}
	return 0
}

func (x *SCBlackJackPlayerBet) GetPos2() int32 {
	if x != nil {
		return x.Pos2
	}
	return 0
}

func (x *SCBlackJackPlayerBet) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCBlackJackPlayerBet) GetReCoin() int64 {
	if x != nil {
		return x.ReCoin
	}
	return 0
}

// SC_PLAYER_Pos
type SCBlackJackPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seats []int32 `protobuf:"varint,1,rep,packed,name=Seats,proto3" json:"Seats,omitempty"` // 玩家操作顺序，值是玩家的pos
}

func (x *SCBlackJackPos) Reset() {
	*x = SCBlackJackPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackPos) ProtoMessage() {}

func (x *SCBlackJackPos) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackPos.ProtoReflect.Descriptor instead.
func (*SCBlackJackPos) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{8}
}

func (x *SCBlackJackPos) GetSeats() []int32 {
	if x != nil {
		return x.Seats
	}
	return nil
}

// SC_DEAL
type SCBlackJackDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seats []*BlackJackCards `protobuf:"bytes,1,rep,name=Seats,proto3" json:"Seats,omitempty"` // 发牌信息
	Num   int32             `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`    // 剩余牌数
}

func (x *SCBlackJackDeal) Reset() {
	*x = SCBlackJackDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackDeal) ProtoMessage() {}

func (x *SCBlackJackDeal) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackDeal.ProtoReflect.Descriptor instead.
func (*SCBlackJackDeal) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{9}
}

func (x *SCBlackJackDeal) GetSeats() []*BlackJackCards {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SCBlackJackDeal) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// SC_NOTIFY_BUY
type SCBlackJackNotifyBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"` // 玩家位置
}

func (x *SCBlackJackNotifyBuy) Reset() {
	*x = SCBlackJackNotifyBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackNotifyBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackNotifyBuy) ProtoMessage() {}

func (x *SCBlackJackNotifyBuy) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackNotifyBuy.ProtoReflect.Descriptor instead.
func (*SCBlackJackNotifyBuy) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{10}
}

func (x *SCBlackJackNotifyBuy) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

// SC_PLAYER_BUY
type SCBlackJackBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   SCBlackJackBuy_ErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=blackjack.SCBlackJackBuy_ErrorCode" json:"Code,omitempty"` // 错误码
	Pos    int32                    `protobuf:"varint,2,opt,name=Pos,proto3" json:"Pos,omitempty"`                                           // 扣钱位置
	Coin   int64                    `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`                                         // 金额
	ReCoin int64                    `protobuf:"varint,4,opt,name=ReCoin,proto3" json:"ReCoin,omitempty"`                                     // 剩余金额
}

func (x *SCBlackJackBuy) Reset() {
	*x = SCBlackJackBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackBuy) ProtoMessage() {}

func (x *SCBlackJackBuy) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackBuy.ProtoReflect.Descriptor instead.
func (*SCBlackJackBuy) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{11}
}

func (x *SCBlackJackBuy) GetCode() SCBlackJackBuy_ErrorCode {
	if x != nil {
		return x.Code
	}
	return SCBlackJackBuy_Success
}

func (x *SCBlackJackBuy) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCBlackJackBuy) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCBlackJackBuy) GetReCoin() int64 {
	if x != nil {
		return x.ReCoin
	}
	return 0
}

// SC_PLAYER_OPERATE
type SCBlackJackPlayerOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    SCBlackJackPlayerOperate_ErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=blackjack.SCBlackJackPlayerOperate_ErrorCode" json:"Code,omitempty"` // 错误码
	Operate int32                              `protobuf:"varint,2,opt,name=Operate,proto3" json:"Operate,omitempty"`                                             // 操作码
	//    SubBet      = 0  下注
	//    SubBuy      = 1  买保险
	//    SubFenPai   = 2  分牌
	//    SubDouble   = 3  双倍
	//    SubSkip     = 4  停牌
	//    SubOuts     = 5  要牌
	//    SubLeave    = 6  离开
	//    SubSit      = 7  坐下
	//    SubSkipLeft = 40 左侧停牌(分牌后玩家有两堆牌)
	//    SubSkipBomb = 41 爆牌停牌
	Pos     int32             `protobuf:"varint,3,opt,name=Pos,proto3" json:"Pos,omitempty"`         // 位置
	Cards   []*BlackJackCards `protobuf:"bytes,4,rep,name=Cards,proto3" json:"Cards,omitempty"`      // 牌(只有新增的牌)
	ReCoin  int64             `protobuf:"varint,5,opt,name=ReCoin,proto3" json:"ReCoin,omitempty"`   // 剩余金额 （分牌后剩余金额）
	Num     int32             `protobuf:"varint,6,opt,name=Num,proto3" json:"Num,omitempty"`         // 剩余牌数
	BetCoin int64             `protobuf:"varint,7,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"` // 分数变化
	// 给机器人发的数据
	CardsStr string `protobuf:"bytes,8,opt,name=CardsStr,proto3" json:"CardsStr,omitempty"`
	Seat     int32  `protobuf:"varint,9,opt,name=Seat,proto3" json:"Seat,omitempty"`
}

func (x *SCBlackJackPlayerOperate) Reset() {
	*x = SCBlackJackPlayerOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackPlayerOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackPlayerOperate) ProtoMessage() {}

func (x *SCBlackJackPlayerOperate) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackPlayerOperate.ProtoReflect.Descriptor instead.
func (*SCBlackJackPlayerOperate) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{12}
}

func (x *SCBlackJackPlayerOperate) GetCode() SCBlackJackPlayerOperate_ErrorCode {
	if x != nil {
		return x.Code
	}
	return SCBlackJackPlayerOperate_Success
}

func (x *SCBlackJackPlayerOperate) GetOperate() int32 {
	if x != nil {
		return x.Operate
	}
	return 0
}

func (x *SCBlackJackPlayerOperate) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCBlackJackPlayerOperate) GetCards() []*BlackJackCards {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCBlackJackPlayerOperate) GetReCoin() int64 {
	if x != nil {
		return x.ReCoin
	}
	return 0
}

func (x *SCBlackJackPlayerOperate) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SCBlackJackPlayerOperate) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

func (x *SCBlackJackPlayerOperate) GetCardsStr() string {
	if x != nil {
		return x.CardsStr
	}
	return ""
}

func (x *SCBlackJackPlayerOperate) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

// SC_NOTIFY_OPERATE
type SCBlackJackNotifyOperate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos     int32  `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`         // 玩家位置
	Cards   string `protobuf:"bytes,2,opt,name=Cards,proto3" json:"Cards,omitempty"`      // 场上明牌
	Seat    int32  `protobuf:"varint,3,opt,name=Seat,proto3" json:"Seat,omitempty"`       // 玩家座位号
	LastPos int32  `protobuf:"varint,4,opt,name=LastPos,proto3" json:"LastPos,omitempty"` //上一个玩家位置
}

func (x *SCBlackJackNotifyOperate) Reset() {
	*x = SCBlackJackNotifyOperate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackNotifyOperate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackNotifyOperate) ProtoMessage() {}

func (x *SCBlackJackNotifyOperate) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackNotifyOperate.ProtoReflect.Descriptor instead.
func (*SCBlackJackNotifyOperate) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{13}
}

func (x *SCBlackJackNotifyOperate) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SCBlackJackNotifyOperate) GetCards() string {
	if x != nil {
		return x.Cards
	}
	return ""
}

func (x *SCBlackJackNotifyOperate) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCBlackJackNotifyOperate) GetLastPos() int32 {
	if x != nil {
		return x.LastPos
	}
	return 0
}

// SC_NOTIFY_CARDS
type SCBlackJackNotifyCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards *BlackJackCards `protobuf:"bytes,1,opt,name=Cards,proto3" json:"Cards,omitempty"` // 牌型信息
	Num   int32           `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`    // 剩余牌数
}

func (x *SCBlackJackNotifyCards) Reset() {
	*x = SCBlackJackNotifyCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackNotifyCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackNotifyCards) ProtoMessage() {}

func (x *SCBlackJackNotifyCards) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackNotifyCards.ProtoReflect.Descriptor instead.
func (*SCBlackJackNotifyCards) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{14}
}

func (x *SCBlackJackNotifyCards) GetCards() *BlackJackCards {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCBlackJackNotifyCards) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type BlackJackPlayerEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos       int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`             // 位置
	LeftGain  int64 `protobuf:"varint,2,opt,name=LeftGain,proto3" json:"LeftGain,omitempty"`   // 左比牌输赢分
	RightGain int64 `protobuf:"varint,3,opt,name=RightGain,proto3" json:"RightGain,omitempty"` // 右比牌输赢分
	Gain      int64 `protobuf:"varint,4,opt,name=Gain,proto3" json:"Gain,omitempty"`           // 总输赢分
	Coin      int64 `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`           // 剩余分
	IsDouble  bool  `protobuf:"varint,6,opt,name=IsDouble,proto3" json:"IsDouble,omitempty"`   // 是否双倍
}

func (x *BlackJackPlayerEnd) Reset() {
	*x = BlackJackPlayerEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackJackPlayerEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackJackPlayerEnd) ProtoMessage() {}

func (x *BlackJackPlayerEnd) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackJackPlayerEnd.ProtoReflect.Descriptor instead.
func (*BlackJackPlayerEnd) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{15}
}

func (x *BlackJackPlayerEnd) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *BlackJackPlayerEnd) GetLeftGain() int64 {
	if x != nil {
		return x.LeftGain
	}
	return 0
}

func (x *BlackJackPlayerEnd) GetRightGain() int64 {
	if x != nil {
		return x.RightGain
	}
	return 0
}

func (x *BlackJackPlayerEnd) GetGain() int64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

func (x *BlackJackPlayerEnd) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *BlackJackPlayerEnd) GetIsDouble() bool {
	if x != nil {
		return x.IsDouble
	}
	return false
}

// SC_END
// SC_BUY_END
type SCBlackJackEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players     []*BlackJackPlayerEnd `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`          // 玩家结算信息
	IsBlackJack bool                  `protobuf:"varint,2,opt,name=IsBlackJack,proto3" json:"IsBlackJack,omitempty"` // 庄家是黑杰克
}

func (x *SCBlackJackEnd) Reset() {
	*x = SCBlackJackEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackEnd) ProtoMessage() {}

func (x *SCBlackJackEnd) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackEnd.ProtoReflect.Descriptor instead.
func (*SCBlackJackEnd) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{16}
}

func (x *SCBlackJackEnd) GetPlayers() []*BlackJackPlayerEnd {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCBlackJackEnd) GetIsBlackJack() bool {
	if x != nil {
		return x.IsBlackJack
	}
	return false
}

// SC_SIT
type SCBlackJackSit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code SCBlackJackSit_ErrorCode `protobuf:"varint,1,opt,name=Code,proto3,enum=blackjack.SCBlackJackSit_ErrorCode" json:"Code,omitempty"` // 错误码
}

func (x *SCBlackJackSit) Reset() {
	*x = SCBlackJackSit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBlackJackSit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBlackJackSit) ProtoMessage() {}

func (x *SCBlackJackSit) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBlackJackSit.ProtoReflect.Descriptor instead.
func (*SCBlackJackSit) Descriptor() ([]byte, []int) {
	return file_blackjack_proto_rawDescGZIP(), []int{17}
}

func (x *SCBlackJackSit) GetCode() SCBlackJackSit_ErrorCode {
	if x != nil {
		return x.Code
	}
	return SCBlackJackSit_Success
}

var File_blackjack_proto protoreflect.FileDescriptor

var file_blackjack_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x0d,
	0x43, 0x53, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x4f, 0x50, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbc, 0x01,
	0x0a, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0xa4, 0x04, 0x0a,
	0x0f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6f, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0xaf, 0x04, 0x0a, 0x13, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a,
	0x61, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d,
	0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e,
	0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x78, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x16, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61,
	0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22,
	0x45, 0x0a, 0x15, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x53, 0x43, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x6f, 0x73, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f,
	0x73, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x50, 0x6f, 0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x42, 0x65, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x50, 0x6f, 0x73, 0x10,
	0x03, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b,
	0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x65, 0x61, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0f, 0x53, 0x43, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05,
	0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x05, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x22,
	0x28, 0x0a, 0x14, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x42, 0x75, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x53, 0x43,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x79, 0x12, 0x37, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61,
	0x63, 0x6b, 0x42, 0x75, 0x79, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72,
	0x72, 0x50, 0x6f, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x42, 0x75, 0x79, 0x10,
	0x03, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x2f, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61,
	0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x52, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x65,
	0x61, 0x74, 0x22, 0x3c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x72,
	0x50, 0x6f, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x4f, 0x70, 0x10, 0x03,
	0x22, 0x70, 0x0a, 0x18, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x66, 0x74,
	0x47, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x66, 0x74,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x69, 0x67, 0x68, 0x74, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x0e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a,
	0x61, 0x63, 0x6b, 0x22, 0x6f, 0x0a, 0x0e, 0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61,
	0x63, 0x6b, 0x53, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x2e,
	0x53, 0x43, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x24,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x50,
	0x6f, 0x73, 0x10, 0x01, 0x2a, 0xe9, 0x02, 0x0a, 0x11, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61,
	0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4a, 0x61, 0x63, 0x6b, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0xc8, 0x29, 0x12, 0x11, 0x0a,
	0x0c, 0x53, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xc9, 0x29,
	0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0xca, 0x29, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0xcb, 0x29, 0x12, 0x13, 0x0a, 0x0e,
	0x53, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xcc,
	0x29, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x42,
	0x45, 0x54, 0x10, 0xcd, 0x29, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x50, 0x6f, 0x73, 0x10, 0xce, 0x29, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x43, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x10, 0xcf, 0x29, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xd0, 0x29, 0x12, 0x12, 0x0a, 0x0d, 0x53,
	0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xd1, 0x29, 0x12,
	0x16, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x10, 0xd3, 0x29, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0xd4, 0x29, 0x12,
	0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x53, 0x10, 0xd5, 0x29, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0xd6, 0x29, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0xd7, 0x29, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x43, 0x5f, 0x53, 0x49, 0x54, 0x10, 0xd8, 0x29,
	0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blackjack_proto_rawDescOnce sync.Once
	file_blackjack_proto_rawDescData = file_blackjack_proto_rawDesc
)

func file_blackjack_proto_rawDescGZIP() []byte {
	file_blackjack_proto_rawDescOnce.Do(func() {
		file_blackjack_proto_rawDescData = protoimpl.X.CompressGZIP(file_blackjack_proto_rawDescData)
	})
	return file_blackjack_proto_rawDescData
}

var file_blackjack_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_blackjack_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_blackjack_proto_goTypes = []interface{}{
	(BlackJackPacketID)(0),                  // 0: blackjack.BlackJackPacketID
	(SCBlackJackPlayerBet_ErrorCode)(0),     // 1: blackjack.SCBlackJackPlayerBet.ErrorCode
	(SCBlackJackBuy_ErrorCode)(0),           // 2: blackjack.SCBlackJackBuy.ErrorCode
	(SCBlackJackPlayerOperate_ErrorCode)(0), // 3: blackjack.SCBlackJackPlayerOperate.ErrorCode
	(SCBlackJackSit_ErrorCode)(0),           // 4: blackjack.SCBlackJackSit.ErrorCode
	(*CSBlackJackOP)(nil),                   // 5: blackjack.CSBlackJackOP
	(*BlackJackCards)(nil),                  // 6: blackjack.BlackJackCards
	(*BlackJackPlayer)(nil),                 // 7: blackjack.BlackJackPlayer
	(*SCBlackJackRoomInfo)(nil),             // 8: blackjack.SCBlackJackRoomInfo
	(*SCBlackJackPlayerEnter)(nil),          // 9: blackjack.SCBlackJackPlayerEnter
	(*SCBlackJackPlayerLeave)(nil),          // 10: blackjack.SCBlackJackPlayerLeave
	(*SCBlackJackRoomStatus)(nil),           // 11: blackjack.SCBlackJackRoomStatus
	(*SCBlackJackPlayerBet)(nil),            // 12: blackjack.SCBlackJackPlayerBet
	(*SCBlackJackPos)(nil),                  // 13: blackjack.SCBlackJackPos
	(*SCBlackJackDeal)(nil),                 // 14: blackjack.SCBlackJackDeal
	(*SCBlackJackNotifyBuy)(nil),            // 15: blackjack.SCBlackJackNotifyBuy
	(*SCBlackJackBuy)(nil),                  // 16: blackjack.SCBlackJackBuy
	(*SCBlackJackPlayerOperate)(nil),        // 17: blackjack.SCBlackJackPlayerOperate
	(*SCBlackJackNotifyOperate)(nil),        // 18: blackjack.SCBlackJackNotifyOperate
	(*SCBlackJackNotifyCards)(nil),          // 19: blackjack.SCBlackJackNotifyCards
	(*BlackJackPlayerEnd)(nil),              // 20: blackjack.BlackJackPlayerEnd
	(*SCBlackJackEnd)(nil),                  // 21: blackjack.SCBlackJackEnd
	(*SCBlackJackSit)(nil),                  // 22: blackjack.SCBlackJackSit
}
var file_blackjack_proto_depIdxs = []int32{
	6,  // 0: blackjack.BlackJackPlayer.Cards:type_name -> blackjack.BlackJackCards
	7,  // 1: blackjack.SCBlackJackRoomInfo.Players:type_name -> blackjack.BlackJackPlayer
	7,  // 2: blackjack.SCBlackJackPlayerEnter.Player:type_name -> blackjack.BlackJackPlayer
	1,  // 3: blackjack.SCBlackJackPlayerBet.Code:type_name -> blackjack.SCBlackJackPlayerBet.ErrorCode
	6,  // 4: blackjack.SCBlackJackDeal.Seats:type_name -> blackjack.BlackJackCards
	2,  // 5: blackjack.SCBlackJackBuy.Code:type_name -> blackjack.SCBlackJackBuy.ErrorCode
	3,  // 6: blackjack.SCBlackJackPlayerOperate.Code:type_name -> blackjack.SCBlackJackPlayerOperate.ErrorCode
	6,  // 7: blackjack.SCBlackJackPlayerOperate.Cards:type_name -> blackjack.BlackJackCards
	6,  // 8: blackjack.SCBlackJackNotifyCards.Cards:type_name -> blackjack.BlackJackCards
	20, // 9: blackjack.SCBlackJackEnd.Players:type_name -> blackjack.BlackJackPlayerEnd
	4,  // 10: blackjack.SCBlackJackSit.Code:type_name -> blackjack.SCBlackJackSit.ErrorCode
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_blackjack_proto_init() }
func file_blackjack_proto_init() {
	if File_blackjack_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blackjack_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSBlackJackOP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackJackCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackJackPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackPlayerEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackPlayerLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackRoomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackPlayerBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackNotifyBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackPlayerOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackNotifyOperate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackNotifyCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackJackPlayerEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBlackJackSit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blackjack_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackjack_proto_goTypes,
		DependencyIndexes: file_blackjack_proto_depIdxs,
		EnumInfos:         file_blackjack_proto_enumTypes,
		MessageInfos:      file_blackjack_proto_msgTypes,
	}.Build()
	File_blackjack_proto = out.File
	file_blackjack_proto_rawDesc = nil
	file_blackjack_proto_goTypes = nil
	file_blackjack_proto_depIdxs = nil
}
