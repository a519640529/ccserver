// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: hundredscene.proto

package gamehall

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode_Hundred int32

const (
	OpResultCode_Hundred_OPRC_Sucess_Hundred              OpResultCode_Hundred = 0    //成功
	OpResultCode_Hundred_OPRC_Error_Hundred               OpResultCode_Hundred = 1    //失败
	OpResultCode_Hundred_OPRC_YourResVerIsLow_Hundred     OpResultCode_Hundred = 1044 //资源版本过低
	OpResultCode_Hundred_OPRC_YourAppVerIsLow_Hundred     OpResultCode_Hundred = 1045 //APK版本过低
	OpResultCode_Hundred_OPRC_RoomHadClosed_Hundred       OpResultCode_Hundred = 1053 //牌局已结束，正在结算
	OpResultCode_Hundred_OPRC_SceneServerMaintain_Hundred OpResultCode_Hundred = 1054 //服务器维护中,请稍后创建
	OpResultCode_Hundred_OPRC_CoinNotEnough_Hundred       OpResultCode_Hundred = 1056 //金币不够
	OpResultCode_Hundred_OPRC_CoinTooMore_Hundred         OpResultCode_Hundred = 1058 //金币太多了,请换高倍场
	OpResultCode_Hundred_OPRC_RoomGameTimes_Hundred       OpResultCode_Hundred = 1103 //超过最大游戏次数
	OpResultCode_Hundred_OPRC_MustBindPromoter_Hundred    OpResultCode_Hundred = 1113 //必须绑定推广员
)

// Enum value maps for OpResultCode_Hundred.
var (
	OpResultCode_Hundred_name = map[int32]string{
		0:    "OPRC_Sucess_Hundred",
		1:    "OPRC_Error_Hundred",
		1044: "OPRC_YourResVerIsLow_Hundred",
		1045: "OPRC_YourAppVerIsLow_Hundred",
		1053: "OPRC_RoomHadClosed_Hundred",
		1054: "OPRC_SceneServerMaintain_Hundred",
		1056: "OPRC_CoinNotEnough_Hundred",
		1058: "OPRC_CoinTooMore_Hundred",
		1103: "OPRC_RoomGameTimes_Hundred",
		1113: "OPRC_MustBindPromoter_Hundred",
	}
	OpResultCode_Hundred_value = map[string]int32{
		"OPRC_Sucess_Hundred":              0,
		"OPRC_Error_Hundred":               1,
		"OPRC_YourResVerIsLow_Hundred":     1044,
		"OPRC_YourAppVerIsLow_Hundred":     1045,
		"OPRC_RoomHadClosed_Hundred":       1053,
		"OPRC_SceneServerMaintain_Hundred": 1054,
		"OPRC_CoinNotEnough_Hundred":       1056,
		"OPRC_CoinTooMore_Hundred":         1058,
		"OPRC_RoomGameTimes_Hundred":       1103,
		"OPRC_MustBindPromoter_Hundred":    1113,
	}
)

func (x OpResultCode_Hundred) Enum() *OpResultCode_Hundred {
	p := new(OpResultCode_Hundred)
	*p = x
	return p
}

func (x OpResultCode_Hundred) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode_Hundred) Descriptor() protoreflect.EnumDescriptor {
	return file_hundredscene_proto_enumTypes[0].Descriptor()
}

func (OpResultCode_Hundred) Type() protoreflect.EnumType {
	return &file_hundredscene_proto_enumTypes[0]
}

func (x OpResultCode_Hundred) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode_Hundred.Descriptor instead.
func (OpResultCode_Hundred) EnumDescriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{0}
}

//百人场操作消息id  2380-2399
type HundredScenePacketID int32

const (
	HundredScenePacketID_PACKET_HundredScene_ZERO            HundredScenePacketID = 0 // 弃用消息号
	HundredScenePacketID_PACKET_CS_HUNDREDSCENE_OP           HundredScenePacketID = 2380
	HundredScenePacketID_PACKET_SC_HUNDREDSCENE_OP           HundredScenePacketID = 2381
	HundredScenePacketID_PACKET_CS_HUNDREDSCENE_GETPLAYERNUM HundredScenePacketID = 2382
	HundredScenePacketID_PACKET_SC_HUNDREDSCENE_GETPLAYERNUM HundredScenePacketID = 2383
	HundredScenePacketID_PACKET_CS_GAMEJACKPOT               HundredScenePacketID = 2384
	HundredScenePacketID_PACKET_SC_GAMEJACKPOT               HundredScenePacketID = 2385
	HundredScenePacketID_PACKET_CS_GAMEHISTORYINFO           HundredScenePacketID = 2386
	HundredScenePacketID_PACKET_SC_GAMEPLAYERHISTORY         HundredScenePacketID = 2387
	HundredScenePacketID_PACKET_SC_GAMEBIGWINHISTORY         HundredScenePacketID = 2388
	HundredScenePacketID_PACKET_BD_GAMEJACKPOT               HundredScenePacketID = 2389 //游戏内广播奖池
)

// Enum value maps for HundredScenePacketID.
var (
	HundredScenePacketID_name = map[int32]string{
		0:    "PACKET_HundredScene_ZERO",
		2380: "PACKET_CS_HUNDREDSCENE_OP",
		2381: "PACKET_SC_HUNDREDSCENE_OP",
		2382: "PACKET_CS_HUNDREDSCENE_GETPLAYERNUM",
		2383: "PACKET_SC_HUNDREDSCENE_GETPLAYERNUM",
		2384: "PACKET_CS_GAMEJACKPOT",
		2385: "PACKET_SC_GAMEJACKPOT",
		2386: "PACKET_CS_GAMEHISTORYINFO",
		2387: "PACKET_SC_GAMEPLAYERHISTORY",
		2388: "PACKET_SC_GAMEBIGWINHISTORY",
		2389: "PACKET_BD_GAMEJACKPOT",
	}
	HundredScenePacketID_value = map[string]int32{
		"PACKET_HundredScene_ZERO":            0,
		"PACKET_CS_HUNDREDSCENE_OP":           2380,
		"PACKET_SC_HUNDREDSCENE_OP":           2381,
		"PACKET_CS_HUNDREDSCENE_GETPLAYERNUM": 2382,
		"PACKET_SC_HUNDREDSCENE_GETPLAYERNUM": 2383,
		"PACKET_CS_GAMEJACKPOT":               2384,
		"PACKET_SC_GAMEJACKPOT":               2385,
		"PACKET_CS_GAMEHISTORYINFO":           2386,
		"PACKET_SC_GAMEPLAYERHISTORY":         2387,
		"PACKET_SC_GAMEBIGWINHISTORY":         2388,
		"PACKET_BD_GAMEJACKPOT":               2389,
	}
)

func (x HundredScenePacketID) Enum() *HundredScenePacketID {
	p := new(HundredScenePacketID)
	*p = x
	return p
}

func (x HundredScenePacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HundredScenePacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_hundredscene_proto_enumTypes[1].Descriptor()
}

func (HundredScenePacketID) Type() protoreflect.EnumType {
	return &file_hundredscene_proto_enumTypes[1]
}

func (x HundredScenePacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HundredScenePacketID.Descriptor instead.
func (HundredScenePacketID) EnumDescriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{1}
}

//玩家进入房间
type CSHundredSceneOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OpType   int32   `protobuf:"varint,2,opt,name=OpType,proto3" json:"OpType,omitempty"` //0:进入 1:离开 2:换桌
	OpParams []int32 `protobuf:"varint,3,rep,packed,name=OpParams,proto3" json:"OpParams,omitempty"`
	ApkVer   int32   `protobuf:"varint,4,opt,name=ApkVer,proto3" json:"ApkVer,omitempty"`
	ResVer   int32   `protobuf:"varint,5,opt,name=ResVer,proto3" json:"ResVer,omitempty"`
}

func (x *CSHundredSceneOp) Reset() {
	*x = CSHundredSceneOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHundredSceneOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHundredSceneOp) ProtoMessage() {}

func (x *CSHundredSceneOp) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHundredSceneOp.ProtoReflect.Descriptor instead.
func (*CSHundredSceneOp) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{0}
}

func (x *CSHundredSceneOp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CSHundredSceneOp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *CSHundredSceneOp) GetOpParams() []int32 {
	if x != nil {
		return x.OpParams
	}
	return nil
}

func (x *CSHundredSceneOp) GetApkVer() int32 {
	if x != nil {
		return x.ApkVer
	}
	return 0
}

func (x *CSHundredSceneOp) GetResVer() int32 {
	if x != nil {
		return x.ResVer
	}
	return 0
}

type SCHundredSceneOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode       OpResultCode_Hundred `protobuf:"varint,1,opt,name=OpCode,proto3,enum=gamehall.OpResultCode_Hundred" json:"OpCode,omitempty"` //操作码
	Id           int32                `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                                            //
	OpType       int32                `protobuf:"varint,3,opt,name=OpType,proto3" json:"OpType,omitempty"`
	OpParams     []int32              `protobuf:"varint,4,rep,packed,name=OpParams,proto3" json:"OpParams,omitempty"`
	MinApkVer    int32                `protobuf:"varint,5,opt,name=MinApkVer,proto3" json:"MinApkVer,omitempty"`       //最低apk版本号
	LatestApkVer int32                `protobuf:"varint,6,opt,name=LatestApkVer,proto3" json:"LatestApkVer,omitempty"` //最新apk版本号
	MinResVer    int32                `protobuf:"varint,7,opt,name=MinResVer,proto3" json:"MinResVer,omitempty"`       //最低资源版本号
	LatestResVer int32                `protobuf:"varint,8,opt,name=LatestResVer,proto3" json:"LatestResVer,omitempty"` //最新资源版本号
}

func (x *SCHundredSceneOp) Reset() {
	*x = SCHundredSceneOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredSceneOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredSceneOp) ProtoMessage() {}

func (x *SCHundredSceneOp) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredSceneOp.ProtoReflect.Descriptor instead.
func (*SCHundredSceneOp) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{1}
}

func (x *SCHundredSceneOp) GetOpCode() OpResultCode_Hundred {
	if x != nil {
		return x.OpCode
	}
	return OpResultCode_Hundred_OPRC_Sucess_Hundred
}

func (x *SCHundredSceneOp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCHundredSceneOp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *SCHundredSceneOp) GetOpParams() []int32 {
	if x != nil {
		return x.OpParams
	}
	return nil
}

func (x *SCHundredSceneOp) GetMinApkVer() int32 {
	if x != nil {
		return x.MinApkVer
	}
	return 0
}

func (x *SCHundredSceneOp) GetLatestApkVer() int32 {
	if x != nil {
		return x.LatestApkVer
	}
	return 0
}

func (x *SCHundredSceneOp) GetMinResVer() int32 {
	if x != nil {
		return x.MinResVer
	}
	return 0
}

func (x *SCHundredSceneOp) GetLatestResVer() int32 {
	if x != nil {
		return x.LatestResVer
	}
	return 0
}

//获取场次人数
type CSHundredSceneGetPlayerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId    int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`       //游戏ID
	GameModel int32 `protobuf:"varint,2,opt,name=GameModel,proto3" json:"GameModel,omitempty"` //游戏模式
}

func (x *CSHundredSceneGetPlayerNum) Reset() {
	*x = CSHundredSceneGetPlayerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHundredSceneGetPlayerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHundredSceneGetPlayerNum) ProtoMessage() {}

func (x *CSHundredSceneGetPlayerNum) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHundredSceneGetPlayerNum.ProtoReflect.Descriptor instead.
func (*CSHundredSceneGetPlayerNum) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{2}
}

func (x *CSHundredSceneGetPlayerNum) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *CSHundredSceneGetPlayerNum) GetGameModel() int32 {
	if x != nil {
		return x.GameModel
	}
	return 0
}

//PACKET_SC_HUNDREDSCENE_GETPLAYERNUM
type SCHundredSceneGetPlayerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums []int32 `protobuf:"varint,1,rep,packed,name=Nums,proto3" json:"Nums,omitempty"` //场次人数
}

func (x *SCHundredSceneGetPlayerNum) Reset() {
	*x = SCHundredSceneGetPlayerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredSceneGetPlayerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredSceneGetPlayerNum) ProtoMessage() {}

func (x *SCHundredSceneGetPlayerNum) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredSceneGetPlayerNum.ProtoReflect.Descriptor instead.
func (*SCHundredSceneGetPlayerNum) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{3}
}

func (x *SCHundredSceneGetPlayerNum) GetNums() []int32 {
	if x != nil {
		return x.Nums
	}
	return nil
}

//PACKET_CS_GAMEJACKPOT
type CSHundredSceneGetGameJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSHundredSceneGetGameJackpot) Reset() {
	*x = CSHundredSceneGetGameJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHundredSceneGetGameJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHundredSceneGetGameJackpot) ProtoMessage() {}

func (x *CSHundredSceneGetGameJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHundredSceneGetGameJackpot.ProtoReflect.Descriptor instead.
func (*CSHundredSceneGetGameJackpot) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{4}
}

type GameJackpotFundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameFreeId  int32 `protobuf:"varint,1,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	JackPotFund int64 `protobuf:"varint,2,opt,name=JackPotFund,proto3" json:"JackPotFund,omitempty"`
}

func (x *GameJackpotFundInfo) Reset() {
	*x = GameJackpotFundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameJackpotFundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameJackpotFundInfo) ProtoMessage() {}

func (x *GameJackpotFundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameJackpotFundInfo.ProtoReflect.Descriptor instead.
func (*GameJackpotFundInfo) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{5}
}

func (x *GameJackpotFundInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *GameJackpotFundInfo) GetJackPotFund() int64 {
	if x != nil {
		return x.JackPotFund
	}
	return 0
}

//PACKET_SC_GAMEJACKPOT
type SCHundredSceneGetGameJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameJackpotFund []*GameJackpotFundInfo `protobuf:"bytes,1,rep,name=GameJackpotFund,proto3" json:"GameJackpotFund,omitempty"` //奖池列表
}

func (x *SCHundredSceneGetGameJackpot) Reset() {
	*x = SCHundredSceneGetGameJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredSceneGetGameJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredSceneGetGameJackpot) ProtoMessage() {}

func (x *SCHundredSceneGetGameJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredSceneGetGameJackpot.ProtoReflect.Descriptor instead.
func (*SCHundredSceneGetGameJackpot) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{6}
}

func (x *SCHundredSceneGetGameJackpot) GetGameJackpotFund() []*GameJackpotFundInfo {
	if x != nil {
		return x.GameJackpotFund
	}
	return nil
}

//奖池 PACKET_BD_GAMEJACKPOT
type BroadcastGameJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JackpotFund []int64 `protobuf:"varint,1,rep,packed,name=JackpotFund,proto3" json:"JackpotFund,omitempty"` //当前奖池金额
	GameFreeId  int32   `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`          //游戏id
}

func (x *BroadcastGameJackpot) Reset() {
	*x = BroadcastGameJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastGameJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastGameJackpot) ProtoMessage() {}

func (x *BroadcastGameJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastGameJackpot.ProtoReflect.Descriptor instead.
func (*BroadcastGameJackpot) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{7}
}

func (x *BroadcastGameJackpot) GetJackpotFund() []int64 {
	if x != nil {
		return x.JackpotFund
	}
	return nil
}

func (x *BroadcastGameJackpot) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//获取历史记录及爆奖记录
//PACKET_CS_GAMEHISTORYINFO
type CSHundredSceneGetHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId           int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`                     //游戏ID
	GameHistoryModel int32 `protobuf:"varint,2,opt,name=GameHistoryModel,proto3" json:"GameHistoryModel,omitempty"` //1.历史记录；2.爆奖记录
}

func (x *CSHundredSceneGetHistoryInfo) Reset() {
	*x = CSHundredSceneGetHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHundredSceneGetHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHundredSceneGetHistoryInfo) ProtoMessage() {}

func (x *CSHundredSceneGetHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHundredSceneGetHistoryInfo.ProtoReflect.Descriptor instead.
func (*CSHundredSceneGetHistoryInfo) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{8}
}

func (x *CSHundredSceneGetHistoryInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *CSHundredSceneGetHistoryInfo) GetGameHistoryModel() int32 {
	if x != nil {
		return x.GameHistoryModel
	}
	return 0
}

// 游戏记录信息
type GameHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNumber  string `protobuf:"bytes,1,opt,name=GameNumber,proto3" json:"GameNumber,omitempty"`    // 游戏编号
	CreatedTime int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"` // 时间
	Multiple    int64  `protobuf:"varint,3,opt,name=Multiple,proto3" json:"Multiple,omitempty"`       //下注倍率
	Hash        string `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`                //Hash
}

func (x *GameHistoryInfo) Reset() {
	*x = GameHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHistoryInfo) ProtoMessage() {}

func (x *GameHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHistoryInfo.ProtoReflect.Descriptor instead.
func (*GameHistoryInfo) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{9}
}

func (x *GameHistoryInfo) GetGameNumber() string {
	if x != nil {
		return x.GameNumber
	}
	return ""
}

func (x *GameHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *GameHistoryInfo) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *GameHistoryInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 玩家记录信息
type PlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID          string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                    // 操作id
	CreatedTime     int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`         // 时间
	TotalBetValue   int64  `protobuf:"varint,3,opt,name=TotalBetValue,proto3" json:"TotalBetValue,omitempty"`     // 总下注
	TotalPriceValue int64  `protobuf:"varint,4,opt,name=TotalPriceValue,proto3" json:"TotalPriceValue,omitempty"` // 总赢分
	IsFree          bool   `protobuf:"varint,5,opt,name=IsFree,proto3" json:"IsFree,omitempty"`                   // 是否免费
	TotalBonusValue int64  `protobuf:"varint,6,opt,name=TotalBonusValue,proto3" json:"TotalBonusValue,omitempty"` // 是否免费
	Multiple        int64  `protobuf:"varint,7,opt,name=Multiple,proto3" json:"Multiple,omitempty"`               //下注倍率
}

func (x *PlayerHistoryInfo) Reset() {
	*x = PlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHistoryInfo) ProtoMessage() {}

func (x *PlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*PlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *PlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *PlayerHistoryInfo) GetTotalBetValue() int64 {
	if x != nil {
		return x.TotalBetValue
	}
	return 0
}

func (x *PlayerHistoryInfo) GetTotalPriceValue() int64 {
	if x != nil {
		return x.TotalPriceValue
	}
	return 0
}

func (x *PlayerHistoryInfo) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *PlayerHistoryInfo) GetTotalBonusValue() int64 {
	if x != nil {
		return x.TotalBonusValue
	}
	return 0
}

func (x *PlayerHistoryInfo) GetMultiple() int64 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

// 玩家记录
// PACKET_SC_GAMEPLAYERHISTORY
type SCPlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*PlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
	GameHistory   []*GameHistoryInfo   `protobuf:"bytes,2,rep,name=GameHistory,proto3" json:"GameHistory,omitempty"`
}

func (x *SCPlayerHistory) Reset() {
	*x = SCPlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCPlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPlayerHistory) ProtoMessage() {}

func (x *SCPlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPlayerHistory.ProtoReflect.Descriptor instead.
func (*SCPlayerHistory) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{11}
}

func (x *SCPlayerHistory) GetPlayerHistory() []*PlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

func (x *SCPlayerHistory) GetGameHistory() []*GameHistoryInfo {
	if x != nil {
		return x.GameHistory
	}
	return nil
}

// 大奖记录信息
type BigWinHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID        string  `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                // 操作id
	CreatedTime   int64   `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`     // 时间
	BaseBet       int64   `protobuf:"varint,3,opt,name=BaseBet,proto3" json:"BaseBet,omitempty"`             // 单条线下注（底注）
	PriceValue    int64   `protobuf:"varint,4,opt,name=PriceValue,proto3" json:"PriceValue,omitempty"`       // 大奖赢分
	UserName      string  `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`            // 昵称
	IsVirtualData bool    `protobuf:"varint,6,opt,name=IsVirtualData,proto3" json:"IsVirtualData,omitempty"` // 是否为虚拟数据
	TotalBet      int64   `protobuf:"varint,7,opt,name=TotalBet,proto3" json:"TotalBet,omitempty"`           // 总下注
	Cards         []int32 `protobuf:"varint,8,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          //牌型
}

func (x *BigWinHistoryInfo) Reset() {
	*x = BigWinHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigWinHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigWinHistoryInfo) ProtoMessage() {}

func (x *BigWinHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigWinHistoryInfo.ProtoReflect.Descriptor instead.
func (*BigWinHistoryInfo) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{12}
}

func (x *BigWinHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *BigWinHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *BigWinHistoryInfo) GetBaseBet() int64 {
	if x != nil {
		return x.BaseBet
	}
	return 0
}

func (x *BigWinHistoryInfo) GetPriceValue() int64 {
	if x != nil {
		return x.PriceValue
	}
	return 0
}

func (x *BigWinHistoryInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BigWinHistoryInfo) GetIsVirtualData() bool {
	if x != nil {
		return x.IsVirtualData
	}
	return false
}

func (x *BigWinHistoryInfo) GetTotalBet() int64 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *BigWinHistoryInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 大奖记录
type SCBigWinHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BigWinHistory []*BigWinHistoryInfo `protobuf:"bytes,1,rep,name=BigWinHistory,proto3" json:"BigWinHistory,omitempty"`
	GameId        int32                `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
}

func (x *SCBigWinHistory) Reset() {
	*x = SCBigWinHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredscene_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBigWinHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBigWinHistory) ProtoMessage() {}

func (x *SCBigWinHistory) ProtoReflect() protoreflect.Message {
	mi := &file_hundredscene_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBigWinHistory.ProtoReflect.Descriptor instead.
func (*SCBigWinHistory) Descriptor() ([]byte, []int) {
	return file_hundredscene_proto_rawDescGZIP(), []int{13}
}

func (x *SCBigWinHistory) GetBigWinHistory() []*BigWinHistoryInfo {
	if x != nil {
		return x.BigWinHistory
	}
	return nil
}

func (x *SCBigWinHistory) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

var File_hundredscene_proto protoreflect.FileDescriptor

var file_hundredscene_proto_rawDesc = []byte{
	0x0a, 0x12, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x22, 0x86,
	0x01, 0x0a, 0x10, 0x43, 0x53, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4f,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x6b, 0x56, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x70, 0x6b, 0x56, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x53, 0x43, 0x48, 0x75,
	0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x52, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41,
	0x70, 0x6b, 0x56, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e,
	0x41, 0x70, 0x6b, 0x56, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x6b, 0x56, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x6b, 0x56, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x56, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x1a,
	0x43, 0x53, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0x30, 0x0a, 0x1a, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x4e, 0x75,
	0x6d, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x53, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4a, 0x61, 0x63,
	0x6b, 0x50, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x4a, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x22, 0x67, 0x0a, 0x1c, 0x53,
	0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x46, 0x75, 0x6e, 0x64, 0x22, 0x58, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x1c, 0x43, 0x53, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x46, 0x72,
	0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x46, 0x72, 0x65, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x42,
	0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61,
	0x73, 0x65, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x73,
	0x65, 0x42, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x0f, 0x53, 0x43, 0x42, 0x69,
	0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x42,
	0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x42, 0x69,
	0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x2a, 0xda, 0x02, 0x0a, 0x14, 0x4f, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x48,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x59, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x49, 0x73, 0x4c, 0x6f, 0x77, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x10, 0x94, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x59, 0x6f, 0x75, 0x72,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x49, 0x73, 0x4c, 0x6f, 0x77, 0x5f, 0x48, 0x75, 0x6e, 0x64,
	0x72, 0x65, 0x64, 0x10, 0x95, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x52,
	0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x48, 0x75, 0x6e,
	0x64, 0x72, 0x65, 0x64, 0x10, 0x9d, 0x08, 0x12, 0x25, 0x0a, 0x20, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0x9e, 0x08, 0x12, 0x1f,
	0x0a, 0x1a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0xa0, 0x08, 0x12,
	0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x4d,
	0x6f, 0x72, 0x65, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0xa2, 0x08, 0x12, 0x1f,
	0x0a, 0x1a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x10, 0xcf, 0x08, 0x12,
	0x22, 0x0a, 0x1d, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x10, 0xd9, 0x08, 0x2a, 0x80, 0x03, 0x0a, 0x14, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x10, 0xcc, 0x12, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x10, 0xcd, 0x12, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4e, 0x55,
	0x4d, 0x10, 0xce, 0x12, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x48, 0x55, 0x4e, 0x44, 0x52, 0x45, 0x44, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x10, 0xcf, 0x12, 0x12, 0x1a,
	0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x10, 0xd0, 0x12, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4a, 0x41, 0x43, 0x4b,
	0x50, 0x4f, 0x54, 0x10, 0xd1, 0x12, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0xd2, 0x12, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xd3, 0x12, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x47, 0x57, 0x49, 0x4e,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xd4, 0x12, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x42, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4a, 0x41, 0x43, 0x4b,
	0x50, 0x4f, 0x54, 0x10, 0xd5, 0x12, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x67, 0x61, 0x6d, 0x65,
	0x68, 0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hundredscene_proto_rawDescOnce sync.Once
	file_hundredscene_proto_rawDescData = file_hundredscene_proto_rawDesc
)

func file_hundredscene_proto_rawDescGZIP() []byte {
	file_hundredscene_proto_rawDescOnce.Do(func() {
		file_hundredscene_proto_rawDescData = protoimpl.X.CompressGZIP(file_hundredscene_proto_rawDescData)
	})
	return file_hundredscene_proto_rawDescData
}

var file_hundredscene_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hundredscene_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_hundredscene_proto_goTypes = []interface{}{
	(OpResultCode_Hundred)(0),            // 0: gamehall.OpResultCode_Hundred
	(HundredScenePacketID)(0),            // 1: gamehall.HundredScenePacketID
	(*CSHundredSceneOp)(nil),             // 2: gamehall.CSHundredSceneOp
	(*SCHundredSceneOp)(nil),             // 3: gamehall.SCHundredSceneOp
	(*CSHundredSceneGetPlayerNum)(nil),   // 4: gamehall.CSHundredSceneGetPlayerNum
	(*SCHundredSceneGetPlayerNum)(nil),   // 5: gamehall.SCHundredSceneGetPlayerNum
	(*CSHundredSceneGetGameJackpot)(nil), // 6: gamehall.CSHundredSceneGetGameJackpot
	(*GameJackpotFundInfo)(nil),          // 7: gamehall.GameJackpotFundInfo
	(*SCHundredSceneGetGameJackpot)(nil), // 8: gamehall.SCHundredSceneGetGameJackpot
	(*BroadcastGameJackpot)(nil),         // 9: gamehall.BroadcastGameJackpot
	(*CSHundredSceneGetHistoryInfo)(nil), // 10: gamehall.CSHundredSceneGetHistoryInfo
	(*GameHistoryInfo)(nil),              // 11: gamehall.GameHistoryInfo
	(*PlayerHistoryInfo)(nil),            // 12: gamehall.PlayerHistoryInfo
	(*SCPlayerHistory)(nil),              // 13: gamehall.SCPlayerHistory
	(*BigWinHistoryInfo)(nil),            // 14: gamehall.BigWinHistoryInfo
	(*SCBigWinHistory)(nil),              // 15: gamehall.SCBigWinHistory
}
var file_hundredscene_proto_depIdxs = []int32{
	0,  // 0: gamehall.SCHundredSceneOp.OpCode:type_name -> gamehall.OpResultCode_Hundred
	7,  // 1: gamehall.SCHundredSceneGetGameJackpot.GameJackpotFund:type_name -> gamehall.GameJackpotFundInfo
	12, // 2: gamehall.SCPlayerHistory.PlayerHistory:type_name -> gamehall.PlayerHistoryInfo
	11, // 3: gamehall.SCPlayerHistory.GameHistory:type_name -> gamehall.GameHistoryInfo
	14, // 4: gamehall.SCBigWinHistory.BigWinHistory:type_name -> gamehall.BigWinHistoryInfo
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_hundredscene_proto_init() }
func file_hundredscene_proto_init() {
	if File_hundredscene_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hundredscene_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHundredSceneOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredSceneOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHundredSceneGetPlayerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredSceneGetPlayerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHundredSceneGetGameJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameJackpotFundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredSceneGetGameJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastGameJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHundredSceneGetHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigWinHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredscene_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBigWinHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hundredscene_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hundredscene_proto_goTypes,
		DependencyIndexes: file_hundredscene_proto_depIdxs,
		EnumInfos:         file_hundredscene_proto_enumTypes,
		MessageInfos:      file_hundredscene_proto_msgTypes,
	}.Build()
	File_hundredscene_proto = out.File
	file_hundredscene_proto_rawDesc = nil
	file_hundredscene_proto_goTypes = nil
	file_hundredscene_proto_depIdxs = nil
}
