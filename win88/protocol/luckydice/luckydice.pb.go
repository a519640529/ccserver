// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: luckydice.proto

package luckydice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//幸运骰子
type LuckyDicePacketID int32

const (
	LuckyDicePacketID_PACKET_LUCKYDICE_ZERO             LuckyDicePacketID = 0    //弃用消息号
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_ROOMINFO      LuckyDicePacketID = 5280 //房间信息
	LuckyDicePacketID_PACKET_CS_LUCKYDICE_PLAYEROP      LuckyDicePacketID = 5281 //玩家操作（客户->服务）
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_PLAYEROP      LuckyDicePacketID = 5282 //玩家操作（服务->客户）
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_ROOMSTATE     LuckyDicePacketID = 5283 //房间状态
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_BETCHANGE     LuckyDicePacketID = 5284 //投注变化
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_GAMEBILLED    LuckyDicePacketID = 5285 //游戏结算
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_PLAYERHISTORY LuckyDicePacketID = 5286 //玩家押注记录
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_ROUNDBETDATA  LuckyDicePacketID = 5287 //单局押注记录
	LuckyDicePacketID_PACKET_SC_LUCKYDICE_DICEHISTORY   LuckyDicePacketID = 5288 //牌局骰子记录
)

// Enum value maps for LuckyDicePacketID.
var (
	LuckyDicePacketID_name = map[int32]string{
		0:    "PACKET_LUCKYDICE_ZERO",
		5280: "PACKET_SC_LUCKYDICE_ROOMINFO",
		5281: "PACKET_CS_LUCKYDICE_PLAYEROP",
		5282: "PACKET_SC_LUCKYDICE_PLAYEROP",
		5283: "PACKET_SC_LUCKYDICE_ROOMSTATE",
		5284: "PACKET_SC_LUCKYDICE_BETCHANGE",
		5285: "PACKET_SC_LUCKYDICE_GAMEBILLED",
		5286: "PACKET_SC_LUCKYDICE_PLAYERHISTORY",
		5287: "PACKET_SC_LUCKYDICE_ROUNDBETDATA",
		5288: "PACKET_SC_LUCKYDICE_DICEHISTORY",
	}
	LuckyDicePacketID_value = map[string]int32{
		"PACKET_LUCKYDICE_ZERO":             0,
		"PACKET_SC_LUCKYDICE_ROOMINFO":      5280,
		"PACKET_CS_LUCKYDICE_PLAYEROP":      5281,
		"PACKET_SC_LUCKYDICE_PLAYEROP":      5282,
		"PACKET_SC_LUCKYDICE_ROOMSTATE":     5283,
		"PACKET_SC_LUCKYDICE_BETCHANGE":     5284,
		"PACKET_SC_LUCKYDICE_GAMEBILLED":    5285,
		"PACKET_SC_LUCKYDICE_PLAYERHISTORY": 5286,
		"PACKET_SC_LUCKYDICE_ROUNDBETDATA":  5287,
		"PACKET_SC_LUCKYDICE_DICEHISTORY":   5288,
	}
)

func (x LuckyDicePacketID) Enum() *LuckyDicePacketID {
	p := new(LuckyDicePacketID)
	*p = x
	return p
}

func (x LuckyDicePacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LuckyDicePacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_luckydice_proto_enumTypes[0].Descriptor()
}

func (LuckyDicePacketID) Type() protoreflect.EnumType {
	return &file_luckydice_proto_enumTypes[0]
}

func (x LuckyDicePacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LuckyDicePacketID.Descriptor instead.
func (LuckyDicePacketID) EnumDescriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{0}
}

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess        OpResultCode = 0 //成功
	OpResultCode_OPRC_Error         OpResultCode = 1 //失败
	OpResultCode_OPRC_CoinNotEnough OpResultCode = 2 //钱不够
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
		2: "OPRC_CoinNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":        0,
		"OPRC_Error":         1,
		"OPRC_CoinNotEnough": 2,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_luckydice_proto_enumTypes[1].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_luckydice_proto_enumTypes[1]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{1}
}

type LuckyDicePlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                 //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	HeadOutLine int32    `protobuf:"varint,6,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,7,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Bet         int64    `protobuf:"varint,8,opt,name=Bet,proto3" json:"Bet,omitempty"`         //下注金额
	BetSide     int32    `protobuf:"varint,9,opt,name=BetSide,proto3" json:"BetSide,omitempty"` //押大押小 0大 1小
	Award       int64    `protobuf:"varint,10,opt,name=Award,proto3" json:"Award,omitempty"`    //奖金
	Params      []string `protobuf:"bytes,11,rep,name=Params,proto3" json:"Params,omitempty"`   //其他数据 如:ip 等
}

func (x *LuckyDicePlayerData) Reset() {
	*x = LuckyDicePlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyDicePlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDicePlayerData) ProtoMessage() {}

func (x *LuckyDicePlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDicePlayerData.ProtoReflect.Descriptor instead.
func (*LuckyDicePlayerData) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{0}
}

func (x *LuckyDicePlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LuckyDicePlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *LuckyDicePlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *LuckyDicePlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *LuckyDicePlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *LuckyDicePlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *LuckyDicePlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *LuckyDicePlayerData) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *LuckyDicePlayerData) GetBetSide() int32 {
	if x != nil {
		return x.BetSide
	}
	return 0
}

func (x *LuckyDicePlayerData) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *LuckyDicePlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type LuckyDiceRoundSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSide int32 `protobuf:"varint,1,opt,name=WinSide,proto3" json:"WinSide,omitempty"` //赢大赢小 0大 1小
	RoundId int32 `protobuf:"varint,2,opt,name=RoundId,proto3" json:"RoundId,omitempty"` //当局ID
}

func (x *LuckyDiceRoundSimpleInfo) Reset() {
	*x = LuckyDiceRoundSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyDiceRoundSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDiceRoundSimpleInfo) ProtoMessage() {}

func (x *LuckyDiceRoundSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDiceRoundSimpleInfo.ProtoReflect.Descriptor instead.
func (*LuckyDiceRoundSimpleInfo) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{1}
}

func (x *LuckyDiceRoundSimpleInfo) GetWinSide() int32 {
	if x != nil {
		return x.WinSide
	}
	return 0
}

func (x *LuckyDiceRoundSimpleInfo) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

//房间信息
type SCLuckyDiceRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       int32                       `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                   //房间id
	GameId       int32                       `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`                   //游戏id
	RoomMode     int32                       `protobuf:"varint,3,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`               //游戏模式
	Params       []int32                     `protobuf:"varint,4,rep,packed,name=Params,proto3" json:"Params,omitempty"`            //规则参数
	State        int32                       `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`                     //房间当前状态
	TimeOut      int32                       `protobuf:"varint,6,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                 //该状态已经历时间 单位:秒
	StateTimes   []int32                     `protobuf:"varint,7,rep,packed,name=StateTimes,proto3" json:"StateTimes,omitempty"`    //各状态总时间
	Dices        []int32                     `protobuf:"varint,8,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`              //骰子值 展示结果状态用
	TotalBet     []int64                     `protobuf:"varint,9,rep,packed,name=TotalBet,proto3" json:"TotalBet,omitempty"`        //总投注：[0]押大总投注 [1]押小总投注
	TotalPlayer  []int32                     `protobuf:"varint,10,rep,packed,name=TotalPlayer,proto3" json:"TotalPlayer,omitempty"` //总人数：[0]押大总人数 [1]押小总人数
	RoundHistory []*LuckyDiceRoundSimpleInfo `protobuf:"bytes,11,rep,name=RoundHistory,proto3" json:"RoundHistory,omitempty"`       //17个历史牌局输赢结果 0大 1小
	RoundId      int32                       `protobuf:"varint,12,opt,name=RoundId,proto3" json:"RoundId,omitempty"`                //当前局数ID
	Players      []*LuckyDicePlayerData      `protobuf:"bytes,13,rep,name=Players,proto3" json:"Players,omitempty"`                 //房间内的玩家信息
	ParamsEx     []int32                     `protobuf:"varint,14,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`       //其他参数
	GameFreeId   int32                       `protobuf:"varint,15,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
}

func (x *SCLuckyDiceRoomInfo) Reset() {
	*x = SCLuckyDiceRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceRoomInfo) ProtoMessage() {}

func (x *SCLuckyDiceRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceRoomInfo.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceRoomInfo) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{2}
}

func (x *SCLuckyDiceRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetStateTimes() []int32 {
	if x != nil {
		return x.StateTimes
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetTotalBet() []int64 {
	if x != nil {
		return x.TotalBet
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetTotalPlayer() []int32 {
	if x != nil {
		return x.TotalPlayer
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetRoundHistory() []*LuckyDiceRoundSimpleInfo {
	if x != nil {
		return x.RoundHistory
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *SCLuckyDiceRoomInfo) GetPlayers() []*LuckyDicePlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCLuckyDiceRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//玩家操作
type CSLuckyDiceOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0:押注 1:查看自己历史下注 2:查看某局下注结果 3:查看近100局骰子值
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数 0押注:Params[0]投注金额[1]押大押小 2查看下注:Params[0]牌局Id
}

func (x *CSLuckyDiceOp) Reset() {
	*x = CSLuckyDiceOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSLuckyDiceOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSLuckyDiceOp) ProtoMessage() {}

func (x *CSLuckyDiceOp) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSLuckyDiceOp.ProtoReflect.Descriptor instead.
func (*CSLuckyDiceOp) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{3}
}

func (x *CSLuckyDiceOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSLuckyDiceOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCLuckyDiceOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                       //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                   //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                            //操作参数 0押注:Params[0]投注总金额;Params[1]玩家余额
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=luckydice.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCLuckyDiceOp) Reset() {
	*x = SCLuckyDiceOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceOp) ProtoMessage() {}

func (x *SCLuckyDiceOp) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceOp.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceOp) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{4}
}

func (x *SCLuckyDiceOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCLuckyDiceOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCLuckyDiceOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCLuckyDiceOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//投注变化
type SCLuckyDiceBetChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBet    []int64 `protobuf:"varint,1,rep,packed,name=TotalBet,proto3" json:"TotalBet,omitempty"`       //总投注：[0]押大总投注 [1]押小总投注
	TotalPlayer []int32 `protobuf:"varint,2,rep,packed,name=TotalPlayer,proto3" json:"TotalPlayer,omitempty"` //总人数：[0]押大总人数 [1]押小总人数
}

func (x *SCLuckyDiceBetChange) Reset() {
	*x = SCLuckyDiceBetChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceBetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceBetChange) ProtoMessage() {}

func (x *SCLuckyDiceBetChange) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceBetChange.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceBetChange) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{5}
}

func (x *SCLuckyDiceBetChange) GetTotalBet() []int64 {
	if x != nil {
		return x.TotalBet
	}
	return nil
}

func (x *SCLuckyDiceBetChange) GetTotalPlayer() []int32 {
	if x != nil {
		return x.TotalPlayer
	}
	return nil
}

//发送给客户端的数据 结算
type SCLuckyDiceGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId int32   `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`    //牌局ID
	Dices   []int32 `protobuf:"varint,2,rep,packed,name=Dices,proto3" json:"Dices,omitempty"` //骰子值
	Bet     int64   `protobuf:"varint,3,opt,name=Bet,proto3" json:"Bet,omitempty"`            //总下注
	Refund  int64   `protobuf:"varint,4,opt,name=Refund,proto3" json:"Refund,omitempty"`      //返还押注数
	Award   int64   `protobuf:"varint,5,opt,name=Award,proto3" json:"Award,omitempty"`        //获奖金额
	Balance int64   `protobuf:"varint,6,opt,name=Balance,proto3" json:"Balance,omitempty"`    //玩家余额
}

func (x *SCLuckyDiceGameBilled) Reset() {
	*x = SCLuckyDiceGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceGameBilled) ProtoMessage() {}

func (x *SCLuckyDiceGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceGameBilled.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceGameBilled) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{6}
}

func (x *SCLuckyDiceGameBilled) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *SCLuckyDiceGameBilled) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *SCLuckyDiceGameBilled) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *SCLuckyDiceGameBilled) GetRefund() int64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *SCLuckyDiceGameBilled) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *SCLuckyDiceGameBilled) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 玩家押注记录信息
type LuckyDicePlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId     int32   `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`         //牌局id
	CreatedTime int64   `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"` //时间
	Dices       []int32 `protobuf:"varint,3,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`      //骰子值
	BetSide     int32   `protobuf:"varint,4,opt,name=BetSide,proto3" json:"BetSide,omitempty"`         //押大押小 0大 1小
	Bet         int64   `protobuf:"varint,5,opt,name=Bet,proto3" json:"Bet,omitempty"`                 //总下注
	Refund      int64   `protobuf:"varint,6,opt,name=Refund,proto3" json:"Refund,omitempty"`           //返还押注数
	Award       int64   `protobuf:"varint,7,opt,name=Award,proto3" json:"Award,omitempty"`             //获奖金额
}

func (x *LuckyDicePlayerHistoryInfo) Reset() {
	*x = LuckyDicePlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyDicePlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDicePlayerHistoryInfo) ProtoMessage() {}

func (x *LuckyDicePlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDicePlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*LuckyDicePlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{7}
}

func (x *LuckyDicePlayerHistoryInfo) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *LuckyDicePlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *LuckyDicePlayerHistoryInfo) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *LuckyDicePlayerHistoryInfo) GetBetSide() int32 {
	if x != nil {
		return x.BetSide
	}
	return 0
}

func (x *LuckyDicePlayerHistoryInfo) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *LuckyDicePlayerHistoryInfo) GetRefund() int64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *LuckyDicePlayerHistoryInfo) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

// 玩家押注记录
type SCLuckyDicePlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*LuckyDicePlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
}

func (x *SCLuckyDicePlayerHistory) Reset() {
	*x = SCLuckyDicePlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDicePlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDicePlayerHistory) ProtoMessage() {}

func (x *SCLuckyDicePlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDicePlayerHistory.ProtoReflect.Descriptor instead.
func (*SCLuckyDicePlayerHistory) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{8}
}

func (x *SCLuckyDicePlayerHistory) GetPlayerHistory() []*LuckyDicePlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

type LuckyDiceRoundPlayerBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTime  int64  `protobuf:"varint,1,opt,name=BetTime,proto3" json:"BetTime,omitempty"`  //押注时间
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"` //昵称
	Bet      int64  `protobuf:"varint,3,opt,name=Bet,proto3" json:"Bet,omitempty"`          //总下注
	Refund   int64  `protobuf:"varint,4,opt,name=Refund,proto3" json:"Refund,omitempty"`    //返还押注数
}

func (x *LuckyDiceRoundPlayerBet) Reset() {
	*x = LuckyDiceRoundPlayerBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyDiceRoundPlayerBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDiceRoundPlayerBet) ProtoMessage() {}

func (x *LuckyDiceRoundPlayerBet) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDiceRoundPlayerBet.ProtoReflect.Descriptor instead.
func (*LuckyDiceRoundPlayerBet) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{9}
}

func (x *LuckyDiceRoundPlayerBet) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *LuckyDiceRoundPlayerBet) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LuckyDiceRoundPlayerBet) GetBet() int64 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *LuckyDiceRoundPlayerBet) GetRefund() int64 {
	if x != nil {
		return x.Refund
	}
	return 0
}

// 单局押注记录
type SCLuckyDiceRoundBetHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId      int32                      `protobuf:"varint,1,opt,name=RoundId,proto3" json:"RoundId,omitempty"`          //牌局id
	Dices        []int32                    `protobuf:"varint,2,rep,packed,name=Dices,proto3" json:"Dices,omitempty"`       //骰子值
	TotalBet     []int64                    `protobuf:"varint,3,rep,packed,name=TotalBet,proto3" json:"TotalBet,omitempty"` //所有人总押注 [0]押大总数 [1]押小总数
	BigBetters   []*LuckyDiceRoundPlayerBet `protobuf:"bytes,4,rep,name=BigBetters,proto3" json:"BigBetters,omitempty"`     //押大玩家列表
	SmallBetters []*LuckyDiceRoundPlayerBet `protobuf:"bytes,5,rep,name=SmallBetters,proto3" json:"SmallBetters,omitempty"` //押小玩家列表
}

func (x *SCLuckyDiceRoundBetHistory) Reset() {
	*x = SCLuckyDiceRoundBetHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceRoundBetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceRoundBetHistory) ProtoMessage() {}

func (x *SCLuckyDiceRoundBetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceRoundBetHistory.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceRoundBetHistory) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{10}
}

func (x *SCLuckyDiceRoundBetHistory) GetRoundId() int32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *SCLuckyDiceRoundBetHistory) GetDices() []int32 {
	if x != nil {
		return x.Dices
	}
	return nil
}

func (x *SCLuckyDiceRoundBetHistory) GetTotalBet() []int64 {
	if x != nil {
		return x.TotalBet
	}
	return nil
}

func (x *SCLuckyDiceRoundBetHistory) GetBigBetters() []*LuckyDiceRoundPlayerBet {
	if x != nil {
		return x.BigBetters
	}
	return nil
}

func (x *SCLuckyDiceRoundBetHistory) GetSmallBetters() []*LuckyDiceRoundPlayerBet {
	if x != nil {
		return x.SmallBetters
	}
	return nil
}

// 牌局骰子记录
type SCLuckyDiceDiceHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dice1 []int32 `protobuf:"varint,1,rep,packed,name=Dice1,proto3" json:"Dice1,omitempty"` //骰子1
	Dice2 []int32 `protobuf:"varint,2,rep,packed,name=Dice2,proto3" json:"Dice2,omitempty"` //骰子2
	Dice3 []int32 `protobuf:"varint,3,rep,packed,name=Dice3,proto3" json:"Dice3,omitempty"` //骰子3
}

func (x *SCLuckyDiceDiceHistory) Reset() {
	*x = SCLuckyDiceDiceHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceDiceHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceDiceHistory) ProtoMessage() {}

func (x *SCLuckyDiceDiceHistory) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceDiceHistory.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceDiceHistory) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{11}
}

func (x *SCLuckyDiceDiceHistory) GetDice1() []int32 {
	if x != nil {
		return x.Dice1
	}
	return nil
}

func (x *SCLuckyDiceDiceHistory) GetDice2() []int32 {
	if x != nil {
		return x.Dice2
	}
	return nil
}

func (x *SCLuckyDiceDiceHistory) GetDice3() []int32 {
	if x != nil {
		return x.Dice3
	}
	return nil
}

// 大奖记录信息
type LuckyDiceWinRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankIndex int32  `protobuf:"varint,1,opt,name=RankIndex,proto3" json:"RankIndex,omitempty"` //排行id
	TotalWin  int64  `protobuf:"varint,2,opt,name=TotalWin,proto3" json:"TotalWin,omitempty"`   //总赢分
	UserName  string `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`    //昵称
}

func (x *LuckyDiceWinRankInfo) Reset() {
	*x = LuckyDiceWinRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyDiceWinRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDiceWinRankInfo) ProtoMessage() {}

func (x *LuckyDiceWinRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDiceWinRankInfo.ProtoReflect.Descriptor instead.
func (*LuckyDiceWinRankInfo) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{12}
}

func (x *LuckyDiceWinRankInfo) GetRankIndex() int32 {
	if x != nil {
		return x.RankIndex
	}
	return 0
}

func (x *LuckyDiceWinRankInfo) GetTotalWin() int64 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *LuckyDiceWinRankInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// 大奖记录
type SCLuckyDiceWinRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinRank []*LuckyDiceWinRankInfo `protobuf:"bytes,1,rep,name=WinRank,proto3" json:"WinRank,omitempty"`
}

func (x *SCLuckyDiceWinRank) Reset() {
	*x = SCLuckyDiceWinRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceWinRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceWinRank) ProtoMessage() {}

func (x *SCLuckyDiceWinRank) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceWinRank.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceWinRank) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{13}
}

func (x *SCLuckyDiceWinRank) GetWinRank() []*LuckyDiceWinRankInfo {
	if x != nil {
		return x.WinRank
	}
	return nil
}

//房间状态
type SCLuckyDiceRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态
	Params []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *SCLuckyDiceRoomState) Reset() {
	*x = SCLuckyDiceRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_luckydice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyDiceRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyDiceRoomState) ProtoMessage() {}

func (x *SCLuckyDiceRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_luckydice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyDiceRoomState.ProtoReflect.Descriptor instead.
func (*SCLuckyDiceRoomState) Descriptor() ([]byte, []int) {
	return file_luckydice_proto_rawDescGZIP(), []int{14}
}

func (x *SCLuckyDiceRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCLuckyDiceRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_luckydice_proto protoreflect.FileDescriptor

var file_luckydice_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61,
	0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42,
	0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63,
	0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x22, 0xf6, 0x03, 0x0a, 0x13, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63,
	0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x6b, 0x79,
	0x64, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a,
	0x0d, 0x43, 0x53, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x0d, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x53,
	0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x42,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44,
	0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x42,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x22, 0x67, 0x0a, 0x18, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x17, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x44, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12,
	0x42, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x0a, 0x42, 0x69, 0x67, 0x42, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x6b,
	0x79, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x0c, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x53,
	0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x44, 0x69, 0x63, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x31, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x69, 0x63, 0x65, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x44, 0x69, 0x63, 0x65,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x69, 0x63, 0x65, 0x33, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x44, 0x69, 0x63, 0x65, 0x33, 0x22, 0x6c, 0x0a, 0x14, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x44, 0x69, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x44, 0x69, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x39, 0x0a, 0x07, 0x57,
	0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69,
	0x63, 0x65, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x57,
	0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x44, 0x0a, 0x14, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2a, 0xf9, 0x02, 0x0a,
	0x11, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x55, 0x43,
	0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59,
	0x44, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xa0, 0x29,
	0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x4c, 0x55,
	0x43, 0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50,
	0x10, 0xa1, 0x29, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x4f, 0x50, 0x10, 0xa2, 0x29, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xa3, 0x29, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49, 0x43,
	0x45, 0x5f, 0x42, 0x45, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xa4, 0x29, 0x12, 0x23,
	0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b,
	0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0xa5, 0x29, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xa6, 0x29, 0x12, 0x25, 0x0a, 0x20, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x42, 0x45, 0x54, 0x44, 0x41, 0x54, 0x41, 0x10,
	0xa7, 0x29, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x4c, 0x55, 0x43, 0x4b, 0x59, 0x44, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xa8, 0x29, 0x2a, 0x47, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10,
	0x02, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x64, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_luckydice_proto_rawDescOnce sync.Once
	file_luckydice_proto_rawDescData = file_luckydice_proto_rawDesc
)

func file_luckydice_proto_rawDescGZIP() []byte {
	file_luckydice_proto_rawDescOnce.Do(func() {
		file_luckydice_proto_rawDescData = protoimpl.X.CompressGZIP(file_luckydice_proto_rawDescData)
	})
	return file_luckydice_proto_rawDescData
}

var file_luckydice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_luckydice_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_luckydice_proto_goTypes = []interface{}{
	(LuckyDicePacketID)(0),             // 0: luckydice.LuckyDicePacketID
	(OpResultCode)(0),                  // 1: luckydice.OpResultCode
	(*LuckyDicePlayerData)(nil),        // 2: luckydice.LuckyDicePlayerData
	(*LuckyDiceRoundSimpleInfo)(nil),   // 3: luckydice.LuckyDiceRoundSimpleInfo
	(*SCLuckyDiceRoomInfo)(nil),        // 4: luckydice.SCLuckyDiceRoomInfo
	(*CSLuckyDiceOp)(nil),              // 5: luckydice.CSLuckyDiceOp
	(*SCLuckyDiceOp)(nil),              // 6: luckydice.SCLuckyDiceOp
	(*SCLuckyDiceBetChange)(nil),       // 7: luckydice.SCLuckyDiceBetChange
	(*SCLuckyDiceGameBilled)(nil),      // 8: luckydice.SCLuckyDiceGameBilled
	(*LuckyDicePlayerHistoryInfo)(nil), // 9: luckydice.LuckyDicePlayerHistoryInfo
	(*SCLuckyDicePlayerHistory)(nil),   // 10: luckydice.SCLuckyDicePlayerHistory
	(*LuckyDiceRoundPlayerBet)(nil),    // 11: luckydice.LuckyDiceRoundPlayerBet
	(*SCLuckyDiceRoundBetHistory)(nil), // 12: luckydice.SCLuckyDiceRoundBetHistory
	(*SCLuckyDiceDiceHistory)(nil),     // 13: luckydice.SCLuckyDiceDiceHistory
	(*LuckyDiceWinRankInfo)(nil),       // 14: luckydice.LuckyDiceWinRankInfo
	(*SCLuckyDiceWinRank)(nil),         // 15: luckydice.SCLuckyDiceWinRank
	(*SCLuckyDiceRoomState)(nil),       // 16: luckydice.SCLuckyDiceRoomState
}
var file_luckydice_proto_depIdxs = []int32{
	3,  // 0: luckydice.SCLuckyDiceRoomInfo.RoundHistory:type_name -> luckydice.LuckyDiceRoundSimpleInfo
	2,  // 1: luckydice.SCLuckyDiceRoomInfo.Players:type_name -> luckydice.LuckyDicePlayerData
	1,  // 2: luckydice.SCLuckyDiceOp.OpRetCode:type_name -> luckydice.OpResultCode
	9,  // 3: luckydice.SCLuckyDicePlayerHistory.PlayerHistory:type_name -> luckydice.LuckyDicePlayerHistoryInfo
	11, // 4: luckydice.SCLuckyDiceRoundBetHistory.BigBetters:type_name -> luckydice.LuckyDiceRoundPlayerBet
	11, // 5: luckydice.SCLuckyDiceRoundBetHistory.SmallBetters:type_name -> luckydice.LuckyDiceRoundPlayerBet
	14, // 6: luckydice.SCLuckyDiceWinRank.WinRank:type_name -> luckydice.LuckyDiceWinRankInfo
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_luckydice_proto_init() }
func file_luckydice_proto_init() {
	if File_luckydice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_luckydice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyDicePlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyDiceRoundSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSLuckyDiceOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceBetChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyDicePlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDicePlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyDiceRoundPlayerBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceRoundBetHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceDiceHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyDiceWinRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceWinRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_luckydice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyDiceRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_luckydice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_luckydice_proto_goTypes,
		DependencyIndexes: file_luckydice_proto_depIdxs,
		EnumInfos:         file_luckydice_proto_enumTypes,
		MessageInfos:      file_luckydice_proto_msgTypes,
	}.Build()
	File_luckydice_proto = out.File
	file_luckydice_proto_rawDesc = nil
	file_luckydice_proto_goTypes = nil
	file_luckydice_proto_depIdxs = nil
}
