// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: caothap.proto

package caothap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//CaoThap
type CaoThapPacketID int32

const (
	CaoThapPacketID_PACKET_CAOTHAP_ZERO             CaoThapPacketID = 0    //弃用消息号
	CaoThapPacketID_PACKET_SC_CAOTHAP_ROOMINFO      CaoThapPacketID = 5260 //房间信息
	CaoThapPacketID_PACKET_CS_CAOTHAP_PLAYEROP      CaoThapPacketID = 5261 //玩家操作（客户->服务）
	CaoThapPacketID_PACKET_SC_CAOTHAP_PLAYEROP      CaoThapPacketID = 5262 //玩家操作（服务->客户）
	CaoThapPacketID_PACKET_SC_CAOTHAP_ROOMSTATE     CaoThapPacketID = 5263 //房间状态
	CaoThapPacketID_PACKET_SC_CAOTHAP_GAMEBILLED    CaoThapPacketID = 5264 //游戏结算
	CaoThapPacketID_PACKET_SC_CAOTHAP_GAMEJACKPOT   CaoThapPacketID = 5265 //奖池
	CaoThapPacketID_PACKET_SC_CAOTHAP_PLAYERHISTORY CaoThapPacketID = 5266 //玩家操作记录
)

// Enum value maps for CaoThapPacketID.
var (
	CaoThapPacketID_name = map[int32]string{
		0:    "PACKET_CAOTHAP_ZERO",
		5260: "PACKET_SC_CAOTHAP_ROOMINFO",
		5261: "PACKET_CS_CAOTHAP_PLAYEROP",
		5262: "PACKET_SC_CAOTHAP_PLAYEROP",
		5263: "PACKET_SC_CAOTHAP_ROOMSTATE",
		5264: "PACKET_SC_CAOTHAP_GAMEBILLED",
		5265: "PACKET_SC_CAOTHAP_GAMEJACKPOT",
		5266: "PACKET_SC_CAOTHAP_PLAYERHISTORY",
	}
	CaoThapPacketID_value = map[string]int32{
		"PACKET_CAOTHAP_ZERO":             0,
		"PACKET_SC_CAOTHAP_ROOMINFO":      5260,
		"PACKET_CS_CAOTHAP_PLAYEROP":      5261,
		"PACKET_SC_CAOTHAP_PLAYEROP":      5262,
		"PACKET_SC_CAOTHAP_ROOMSTATE":     5263,
		"PACKET_SC_CAOTHAP_GAMEBILLED":    5264,
		"PACKET_SC_CAOTHAP_GAMEJACKPOT":   5265,
		"PACKET_SC_CAOTHAP_PLAYERHISTORY": 5266,
	}
)

func (x CaoThapPacketID) Enum() *CaoThapPacketID {
	p := new(CaoThapPacketID)
	*p = x
	return p
}

func (x CaoThapPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaoThapPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_caothap_proto_enumTypes[0].Descriptor()
}

func (CaoThapPacketID) Type() protoreflect.EnumType {
	return &file_caothap_proto_enumTypes[0]
}

func (x CaoThapPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaoThapPacketID.Descriptor instead.
func (CaoThapPacketID) EnumDescriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{0}
}

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess        OpResultCode = 0 //成功
	OpResultCode_OPRC_Error         OpResultCode = 1 //失败
	OpResultCode_OPRC_CoinNotEnough OpResultCode = 2 //钱不够
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
		2: "OPRC_CoinNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":        0,
		"OPRC_Error":         1,
		"OPRC_CoinNotEnough": 2,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_caothap_proto_enumTypes[1].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_caothap_proto_enumTypes[1]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{1}
}

type CaoThapPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                 //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	HeadOutLine int32    `protobuf:"varint,6,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,7,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"` //其他数据 如:ip 等
}

func (x *CaoThapPlayerData) Reset() {
	*x = CaoThapPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaoThapPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaoThapPlayerData) ProtoMessage() {}

func (x *CaoThapPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaoThapPlayerData.ProtoReflect.Descriptor instead.
func (*CaoThapPlayerData) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{0}
}

func (x *CaoThapPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CaoThapPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *CaoThapPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *CaoThapPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *CaoThapPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *CaoThapPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *CaoThapPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *CaoThapPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间信息
type SCCaoThapRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     int32                `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`             //房间id
	Creator    int32                `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`           //创建者SnId
	GameId     int32                `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`             //游戏id
	RoomMode   int32                `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`         //游戏模式
	Params     []int32              `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`      //规则参数
	State      int32                `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`               //房间当前状态
	Chip       int32                `protobuf:"varint,7,opt,name=Chip,proto3" json:"Chip,omitempty"`                 //当前选择的押注
	Players    []*CaoThapPlayerData `protobuf:"bytes,8,rep,name=Players,proto3" json:"Players,omitempty"`            //房间内的玩家信息
	Jackpot    int64                `protobuf:"varint,9,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`           //奖池金额
	SpinID     int64                `protobuf:"varint,10,opt,name=SpinID,proto3" json:"SpinID,omitempty"`            //操作ID
	ParamsEx   []int32              `protobuf:"varint,11,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"` //其他参数 用于断线重连 pos=1:剩余时间 pos>=2:已翻开的牌(A牌可自行计算)
	GameFreeId int32                `protobuf:"varint,12,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	BilledData *GameBilledData      `protobuf:"bytes,13,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //上一局结算信息，用于断线重连
}

func (x *SCCaoThapRoomInfo) Reset() {
	*x = SCCaoThapRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCaoThapRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCaoThapRoomInfo) ProtoMessage() {}

func (x *SCCaoThapRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCaoThapRoomInfo.ProtoReflect.Descriptor instead.
func (*SCCaoThapRoomInfo) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{1}
}

func (x *SCCaoThapRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCCaoThapRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetPlayers() []*CaoThapPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCCaoThapRoomInfo) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCCaoThapRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCCaoThapRoomInfo) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//玩家操作
type CSCaoThapOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数 OpCode 0:开始 Params 0:下注数
}

func (x *CSCaoThapOp) Reset() {
	*x = CSCaoThapOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCaoThapOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCaoThapOp) ProtoMessage() {}

func (x *CSCaoThapOp) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCaoThapOp.ProtoReflect.Descriptor instead.
func (*CSCaoThapOp) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{2}
}

func (x *CSCaoThapOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSCaoThapOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCCaoThapOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                     //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                 //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                          //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=caothap.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCCaoThapOp) Reset() {
	*x = SCCaoThapOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCaoThapOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCaoThapOp) ProtoMessage() {}

func (x *SCCaoThapOp) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCaoThapOp.ProtoReflect.Descriptor instead.
func (*SCCaoThapOp) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{3}
}

func (x *SCCaoThapOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCCaoThapOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCCaoThapOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCCaoThapOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

type GameBilledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnID         int64   `protobuf:"varint,1,opt,name=TurnID,proto3" json:"TurnID,omitempty"`                   //操作ID
	CardsData      []int32 `protobuf:"varint,2,rep,packed,name=CardsData,proto3" json:"CardsData,omitempty"`      //需要翻出的牌
	BetType        int64   `protobuf:"varint,3,opt,name=BetType,proto3" json:"BetType,omitempty"`                 //下注类型
	BetValue       int64   `protobuf:"varint,4,opt,name=BetValue,proto3" json:"BetValue,omitempty"`               //下注分
	PrizeValue     int64   `protobuf:"varint,5,opt,name=PrizeValue,proto3" json:"PrizeValue,omitempty"`           //赢分
	JackpotValue   int64   `protobuf:"varint,6,opt,name=JackpotValue,proto3" json:"JackpotValue,omitempty"`       //爆奖金额
	Balance        int64   `protobuf:"varint,7,opt,name=Balance,proto3" json:"Balance,omitempty"`                 //玩家余额
	Jackpot        int64   `protobuf:"varint,8,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                 //奖池金额
	ResponseStatus int64   `protobuf:"varint,9,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`   //状态码
	IsJackpot      bool    `protobuf:"varint,10,opt,name=IsJackpot,proto3" json:"IsJackpot,omitempty"`            //是否爆奖
	Step           int32   `protobuf:"varint,11,opt,name=Step,proto3" json:"Step,omitempty"`                      //翻牌个数
	BigWinScore    int64   `protobuf:"varint,12,opt,name=BigWinScore,proto3" json:"BigWinScore,omitempty"`        //压大赢分
	LittleWinScore int64   `protobuf:"varint,13,opt,name=LittleWinScore,proto3" json:"LittleWinScore,omitempty"`  //压小赢分
	TotalPoint     int64   `protobuf:"varint,14,opt,name=TotalPoint,proto3" json:"TotalPoint,omitempty"`          //
	CardID         int32   `protobuf:"varint,15,opt,name=CardID,proto3" json:"CardID,omitempty"`                  //当前翻牌
	CurrentAces    []int32 `protobuf:"varint,16,rep,packed,name=CurrentAces,proto3" json:"CurrentAces,omitempty"` //当前A牌数据
	AcesCount      int32   `protobuf:"varint,17,opt,name=AcesCount,proto3" json:"AcesCount,omitempty"`            //A牌数量
}

func (x *GameBilledData) Reset() {
	*x = GameBilledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBilledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBilledData) ProtoMessage() {}

func (x *GameBilledData) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBilledData.ProtoReflect.Descriptor instead.
func (*GameBilledData) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{4}
}

func (x *GameBilledData) GetTurnID() int64 {
	if x != nil {
		return x.TurnID
	}
	return 0
}

func (x *GameBilledData) GetCardsData() []int32 {
	if x != nil {
		return x.CardsData
	}
	return nil
}

func (x *GameBilledData) GetBetType() int64 {
	if x != nil {
		return x.BetType
	}
	return 0
}

func (x *GameBilledData) GetBetValue() int64 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *GameBilledData) GetPrizeValue() int64 {
	if x != nil {
		return x.PrizeValue
	}
	return 0
}

func (x *GameBilledData) GetJackpotValue() int64 {
	if x != nil {
		return x.JackpotValue
	}
	return 0
}

func (x *GameBilledData) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GameBilledData) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *GameBilledData) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

func (x *GameBilledData) GetIsJackpot() bool {
	if x != nil {
		return x.IsJackpot
	}
	return false
}

func (x *GameBilledData) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *GameBilledData) GetBigWinScore() int64 {
	if x != nil {
		return x.BigWinScore
	}
	return 0
}

func (x *GameBilledData) GetLittleWinScore() int64 {
	if x != nil {
		return x.LittleWinScore
	}
	return 0
}

func (x *GameBilledData) GetTotalPoint() int64 {
	if x != nil {
		return x.TotalPoint
	}
	return 0
}

func (x *GameBilledData) GetCardID() int32 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *GameBilledData) GetCurrentAces() []int32 {
	if x != nil {
		return x.CurrentAces
	}
	return nil
}

func (x *GameBilledData) GetAcesCount() int32 {
	if x != nil {
		return x.AcesCount
	}
	return 0
}

//发送给客户端的数据 结算
type SCCaoThapGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BilledData *GameBilledData `protobuf:"bytes,1,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //结算信息
}

func (x *SCCaoThapGameBilled) Reset() {
	*x = SCCaoThapGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCaoThapGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCaoThapGameBilled) ProtoMessage() {}

func (x *SCCaoThapGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCaoThapGameBilled.ProtoReflect.Descriptor instead.
func (*SCCaoThapGameBilled) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{5}
}

func (x *SCCaoThapGameBilled) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//房间状态
type SCCaoThapRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态
}

func (x *SCCaoThapRoomState) Reset() {
	*x = SCCaoThapRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCaoThapRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCaoThapRoomState) ProtoMessage() {}

func (x *SCCaoThapRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCaoThapRoomState.ProtoReflect.Descriptor instead.
func (*SCCaoThapRoomState) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{6}
}

func (x *SCCaoThapRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

// 玩家操作记录信息
type CaoThapPlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID      string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`            // 操作id
	CreatedTime int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"` // 时间
	BetValue    int64  `protobuf:"varint,3,opt,name=BetValue,proto3" json:"BetValue,omitempty"`       // 下注
	PriceValue  int64  `protobuf:"varint,4,opt,name=PriceValue,proto3" json:"PriceValue,omitempty"`   // 赢分
	CardID      int32  `protobuf:"varint,5,opt,name=CardID,proto3" json:"CardID,omitempty"`           //当前翻牌
}

func (x *CaoThapPlayerHistoryInfo) Reset() {
	*x = CaoThapPlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaoThapPlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaoThapPlayerHistoryInfo) ProtoMessage() {}

func (x *CaoThapPlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaoThapPlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*CaoThapPlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{7}
}

func (x *CaoThapPlayerHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *CaoThapPlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *CaoThapPlayerHistoryInfo) GetBetValue() int64 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *CaoThapPlayerHistoryInfo) GetPriceValue() int64 {
	if x != nil {
		return x.PriceValue
	}
	return 0
}

func (x *CaoThapPlayerHistoryInfo) GetCardID() int32 {
	if x != nil {
		return x.CardID
	}
	return 0
}

// 玩家押注记录
type SCCaoThapPlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*CaoThapPlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
}

func (x *SCCaoThapPlayerHistory) Reset() {
	*x = SCCaoThapPlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_caothap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCaoThapPlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCaoThapPlayerHistory) ProtoMessage() {}

func (x *SCCaoThapPlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_caothap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCaoThapPlayerHistory.ProtoReflect.Descriptor instead.
func (*SCCaoThapPlayerHistory) Descriptor() ([]byte, []int) {
	return file_caothap_proto_rawDescGZIP(), []int{8}
}

func (x *SCCaoThapPlayerHistory) GetPlayerHistory() []*CaoThapPlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

var File_caothap_proto protoreflect.FileDescriptor

var file_caothap_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x61, 0x6f, 0x74, 0x68, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x61, 0x6f, 0x74, 0x68, 0x61, 0x70, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6f,
	0x54, 0x68, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x56, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x98, 0x03, 0x0a,
	0x11, 0x53, 0x43, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x68, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61,
	0x6f, 0x74, 0x68, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70,
	0x69, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x6f, 0x74, 0x68, 0x61, 0x70, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0b, 0x43, 0x53, 0x43, 0x61, 0x6f,
	0x54, 0x68, 0x61, 0x70, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x43, 0x43, 0x61, 0x6f,
	0x54, 0x68, 0x61, 0x70, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x63, 0x61, 0x6f, 0x74, 0x68, 0x61, 0x70, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x90, 0x04, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x43, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x61, 0x6f, 0x74, 0x68, 0x61, 0x70, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x43, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x18, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x43, 0x43,
	0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6f,
	0x74, 0x68, 0x61, 0x70, 0x2e, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2a, 0x9c, 0x02, 0x0a,
	0x0f, 0x43, 0x61, 0x6f, 0x54, 0x68, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48,
	0x41, 0x50, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48, 0x41, 0x50, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8c, 0x29, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48, 0x41, 0x50, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0x8d, 0x29, 0x12, 0x1f, 0x0a, 0x1a, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48, 0x41, 0x50,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0x8e, 0x29, 0x12, 0x20, 0x0a, 0x1b,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48, 0x41,
	0x50, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8f, 0x29, 0x12, 0x21,
	0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4f, 0x54,
	0x48, 0x41, 0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x90,
	0x29, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43,
	0x41, 0x4f, 0x54, 0x48, 0x41, 0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4a, 0x41, 0x43, 0x4b, 0x50,
	0x4f, 0x54, 0x10, 0x91, 0x29, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x43, 0x41, 0x4f, 0x54, 0x48, 0x41, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x92, 0x29, 0x2a, 0x47, 0x0a, 0x0c, 0x4f,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75,
	0x67, 0x68, 0x10, 0x02, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x63, 0x61, 0x6f, 0x74, 0x68, 0x61,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_caothap_proto_rawDescOnce sync.Once
	file_caothap_proto_rawDescData = file_caothap_proto_rawDesc
)

func file_caothap_proto_rawDescGZIP() []byte {
	file_caothap_proto_rawDescOnce.Do(func() {
		file_caothap_proto_rawDescData = protoimpl.X.CompressGZIP(file_caothap_proto_rawDescData)
	})
	return file_caothap_proto_rawDescData
}

var file_caothap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_caothap_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_caothap_proto_goTypes = []interface{}{
	(CaoThapPacketID)(0),             // 0: caothap.CaoThapPacketID
	(OpResultCode)(0),                // 1: caothap.OpResultCode
	(*CaoThapPlayerData)(nil),        // 2: caothap.CaoThapPlayerData
	(*SCCaoThapRoomInfo)(nil),        // 3: caothap.SCCaoThapRoomInfo
	(*CSCaoThapOp)(nil),              // 4: caothap.CSCaoThapOp
	(*SCCaoThapOp)(nil),              // 5: caothap.SCCaoThapOp
	(*GameBilledData)(nil),           // 6: caothap.GameBilledData
	(*SCCaoThapGameBilled)(nil),      // 7: caothap.SCCaoThapGameBilled
	(*SCCaoThapRoomState)(nil),       // 8: caothap.SCCaoThapRoomState
	(*CaoThapPlayerHistoryInfo)(nil), // 9: caothap.CaoThapPlayerHistoryInfo
	(*SCCaoThapPlayerHistory)(nil),   // 10: caothap.SCCaoThapPlayerHistory
}
var file_caothap_proto_depIdxs = []int32{
	2, // 0: caothap.SCCaoThapRoomInfo.Players:type_name -> caothap.CaoThapPlayerData
	6, // 1: caothap.SCCaoThapRoomInfo.BilledData:type_name -> caothap.GameBilledData
	1, // 2: caothap.SCCaoThapOp.OpRetCode:type_name -> caothap.OpResultCode
	6, // 3: caothap.SCCaoThapGameBilled.BilledData:type_name -> caothap.GameBilledData
	9, // 4: caothap.SCCaoThapPlayerHistory.PlayerHistory:type_name -> caothap.CaoThapPlayerHistoryInfo
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_caothap_proto_init() }
func file_caothap_proto_init() {
	if File_caothap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_caothap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaoThapPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCaoThapRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCaoThapOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCaoThapOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBilledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCaoThapGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCaoThapRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaoThapPlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_caothap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCaoThapPlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_caothap_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_caothap_proto_goTypes,
		DependencyIndexes: file_caothap_proto_depIdxs,
		EnumInfos:         file_caothap_proto_enumTypes,
		MessageInfos:      file_caothap_proto_msgTypes,
	}.Build()
	File_caothap_proto = out.File
	file_caothap_proto_rawDesc = nil
	file_caothap_proto_goTypes = nil
	file_caothap_proto_depIdxs = nil
}
