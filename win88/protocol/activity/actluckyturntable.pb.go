// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: actluckyturntable.proto

package activity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode_ActLuckTurn int32

const (
	OpResultCode_ActLuckTurn_OPRC_Sucess_ActLuckTurn                    OpResultCode_ActLuckTurn = 0 //成功
	OpResultCode_ActLuckTurn_OPRC_Error_ActLuckTurn                     OpResultCode_ActLuckTurn = 1 //失败
	OpResultCode_ActLuckTurn_OPRC_LuckyTurntable_Info_FindPlatform_Fail OpResultCode_ActLuckTurn = 10014
	OpResultCode_ActLuckTurn_OPRC_LuckyTurntable_Draw_DataTrans_Fail    OpResultCode_ActLuckTurn = 10015
	OpResultCode_ActLuckTurn_OPRC_LuckyTurntable_Draw_DataTrans_Nil     OpResultCode_ActLuckTurn = 10016
	OpResultCode_ActLuckTurn_OPRC_LuckyTurntable_Draw_TurntableType_Nil OpResultCode_ActLuckTurn = 10017
	OpResultCode_ActLuckTurn_OPRC_LuckyTurntable_Draw_Draw_Fail         OpResultCode_ActLuckTurn = 10018
)

// Enum value maps for OpResultCode_ActLuckTurn.
var (
	OpResultCode_ActLuckTurn_name = map[int32]string{
		0:     "OPRC_Sucess_ActLuckTurn",
		1:     "OPRC_Error_ActLuckTurn",
		10014: "OPRC_LuckyTurntable_Info_FindPlatform_Fail",
		10015: "OPRC_LuckyTurntable_Draw_DataTrans_Fail",
		10016: "OPRC_LuckyTurntable_Draw_DataTrans_Nil",
		10017: "OPRC_LuckyTurntable_Draw_TurntableType_Nil",
		10018: "OPRC_LuckyTurntable_Draw_Draw_Fail",
	}
	OpResultCode_ActLuckTurn_value = map[string]int32{
		"OPRC_Sucess_ActLuckTurn":                    0,
		"OPRC_Error_ActLuckTurn":                     1,
		"OPRC_LuckyTurntable_Info_FindPlatform_Fail": 10014,
		"OPRC_LuckyTurntable_Draw_DataTrans_Fail":    10015,
		"OPRC_LuckyTurntable_Draw_DataTrans_Nil":     10016,
		"OPRC_LuckyTurntable_Draw_TurntableType_Nil": 10017,
		"OPRC_LuckyTurntable_Draw_Draw_Fail":         10018,
	}
)

func (x OpResultCode_ActLuckTurn) Enum() *OpResultCode_ActLuckTurn {
	p := new(OpResultCode_ActLuckTurn)
	*p = x
	return p
}

func (x OpResultCode_ActLuckTurn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode_ActLuckTurn) Descriptor() protoreflect.EnumDescriptor {
	return file_actluckyturntable_proto_enumTypes[0].Descriptor()
}

func (OpResultCode_ActLuckTurn) Type() protoreflect.EnumType {
	return &file_actluckyturntable_proto_enumTypes[0]
}

func (x OpResultCode_ActLuckTurn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode_ActLuckTurn.Descriptor instead.
func (OpResultCode_ActLuckTurn) EnumDescriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{0}
}

// 幸运转盘
type LuckyTurntablePacketID int32

const (
	LuckyTurntablePacketID_PACKET_LuckyTurntable_ZERO            LuckyTurntablePacketID = 0
	LuckyTurntablePacketID_PACKET_CS_LUCKYTURNTABLE_INFO         LuckyTurntablePacketID = 2650 // 幸运转盘信息
	LuckyTurntablePacketID_PACKET_SC_LUCKYTURNTABLE_INFO         LuckyTurntablePacketID = 2651 // 幸运转盘信息（包括平台奖励配置、大奖记录、个人抽奖记录、最新滚动记录）
	LuckyTurntablePacketID_PACKET_CS_LUCKYTURNTABLE_DRAW         LuckyTurntablePacketID = 2652 // 抽奖
	LuckyTurntablePacketID_PACKET_SC_LUCKYTURNTABLE_DRAW         LuckyTurntablePacketID = 2653 // 抽奖结果
	LuckyTurntablePacketID_PACKET_SC_LUCKYTURNTABLE_PRIZE        LuckyTurntablePacketID = 2654 // 中奖信息（用于滚动播报）
	LuckyTurntablePacketID_PACKET_SC_LUCKYTURNTABLE_GRANDPRIZE   LuckyTurntablePacketID = 2655 // 中大奖信息（用于大奖记录展示）
	LuckyTurntablePacketID_PACKET_SC_LUCKYTURNTABLE_MODIFYCONFIG LuckyTurntablePacketID = 2656 // 后台修改配置
)

// Enum value maps for LuckyTurntablePacketID.
var (
	LuckyTurntablePacketID_name = map[int32]string{
		0:    "PACKET_LuckyTurntable_ZERO",
		2650: "PACKET_CS_LUCKYTURNTABLE_INFO",
		2651: "PACKET_SC_LUCKYTURNTABLE_INFO",
		2652: "PACKET_CS_LUCKYTURNTABLE_DRAW",
		2653: "PACKET_SC_LUCKYTURNTABLE_DRAW",
		2654: "PACKET_SC_LUCKYTURNTABLE_PRIZE",
		2655: "PACKET_SC_LUCKYTURNTABLE_GRANDPRIZE",
		2656: "PACKET_SC_LUCKYTURNTABLE_MODIFYCONFIG",
	}
	LuckyTurntablePacketID_value = map[string]int32{
		"PACKET_LuckyTurntable_ZERO":            0,
		"PACKET_CS_LUCKYTURNTABLE_INFO":         2650,
		"PACKET_SC_LUCKYTURNTABLE_INFO":         2651,
		"PACKET_CS_LUCKYTURNTABLE_DRAW":         2652,
		"PACKET_SC_LUCKYTURNTABLE_DRAW":         2653,
		"PACKET_SC_LUCKYTURNTABLE_PRIZE":        2654,
		"PACKET_SC_LUCKYTURNTABLE_GRANDPRIZE":   2655,
		"PACKET_SC_LUCKYTURNTABLE_MODIFYCONFIG": 2656,
	}
)

func (x LuckyTurntablePacketID) Enum() *LuckyTurntablePacketID {
	p := new(LuckyTurntablePacketID)
	*p = x
	return p
}

func (x LuckyTurntablePacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LuckyTurntablePacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_actluckyturntable_proto_enumTypes[1].Descriptor()
}

func (LuckyTurntablePacketID) Type() protoreflect.EnumType {
	return &file_actluckyturntable_proto_enumTypes[1]
}

func (x LuckyTurntablePacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LuckyTurntablePacketID.Descriptor instead.
func (LuckyTurntablePacketID) EnumDescriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{1}
}

type LuckyTurntableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurntableType int32   `protobuf:"varint,1,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"` // 转盘类型
	ScoreCost     int64   `protobuf:"varint,2,opt,name=ScoreCost,proto3" json:"ScoreCost,omitempty"`         // 积分消耗
	Reward        []int64 `protobuf:"varint,3,rep,packed,name=Reward,proto3" json:"Reward,omitempty"`        // 奖励配置
}

func (x *LuckyTurntableConfig) Reset() {
	*x = LuckyTurntableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyTurntableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyTurntableConfig) ProtoMessage() {}

func (x *LuckyTurntableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyTurntableConfig.ProtoReflect.Descriptor instead.
func (*LuckyTurntableConfig) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{0}
}

func (x *LuckyTurntableConfig) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

func (x *LuckyTurntableConfig) GetScoreCost() int64 {
	if x != nil {
		return x.ScoreCost
	}
	return 0
}

func (x *LuckyTurntableConfig) GetReward() []int64 {
	if x != nil {
		return x.Reward
	}
	return nil
}

type SCLuckyTurntablePersonalPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`                       // 中奖时间
	TurntableType int32 `protobuf:"varint,2,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"` // 转盘类型
	RewardAmount  int64 `protobuf:"varint,3,opt,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`   // 奖励金额(单位：分)
	SnId          int32 `protobuf:"varint,4,opt,name=SnId,proto3" json:"SnId,omitempty"`                   // 玩家id
}

func (x *SCLuckyTurntablePersonalPrize) Reset() {
	*x = SCLuckyTurntablePersonalPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntablePersonalPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntablePersonalPrize) ProtoMessage() {}

func (x *SCLuckyTurntablePersonalPrize) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntablePersonalPrize.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntablePersonalPrize) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{1}
}

func (x *SCLuckyTurntablePersonalPrize) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCLuckyTurntablePersonalPrize) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

func (x *SCLuckyTurntablePersonalPrize) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *SCLuckyTurntablePersonalPrize) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

// PACKET_SC_LUCKYTURNTABLE_PRIZE
type SCLuckyTurntablePrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                    // 中奖玩家名字
	TurntableType int32  `protobuf:"varint,2,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"` // 转盘类型
	RewardAmount  int64  `protobuf:"varint,3,opt,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`   // 奖励金额(单位：分)
	Ts            int64  `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`                       // 中奖时间
	SnId          int32  `protobuf:"varint,5,opt,name=SnId,proto3" json:"SnId,omitempty"`                   // 玩家id
}

func (x *SCLuckyTurntablePrize) Reset() {
	*x = SCLuckyTurntablePrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntablePrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntablePrize) ProtoMessage() {}

func (x *SCLuckyTurntablePrize) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntablePrize.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntablePrize) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{2}
}

func (x *SCLuckyTurntablePrize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SCLuckyTurntablePrize) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

func (x *SCLuckyTurntablePrize) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *SCLuckyTurntablePrize) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCLuckyTurntablePrize) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

// PACKET_SC_LUCKYTURNTABLE_GRANDPRIZE
type SCLuckyTurntableGrandPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            int64  `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`                       // 中奖时间
	TurntableType int32  `protobuf:"varint,2,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"` // 转盘类型
	RewardAmount  int64  `protobuf:"varint,3,opt,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`   // 奖励金额(单位：分)
	SnId          int32  `protobuf:"varint,4,opt,name=SnId,proto3" json:"SnId,omitempty"`                   // 玩家id
	Name          string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`                    // 中奖玩家名字
}

func (x *SCLuckyTurntableGrandPrize) Reset() {
	*x = SCLuckyTurntableGrandPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntableGrandPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntableGrandPrize) ProtoMessage() {}

func (x *SCLuckyTurntableGrandPrize) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntableGrandPrize.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntableGrandPrize) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{3}
}

func (x *SCLuckyTurntableGrandPrize) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCLuckyTurntableGrandPrize) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

func (x *SCLuckyTurntableGrandPrize) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *SCLuckyTurntableGrandPrize) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCLuckyTurntableGrandPrize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PACKET_CS_LUCKYTURNTABLE_INFO
type CSLuckyTurntableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSLuckyTurntableInfo) Reset() {
	*x = CSLuckyTurntableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSLuckyTurntableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSLuckyTurntableInfo) ProtoMessage() {}

func (x *CSLuckyTurntableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSLuckyTurntableInfo.ProtoReflect.Descriptor instead.
func (*CSLuckyTurntableInfo) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{4}
}

// PACKET_SC_LUCKYTURNTABLE_INFO
type SCLuckyTurntableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAct          int32                            `protobuf:"varint,1,opt,name=StartAct,proto3" json:"StartAct,omitempty"`                                           // 活动是否开启,0:未开启,1:已经开启
	StartTickets      int64                            `protobuf:"varint,2,opt,name=StartTickets,proto3" json:"StartTickets,omitempty"`                                   // 活动开启时间 时间戳
	Version           int32                            `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`                                             // 活动版本
	Score             int64                            `protobuf:"varint,4,opt,name=Score,proto3" json:"Score,omitempty"`                                                 // 当前积分
	TomorrowScore     int64                            `protobuf:"varint,5,opt,name=TomorrowScore,proto3" json:"TomorrowScore,omitempty"`                                 // 明日积分
	TurntablesConfigs []*LuckyTurntableConfig          `protobuf:"bytes,6,rep,name=TurntablesConfigs,proto3" json:"TurntablesConfigs,omitempty"`                          // 各转盘奖励配置
	Prize             []*SCLuckyTurntablePrize         `protobuf:"bytes,7,rep,name=Prize,proto3" json:"Prize,omitempty"`                                                  // 中奖信息（用于滚动播报）
	GrandPrize        []*SCLuckyTurntableGrandPrize    `protobuf:"bytes,8,rep,name=GrandPrize,proto3" json:"GrandPrize,omitempty"`                                        // 大奖记录（用于大奖记录展示）
	PersonalPrize     []*SCLuckyTurntablePersonalPrize `protobuf:"bytes,9,rep,name=PersonalPrize,proto3" json:"PersonalPrize,omitempty"`                                  // 个人记录（个人中奖记录展示）
	OpRetCode         OpResultCode_ActLuckTurn         `protobuf:"varint,10,opt,name=OpRetCode,proto3,enum=activity.OpResultCode_ActLuckTurn" json:"OpRetCode,omitempty"` // 返回错误码
}

func (x *SCLuckyTurntableInfo) Reset() {
	*x = SCLuckyTurntableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntableInfo) ProtoMessage() {}

func (x *SCLuckyTurntableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntableInfo.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntableInfo) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{5}
}

func (x *SCLuckyTurntableInfo) GetStartAct() int32 {
	if x != nil {
		return x.StartAct
	}
	return 0
}

func (x *SCLuckyTurntableInfo) GetStartTickets() int64 {
	if x != nil {
		return x.StartTickets
	}
	return 0
}

func (x *SCLuckyTurntableInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SCLuckyTurntableInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SCLuckyTurntableInfo) GetTomorrowScore() int64 {
	if x != nil {
		return x.TomorrowScore
	}
	return 0
}

func (x *SCLuckyTurntableInfo) GetTurntablesConfigs() []*LuckyTurntableConfig {
	if x != nil {
		return x.TurntablesConfigs
	}
	return nil
}

func (x *SCLuckyTurntableInfo) GetPrize() []*SCLuckyTurntablePrize {
	if x != nil {
		return x.Prize
	}
	return nil
}

func (x *SCLuckyTurntableInfo) GetGrandPrize() []*SCLuckyTurntableGrandPrize {
	if x != nil {
		return x.GrandPrize
	}
	return nil
}

func (x *SCLuckyTurntableInfo) GetPersonalPrize() []*SCLuckyTurntablePersonalPrize {
	if x != nil {
		return x.PersonalPrize
	}
	return nil
}

func (x *SCLuckyTurntableInfo) GetOpRetCode() OpResultCode_ActLuckTurn {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_ActLuckTurn_OPRC_Sucess_ActLuckTurn
}

// PACKET_SC_LUCKYTURNTABLE_MODIFYCONFIG
type SCLuckyTurntableModifyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAct          int32                   `protobuf:"varint,1,opt,name=StartAct,proto3" json:"StartAct,omitempty"`                  // 活动是否开启,0:未开启,1:已经开启
	StartTickets      int64                   `protobuf:"varint,2,opt,name=StartTickets,proto3" json:"StartTickets,omitempty"`          // 活动开启时间 时间戳
	Version           int32                   `protobuf:"varint,3,opt,name=Version,proto3" json:"Version,omitempty"`                    // 活动版本
	TurntablesConfigs []*LuckyTurntableConfig `protobuf:"bytes,4,rep,name=TurntablesConfigs,proto3" json:"TurntablesConfigs,omitempty"` // 各转盘奖励配置
}

func (x *SCLuckyTurntableModifyConfig) Reset() {
	*x = SCLuckyTurntableModifyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntableModifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntableModifyConfig) ProtoMessage() {}

func (x *SCLuckyTurntableModifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntableModifyConfig.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntableModifyConfig) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{6}
}

func (x *SCLuckyTurntableModifyConfig) GetStartAct() int32 {
	if x != nil {
		return x.StartAct
	}
	return 0
}

func (x *SCLuckyTurntableModifyConfig) GetStartTickets() int64 {
	if x != nil {
		return x.StartTickets
	}
	return 0
}

func (x *SCLuckyTurntableModifyConfig) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SCLuckyTurntableModifyConfig) GetTurntablesConfigs() []*LuckyTurntableConfig {
	if x != nil {
		return x.TurntablesConfigs
	}
	return nil
}

// PACKET_CS_LUCKYTURNTABLE_DRAW
type CSLuckyTurntableDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurntableType int32 `protobuf:"varint,1,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"` // 转盘类型
}

func (x *CSLuckyTurntableDraw) Reset() {
	*x = CSLuckyTurntableDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSLuckyTurntableDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSLuckyTurntableDraw) ProtoMessage() {}

func (x *CSLuckyTurntableDraw) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSLuckyTurntableDraw.ProtoReflect.Descriptor instead.
func (*CSLuckyTurntableDraw) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{7}
}

func (x *CSLuckyTurntableDraw) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

// PACKET_SC_LUCKYTURNTABLE_DRAW
type SCLuckyTurntableDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            int64                    `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`                                                      // 时间戳
	RewardAmount  int64                    `protobuf:"varint,2,opt,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`                                  // 中奖金额
	RewardType    int32                    `protobuf:"varint,3,opt,name=RewardType,proto3" json:"RewardType,omitempty"`                                      // 奖励类型 1-8分别表示小奖1、小奖2、中奖1、中奖2、大奖1、大奖2、特大奖1、特大奖2
	TurntableType int32                    `protobuf:"varint,4,opt,name=TurntableType,proto3" json:"TurntableType,omitempty"`                                // 转盘类型
	SnId          int32                    `protobuf:"varint,5,opt,name=SnId,proto3" json:"SnId,omitempty"`                                                  // 玩家id
	OpRetCode     OpResultCode_ActLuckTurn `protobuf:"varint,6,opt,name=OpRetCode,proto3,enum=activity.OpResultCode_ActLuckTurn" json:"OpRetCode,omitempty"` // 返回错误码
}

func (x *SCLuckyTurntableDraw) Reset() {
	*x = SCLuckyTurntableDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actluckyturntable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCLuckyTurntableDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCLuckyTurntableDraw) ProtoMessage() {}

func (x *SCLuckyTurntableDraw) ProtoReflect() protoreflect.Message {
	mi := &file_actluckyturntable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCLuckyTurntableDraw.ProtoReflect.Descriptor instead.
func (*SCLuckyTurntableDraw) Descriptor() ([]byte, []int) {
	return file_actluckyturntable_proto_rawDescGZIP(), []int{8}
}

func (x *SCLuckyTurntableDraw) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCLuckyTurntableDraw) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *SCLuckyTurntableDraw) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *SCLuckyTurntableDraw) GetTurntableType() int32 {
	if x != nil {
		return x.TurntableType
	}
	return 0
}

func (x *SCLuckyTurntableDraw) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCLuckyTurntableDraw) GetOpRetCode() OpResultCode_ActLuckTurn {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_ActLuckTurn_OPRC_Sucess_ActLuckTurn
}

var File_actluckyturntable_proto protoreflect.FileDescriptor

var file_actluckyturntable_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x63, 0x74, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x74, 0x75, 0x72, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x22, 0x72, 0x0a, 0x14, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x53, 0x43, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x75, 0x72,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x53, 0x43, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x75,
	0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x54, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x53, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x04, 0x0a,
	0x14, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f,
	0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x63, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x53, 0x43, 0x4c, 0x75,
	0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75,
	0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0x3c, 0x0a, 0x14, 0x43, 0x53, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe6,
	0x01, 0x0a, 0x14, 0x53, 0x43, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x63, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0xb9, 0x02, 0x0a, 0x18, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x4c, 0x75, 0x63, 0x6b,
	0x54, 0x75, 0x72, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x41, 0x63, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x41, 0x63, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x01, 0x12, 0x2f, 0x0a,
	0x2a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x9e, 0x4e, 0x12, 0x2c,
	0x0a, 0x27, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x9f, 0x4e, 0x12, 0x2b, 0x0a, 0x26,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x5f, 0x4e, 0x69, 0x6c, 0x10, 0xa0, 0x4e, 0x12, 0x2f, 0x0a, 0x2a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x44, 0x72, 0x61, 0x77, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x69, 0x6c, 0x10, 0xa1, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x5f, 0x46, 0x61, 0x69, 0x6c,
	0x10, 0xa2, 0x4e, 0x2a, 0xc3, 0x02, 0x0a, 0x16, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75, 0x72,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x54, 0x75,
	0x72, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x4c, 0x55, 0x43, 0x4b,
	0x59, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0xda, 0x14, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x4c, 0x55, 0x43, 0x4b, 0x59, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0xdb, 0x14, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0xdc, 0x14, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x54, 0x55, 0x52,
	0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0xdd, 0x14, 0x12, 0x23,
	0x0a, 0x1e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b,
	0x59, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x5a, 0x45,
	0x10, 0xde, 0x14, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x44, 0x50, 0x52, 0x49, 0x5a, 0x45, 0x10, 0xdf, 0x14, 0x12, 0x2a, 0x0a,
	0x25, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59,
	0x54, 0x55, 0x52, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xe0, 0x14, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_actluckyturntable_proto_rawDescOnce sync.Once
	file_actluckyturntable_proto_rawDescData = file_actluckyturntable_proto_rawDesc
)

func file_actluckyturntable_proto_rawDescGZIP() []byte {
	file_actluckyturntable_proto_rawDescOnce.Do(func() {
		file_actluckyturntable_proto_rawDescData = protoimpl.X.CompressGZIP(file_actluckyturntable_proto_rawDescData)
	})
	return file_actluckyturntable_proto_rawDescData
}

var file_actluckyturntable_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_actluckyturntable_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_actluckyturntable_proto_goTypes = []interface{}{
	(OpResultCode_ActLuckTurn)(0),         // 0: activity.OpResultCode_ActLuckTurn
	(LuckyTurntablePacketID)(0),           // 1: activity.LuckyTurntablePacketID
	(*LuckyTurntableConfig)(nil),          // 2: activity.LuckyTurntableConfig
	(*SCLuckyTurntablePersonalPrize)(nil), // 3: activity.SCLuckyTurntablePersonalPrize
	(*SCLuckyTurntablePrize)(nil),         // 4: activity.SCLuckyTurntablePrize
	(*SCLuckyTurntableGrandPrize)(nil),    // 5: activity.SCLuckyTurntableGrandPrize
	(*CSLuckyTurntableInfo)(nil),          // 6: activity.CSLuckyTurntableInfo
	(*SCLuckyTurntableInfo)(nil),          // 7: activity.SCLuckyTurntableInfo
	(*SCLuckyTurntableModifyConfig)(nil),  // 8: activity.SCLuckyTurntableModifyConfig
	(*CSLuckyTurntableDraw)(nil),          // 9: activity.CSLuckyTurntableDraw
	(*SCLuckyTurntableDraw)(nil),          // 10: activity.SCLuckyTurntableDraw
}
var file_actluckyturntable_proto_depIdxs = []int32{
	2, // 0: activity.SCLuckyTurntableInfo.TurntablesConfigs:type_name -> activity.LuckyTurntableConfig
	4, // 1: activity.SCLuckyTurntableInfo.Prize:type_name -> activity.SCLuckyTurntablePrize
	5, // 2: activity.SCLuckyTurntableInfo.GrandPrize:type_name -> activity.SCLuckyTurntableGrandPrize
	3, // 3: activity.SCLuckyTurntableInfo.PersonalPrize:type_name -> activity.SCLuckyTurntablePersonalPrize
	0, // 4: activity.SCLuckyTurntableInfo.OpRetCode:type_name -> activity.OpResultCode_ActLuckTurn
	2, // 5: activity.SCLuckyTurntableModifyConfig.TurntablesConfigs:type_name -> activity.LuckyTurntableConfig
	0, // 6: activity.SCLuckyTurntableDraw.OpRetCode:type_name -> activity.OpResultCode_ActLuckTurn
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_actluckyturntable_proto_init() }
func file_actluckyturntable_proto_init() {
	if File_actluckyturntable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_actluckyturntable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyTurntableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntablePersonalPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntablePrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntableGrandPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSLuckyTurntableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntableModifyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSLuckyTurntableDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actluckyturntable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCLuckyTurntableDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actluckyturntable_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_actluckyturntable_proto_goTypes,
		DependencyIndexes: file_actluckyturntable_proto_depIdxs,
		EnumInfos:         file_actluckyturntable_proto_enumTypes,
		MessageInfos:      file_actluckyturntable_proto_msgTypes,
	}.Build()
	File_actluckyturntable_proto = out.File
	file_actluckyturntable_proto_rawDesc = nil
	file_actluckyturntable_proto_goTypes = nil
	file_actluckyturntable_proto_depIdxs = nil
}
