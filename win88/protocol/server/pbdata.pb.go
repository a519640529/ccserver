// Code generated by xlsx2proto.
// DO NOT EDIT!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: pbdata.proto

package server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DB_ActSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type    int32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name    int32 `protobuf:"varint,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Item_Id int32 `protobuf:"varint,4,opt,name=Item_Id,json=ItemId,proto3" json:"Item_Id,omitempty"`
	Grade   int32 `protobuf:"varint,5,opt,name=Grade,proto3" json:"Grade,omitempty"`
}

func (x *DB_ActSign) Reset() {
	*x = DB_ActSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ActSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ActSign) ProtoMessage() {}

func (x *DB_ActSign) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ActSign.ProtoReflect.Descriptor instead.
func (*DB_ActSign) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{0}
}

func (x *DB_ActSign) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_ActSign) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DB_ActSign) GetName() int32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *DB_ActSign) GetItem_Id() int32 {
	if x != nil {
		return x.Item_Id
	}
	return 0
}

func (x *DB_ActSign) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

type DB_ActSignArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_ActSign `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_ActSignArray) Reset() {
	*x = DB_ActSignArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ActSignArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ActSignArray) ProtoMessage() {}

func (x *DB_ActSignArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ActSignArray.ProtoReflect.Descriptor instead.
func (*DB_ActSignArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{1}
}

func (x *DB_ActSignArray) GetArr() []*DB_ActSign {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Activity1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Parameter int32  `protobuf:"varint,2,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	Turn      int32  `protobuf:"varint,3,opt,name=Turn,proto3" json:"Turn,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Costype   int32  `protobuf:"varint,5,opt,name=Costype,proto3" json:"Costype,omitempty"`
	Costp     int32  `protobuf:"varint,6,opt,name=Costp,proto3" json:"Costp,omitempty"`
	Cost      int32  `protobuf:"varint,7,opt,name=Cost,proto3" json:"Cost,omitempty"`
	Typee     int32  `protobuf:"varint,8,opt,name=Typee,proto3" json:"Typee,omitempty"`
	Propid    int32  `protobuf:"varint,9,opt,name=Propid,proto3" json:"Propid,omitempty"`
	Value     int32  `protobuf:"varint,10,opt,name=Value,proto3" json:"Value,omitempty"`
	Getype    int32  `protobuf:"varint,11,opt,name=Getype,proto3" json:"Getype,omitempty"`
}

func (x *DB_Activity1) Reset() {
	*x = DB_Activity1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Activity1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Activity1) ProtoMessage() {}

func (x *DB_Activity1) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Activity1.ProtoReflect.Descriptor instead.
func (*DB_Activity1) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{2}
}

func (x *DB_Activity1) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Activity1) GetParameter() int32 {
	if x != nil {
		return x.Parameter
	}
	return 0
}

func (x *DB_Activity1) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *DB_Activity1) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DB_Activity1) GetCostype() int32 {
	if x != nil {
		return x.Costype
	}
	return 0
}

func (x *DB_Activity1) GetCostp() int32 {
	if x != nil {
		return x.Costp
	}
	return 0
}

func (x *DB_Activity1) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *DB_Activity1) GetTypee() int32 {
	if x != nil {
		return x.Typee
	}
	return 0
}

func (x *DB_Activity1) GetPropid() int32 {
	if x != nil {
		return x.Propid
	}
	return 0
}

func (x *DB_Activity1) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DB_Activity1) GetGetype() int32 {
	if x != nil {
		return x.Getype
	}
	return 0
}

type DB_Activity1Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Activity1 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Activity1Array) Reset() {
	*x = DB_Activity1Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Activity1Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Activity1Array) ProtoMessage() {}

func (x *DB_Activity1Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Activity1Array.ProtoReflect.Descriptor instead.
func (*DB_Activity1Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{3}
}

func (x *DB_Activity1Array) GetArr() []*DB_Activity1 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_AnimalColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Desc        string  `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ColorChance []int32 `protobuf:"varint,3,rep,packed,name=ColorChance,proto3" json:"ColorChance,omitempty"`
}

func (x *DB_AnimalColor) Reset() {
	*x = DB_AnimalColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_AnimalColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_AnimalColor) ProtoMessage() {}

func (x *DB_AnimalColor) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_AnimalColor.ProtoReflect.Descriptor instead.
func (*DB_AnimalColor) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{4}
}

func (x *DB_AnimalColor) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_AnimalColor) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_AnimalColor) GetColorChance() []int32 {
	if x != nil {
		return x.ColorChance
	}
	return nil
}

type DB_AnimalColorArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_AnimalColor `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_AnimalColorArray) Reset() {
	*x = DB_AnimalColorArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_AnimalColorArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_AnimalColorArray) ProtoMessage() {}

func (x *DB_AnimalColorArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_AnimalColorArray.ProtoReflect.Descriptor instead.
func (*DB_AnimalColorArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{5}
}

func (x *DB_AnimalColorArray) GetArr() []*DB_AnimalColor {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_ClientVer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PackageFlag string `protobuf:"bytes,2,opt,name=PackageFlag,proto3" json:"PackageFlag,omitempty"`
	PackVers    string `protobuf:"bytes,3,opt,name=PackVers,proto3" json:"PackVers,omitempty"`
	GameVers    string `protobuf:"bytes,4,opt,name=GameVers,proto3" json:"GameVers,omitempty"`
}

func (x *DB_ClientVer) Reset() {
	*x = DB_ClientVer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ClientVer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ClientVer) ProtoMessage() {}

func (x *DB_ClientVer) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ClientVer.ProtoReflect.Descriptor instead.
func (*DB_ClientVer) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{6}
}

func (x *DB_ClientVer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_ClientVer) GetPackageFlag() string {
	if x != nil {
		return x.PackageFlag
	}
	return ""
}

func (x *DB_ClientVer) GetPackVers() string {
	if x != nil {
		return x.PackVers
	}
	return ""
}

func (x *DB_ClientVer) GetGameVers() string {
	if x != nil {
		return x.GameVers
	}
	return ""
}

type DB_ClientVerArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_ClientVer `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_ClientVerArray) Reset() {
	*x = DB_ClientVerArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ClientVerArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ClientVerArray) ProtoMessage() {}

func (x *DB_ClientVerArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ClientVerArray.ProtoReflect.Descriptor instead.
func (*DB_ClientVerArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{7}
}

func (x *DB_ClientVerArray) GetArr() []*DB_ClientVer {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Createroom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GameId    int32   `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	GameSite  int32   `protobuf:"varint,3,opt,name=GameSite,proto3" json:"GameSite,omitempty"`
	GoldRange []int32 `protobuf:"varint,4,rep,packed,name=GoldRange,proto3" json:"GoldRange,omitempty"`
	BetRange  []int32 `protobuf:"varint,5,rep,packed,name=BetRange,proto3" json:"BetRange,omitempty"`
}

func (x *DB_Createroom) Reset() {
	*x = DB_Createroom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Createroom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Createroom) ProtoMessage() {}

func (x *DB_Createroom) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Createroom.ProtoReflect.Descriptor instead.
func (*DB_Createroom) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{8}
}

func (x *DB_Createroom) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Createroom) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *DB_Createroom) GetGameSite() int32 {
	if x != nil {
		return x.GameSite
	}
	return 0
}

func (x *DB_Createroom) GetGoldRange() []int32 {
	if x != nil {
		return x.GoldRange
	}
	return nil
}

func (x *DB_Createroom) GetBetRange() []int32 {
	if x != nil {
		return x.BetRange
	}
	return nil
}

type DB_CreateroomArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Createroom `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_CreateroomArray) Reset() {
	*x = DB_CreateroomArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_CreateroomArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_CreateroomArray) ProtoMessage() {}

func (x *DB_CreateroomArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_CreateroomArray.ProtoReflect.Descriptor instead.
func (*DB_CreateroomArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{9}
}

func (x *DB_CreateroomArray) GetArr() []*DB_Createroom {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Fish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	NameE       string  `protobuf:"bytes,3,opt,name=NameE,proto3" json:"NameE,omitempty"`
	Gold        int32   `protobuf:"varint,4,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Icon        string  `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Speed       int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Exp         int32   `protobuf:"varint,7,opt,name=Exp,proto3" json:"Exp,omitempty"`
	FrameCnt    int32   `protobuf:"varint,8,opt,name=FrameCnt,proto3" json:"FrameCnt,omitempty"`
	FrameDelay  int32   `protobuf:"varint,9,opt,name=FrameDelay,proto3" json:"FrameDelay,omitempty"`
	Rate        int32   `protobuf:"varint,10,opt,name=Rate,proto3" json:"Rate,omitempty"`
	ShowType    int32   `protobuf:"varint,11,opt,name=ShowType,proto3" json:"ShowType,omitempty"`
	Show        int32   `protobuf:"varint,12,opt,name=Show,proto3" json:"Show,omitempty"`
	ShowScale   int32   `protobuf:"varint,13,opt,name=ShowScale,proto3" json:"ShowScale,omitempty"`
	ShowPos     []int32 `protobuf:"varint,14,rep,packed,name=ShowPos,proto3" json:"ShowPos,omitempty"`
	DieSound    string  `protobuf:"bytes,15,opt,name=DieSound,proto3" json:"DieSound,omitempty"`
	DieFrame    int32   `protobuf:"varint,16,opt,name=DieFrame,proto3" json:"DieFrame,omitempty"`
	DieRotate   int32   `protobuf:"varint,17,opt,name=DieRotate,proto3" json:"DieRotate,omitempty"`
	DieEffect   int32   `protobuf:"varint,18,opt,name=DieEffect,proto3" json:"DieEffect,omitempty"`
	DieShake    int32   `protobuf:"varint,19,opt,name=DieShake,proto3" json:"DieShake,omitempty"`
	ShakeRange  int32   `protobuf:"varint,20,opt,name=ShakeRange,proto3" json:"ShakeRange,omitempty"`
	Shape       string  `protobuf:"bytes,21,opt,name=Shape,proto3" json:"Shape,omitempty"`
	IsBoss      int32   `protobuf:"varint,22,opt,name=IsBoss,proto3" json:"IsBoss,omitempty"`
	ResId       int32   `protobuf:"varint,23,opt,name=ResId,proto3" json:"ResId,omitempty"`
	DieParticle string  `protobuf:"bytes,24,opt,name=DieParticle,proto3" json:"DieParticle,omitempty"`
	GroupShape  int32   `protobuf:"varint,25,opt,name=GroupShape,proto3" json:"GroupShape,omitempty"`
	GroupFishes []int32 `protobuf:"varint,26,rep,packed,name=GroupFishes,proto3" json:"GroupFishes,omitempty"`
	Zorder      int32   `protobuf:"varint,27,opt,name=Zorder,proto3" json:"Zorder,omitempty"`
	ResPng      string  `protobuf:"bytes,28,opt,name=ResPng,proto3" json:"ResPng,omitempty"`
	ResPlist    string  `protobuf:"bytes,29,opt,name=ResPlist,proto3" json:"ResPlist,omitempty"`
	ExportJson  string  `protobuf:"bytes,30,opt,name=ExportJson,proto3" json:"ExportJson,omitempty"`
	AimIcon     string  `protobuf:"bytes,31,opt,name=AimIcon,proto3" json:"AimIcon,omitempty"`
	GameId      int32   `protobuf:"varint,32,opt,name=GameId,proto3" json:"GameId,omitempty"`
	Sort        int32   `protobuf:"varint,33,opt,name=Sort,proto3" json:"Sort,omitempty"`
	FishType    int32   `protobuf:"varint,34,opt,name=FishType,proto3" json:"FishType,omitempty"`
	RandomCoin  string  `protobuf:"bytes,35,opt,name=RandomCoin,proto3" json:"RandomCoin,omitempty"`
}

func (x *DB_Fish) Reset() {
	*x = DB_Fish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Fish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Fish) ProtoMessage() {}

func (x *DB_Fish) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Fish.ProtoReflect.Descriptor instead.
func (*DB_Fish) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{10}
}

func (x *DB_Fish) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Fish) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Fish) GetNameE() string {
	if x != nil {
		return x.NameE
	}
	return ""
}

func (x *DB_Fish) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *DB_Fish) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DB_Fish) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Fish) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *DB_Fish) GetFrameCnt() int32 {
	if x != nil {
		return x.FrameCnt
	}
	return 0
}

func (x *DB_Fish) GetFrameDelay() int32 {
	if x != nil {
		return x.FrameDelay
	}
	return 0
}

func (x *DB_Fish) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *DB_Fish) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *DB_Fish) GetShow() int32 {
	if x != nil {
		return x.Show
	}
	return 0
}

func (x *DB_Fish) GetShowScale() int32 {
	if x != nil {
		return x.ShowScale
	}
	return 0
}

func (x *DB_Fish) GetShowPos() []int32 {
	if x != nil {
		return x.ShowPos
	}
	return nil
}

func (x *DB_Fish) GetDieSound() string {
	if x != nil {
		return x.DieSound
	}
	return ""
}

func (x *DB_Fish) GetDieFrame() int32 {
	if x != nil {
		return x.DieFrame
	}
	return 0
}

func (x *DB_Fish) GetDieRotate() int32 {
	if x != nil {
		return x.DieRotate
	}
	return 0
}

func (x *DB_Fish) GetDieEffect() int32 {
	if x != nil {
		return x.DieEffect
	}
	return 0
}

func (x *DB_Fish) GetDieShake() int32 {
	if x != nil {
		return x.DieShake
	}
	return 0
}

func (x *DB_Fish) GetShakeRange() int32 {
	if x != nil {
		return x.ShakeRange
	}
	return 0
}

func (x *DB_Fish) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *DB_Fish) GetIsBoss() int32 {
	if x != nil {
		return x.IsBoss
	}
	return 0
}

func (x *DB_Fish) GetResId() int32 {
	if x != nil {
		return x.ResId
	}
	return 0
}

func (x *DB_Fish) GetDieParticle() string {
	if x != nil {
		return x.DieParticle
	}
	return ""
}

func (x *DB_Fish) GetGroupShape() int32 {
	if x != nil {
		return x.GroupShape
	}
	return 0
}

func (x *DB_Fish) GetGroupFishes() []int32 {
	if x != nil {
		return x.GroupFishes
	}
	return nil
}

func (x *DB_Fish) GetZorder() int32 {
	if x != nil {
		return x.Zorder
	}
	return 0
}

func (x *DB_Fish) GetResPng() string {
	if x != nil {
		return x.ResPng
	}
	return ""
}

func (x *DB_Fish) GetResPlist() string {
	if x != nil {
		return x.ResPlist
	}
	return ""
}

func (x *DB_Fish) GetExportJson() string {
	if x != nil {
		return x.ExportJson
	}
	return ""
}

func (x *DB_Fish) GetAimIcon() string {
	if x != nil {
		return x.AimIcon
	}
	return ""
}

func (x *DB_Fish) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *DB_Fish) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DB_Fish) GetFishType() int32 {
	if x != nil {
		return x.FishType
	}
	return 0
}

func (x *DB_Fish) GetRandomCoin() string {
	if x != nil {
		return x.RandomCoin
	}
	return ""
}

type DB_FishArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Fish `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishArray) Reset() {
	*x = DB_FishArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishArray) ProtoMessage() {}

func (x *DB_FishArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishArray.ProtoReflect.Descriptor instead.
func (*DB_FishArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{11}
}

func (x *DB_FishArray) GetArr() []*DB_Fish {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FishHP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Gold   []int32 `protobuf:"varint,3,rep,packed,name=Gold,proto3" json:"Gold,omitempty"`
	Rate   int32   `protobuf:"varint,4,opt,name=Rate,proto3" json:"Rate,omitempty"`
	Ratio  int32   `protobuf:"varint,5,opt,name=Ratio,proto3" json:"Ratio,omitempty"`
	Ratio1 []int32 `protobuf:"varint,6,rep,packed,name=Ratio1,proto3" json:"Ratio1,omitempty"`
}

func (x *DB_FishHP) Reset() {
	*x = DB_FishHP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishHP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishHP) ProtoMessage() {}

func (x *DB_FishHP) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishHP.ProtoReflect.Descriptor instead.
func (*DB_FishHP) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{12}
}

func (x *DB_FishHP) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FishHP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FishHP) GetGold() []int32 {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *DB_FishHP) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *DB_FishHP) GetRatio() int32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *DB_FishHP) GetRatio1() []int32 {
	if x != nil {
		return x.Ratio1
	}
	return nil
}

type DB_FishHPArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FishHP `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishHPArray) Reset() {
	*x = DB_FishHPArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishHPArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishHPArray) ProtoMessage() {}

func (x *DB_FishHPArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishHPArray.ProtoReflect.Descriptor instead.
func (*DB_FishHPArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{13}
}

func (x *DB_FishHPArray) GetArr() []*DB_FishHP {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FishHP2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Fishid int32   `protobuf:"varint,2,opt,name=Fishid,proto3" json:"Fishid,omitempty"`
	Name   string  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Gold   []int32 `protobuf:"varint,4,rep,packed,name=Gold,proto3" json:"Gold,omitempty"`
	Level  []int32 `protobuf:"varint,5,rep,packed,name=Level,proto3" json:"Level,omitempty"`
}

func (x *DB_FishHP2) Reset() {
	*x = DB_FishHP2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishHP2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishHP2) ProtoMessage() {}

func (x *DB_FishHP2) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishHP2.ProtoReflect.Descriptor instead.
func (*DB_FishHP2) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{14}
}

func (x *DB_FishHP2) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FishHP2) GetFishid() int32 {
	if x != nil {
		return x.Fishid
	}
	return 0
}

func (x *DB_FishHP2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FishHP2) GetGold() []int32 {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *DB_FishHP2) GetLevel() []int32 {
	if x != nil {
		return x.Level
	}
	return nil
}

type DB_FishHP2Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FishHP2 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishHP2Array) Reset() {
	*x = DB_FishHP2Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishHP2Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishHP2Array) ProtoMessage() {}

func (x *DB_FishHP2Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishHP2Array.ProtoReflect.Descriptor instead.
func (*DB_FishHP2Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{15}
}

func (x *DB_FishHP2Array) GetArr() []*DB_FishHP2 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FishPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SceneType int32 `protobuf:"varint,2,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	PoolType  int32 `protobuf:"varint,3,opt,name=PoolType,proto3" json:"PoolType,omitempty"`
	PoolMin   int32 `protobuf:"varint,4,opt,name=PoolMin,proto3" json:"PoolMin,omitempty"`
	PoolMax   int32 `protobuf:"varint,5,opt,name=PoolMax,proto3" json:"PoolMax,omitempty"`
	RateAdd   int32 `protobuf:"varint,6,opt,name=RateAdd,proto3" json:"RateAdd,omitempty"`
}

func (x *DB_FishPool) Reset() {
	*x = DB_FishPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishPool) ProtoMessage() {}

func (x *DB_FishPool) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishPool.ProtoReflect.Descriptor instead.
func (*DB_FishPool) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{16}
}

func (x *DB_FishPool) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FishPool) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *DB_FishPool) GetPoolType() int32 {
	if x != nil {
		return x.PoolType
	}
	return 0
}

func (x *DB_FishPool) GetPoolMin() int32 {
	if x != nil {
		return x.PoolMin
	}
	return 0
}

func (x *DB_FishPool) GetPoolMax() int32 {
	if x != nil {
		return x.PoolMax
	}
	return 0
}

func (x *DB_FishPool) GetRateAdd() int32 {
	if x != nil {
		return x.RateAdd
	}
	return 0
}

type DB_FishPoolArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FishPool `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishPoolArray) Reset() {
	*x = DB_FishPoolArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishPoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishPoolArray) ProtoMessage() {}

func (x *DB_FishPoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishPoolArray.ProtoReflect.Descriptor instead.
func (*DB_FishPoolArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{17}
}

func (x *DB_FishPoolArray) GetArr() []*DB_FishPool {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FishRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Gold     []int32 `protobuf:"varint,3,rep,packed,name=Gold,proto3" json:"Gold,omitempty"`
	RunGold  int32   `protobuf:"varint,4,opt,name=RunGold,proto3" json:"RunGold,omitempty"`
	RateA    []int32 `protobuf:"varint,5,rep,packed,name=RateA,proto3" json:"RateA,omitempty"`
	RateB    []int32 `protobuf:"varint,6,rep,packed,name=RateB,proto3" json:"RateB,omitempty"`
	RateC    []int32 `protobuf:"varint,7,rep,packed,name=RateC,proto3" json:"RateC,omitempty"`
	PoolType int32   `protobuf:"varint,8,opt,name=PoolType,proto3" json:"PoolType,omitempty"`
}

func (x *DB_FishRate) Reset() {
	*x = DB_FishRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishRate) ProtoMessage() {}

func (x *DB_FishRate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishRate.ProtoReflect.Descriptor instead.
func (*DB_FishRate) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{18}
}

func (x *DB_FishRate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FishRate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FishRate) GetGold() []int32 {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *DB_FishRate) GetRunGold() int32 {
	if x != nil {
		return x.RunGold
	}
	return 0
}

func (x *DB_FishRate) GetRateA() []int32 {
	if x != nil {
		return x.RateA
	}
	return nil
}

func (x *DB_FishRate) GetRateB() []int32 {
	if x != nil {
		return x.RateB
	}
	return nil
}

func (x *DB_FishRate) GetRateC() []int32 {
	if x != nil {
		return x.RateC
	}
	return nil
}

func (x *DB_FishRate) GetPoolType() int32 {
	if x != nil {
		return x.PoolType
	}
	return 0
}

type DB_FishRateArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FishRate `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishRateArray) Reset() {
	*x = DB_FishRateArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishRateArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishRateArray) ProtoMessage() {}

func (x *DB_FishRateArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishRateArray.ProtoReflect.Descriptor instead.
func (*DB_FishRateArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{19}
}

func (x *DB_FishRateArray) GetArr() []*DB_FishRate {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FishRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RoomId           int32  `protobuf:"varint,2,opt,name=RoomId,proto3" json:"RoomId,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SumGold1         string `protobuf:"bytes,4,opt,name=SumGold1,proto3" json:"SumGold1,omitempty"`
	SumGold2         string `protobuf:"bytes,5,opt,name=SumGold2,proto3" json:"SumGold2,omitempty"`
	SumGold3         string `protobuf:"bytes,6,opt,name=SumGold3,proto3" json:"SumGold3,omitempty"`
	SumGold4         string `protobuf:"bytes,7,opt,name=SumGold4,proto3" json:"SumGold4,omitempty"`
	SumGold5         string `protobuf:"bytes,8,opt,name=SumGold5,proto3" json:"SumGold5,omitempty"`
	BossCDTime       int32  `protobuf:"varint,9,opt,name=BossCDTime,proto3" json:"BossCDTime,omitempty"`
	LittleBossCDTime int32  `protobuf:"varint,10,opt,name=LittleBossCDTime,proto3" json:"LittleBossCDTime,omitempty"`
	EnableBoss       string `protobuf:"bytes,11,opt,name=EnableBoss,proto3" json:"EnableBoss,omitempty"`
	EnableLittleBoss string `protobuf:"bytes,12,opt,name=EnableLittleBoss,proto3" json:"EnableLittleBoss,omitempty"`
}

func (x *DB_FishRoom) Reset() {
	*x = DB_FishRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishRoom) ProtoMessage() {}

func (x *DB_FishRoom) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishRoom.ProtoReflect.Descriptor instead.
func (*DB_FishRoom) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{20}
}

func (x *DB_FishRoom) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FishRoom) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *DB_FishRoom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FishRoom) GetSumGold1() string {
	if x != nil {
		return x.SumGold1
	}
	return ""
}

func (x *DB_FishRoom) GetSumGold2() string {
	if x != nil {
		return x.SumGold2
	}
	return ""
}

func (x *DB_FishRoom) GetSumGold3() string {
	if x != nil {
		return x.SumGold3
	}
	return ""
}

func (x *DB_FishRoom) GetSumGold4() string {
	if x != nil {
		return x.SumGold4
	}
	return ""
}

func (x *DB_FishRoom) GetSumGold5() string {
	if x != nil {
		return x.SumGold5
	}
	return ""
}

func (x *DB_FishRoom) GetBossCDTime() int32 {
	if x != nil {
		return x.BossCDTime
	}
	return 0
}

func (x *DB_FishRoom) GetLittleBossCDTime() int32 {
	if x != nil {
		return x.LittleBossCDTime
	}
	return 0
}

func (x *DB_FishRoom) GetEnableBoss() string {
	if x != nil {
		return x.EnableBoss
	}
	return ""
}

func (x *DB_FishRoom) GetEnableLittleBoss() string {
	if x != nil {
		return x.EnableLittleBoss
	}
	return ""
}

type DB_FishRoomArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FishRoom `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FishRoomArray) Reset() {
	*x = DB_FishRoomArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FishRoomArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FishRoomArray) ProtoMessage() {}

func (x *DB_FishRoomArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FishRoomArray.ProtoReflect.Descriptor instead.
func (*DB_FishRoomArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{21}
}

func (x *DB_FishRoomArray) GetArr() []*DB_FishRoom {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FortuneGod_Odds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Rateodds3 int32  `protobuf:"varint,3,opt,name=Rateodds3,proto3" json:"Rateodds3,omitempty"`
	Rateodds4 int32  `protobuf:"varint,4,opt,name=Rateodds4,proto3" json:"Rateodds4,omitempty"`
	Rateodds5 int32  `protobuf:"varint,5,opt,name=Rateodds5,proto3" json:"Rateodds5,omitempty"`
}

func (x *DB_FortuneGod_Odds) Reset() {
	*x = DB_FortuneGod_Odds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_Odds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_Odds) ProtoMessage() {}

func (x *DB_FortuneGod_Odds) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_Odds.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_Odds) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{22}
}

func (x *DB_FortuneGod_Odds) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FortuneGod_Odds) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FortuneGod_Odds) GetRateodds3() int32 {
	if x != nil {
		return x.Rateodds3
	}
	return 0
}

func (x *DB_FortuneGod_Odds) GetRateodds4() int32 {
	if x != nil {
		return x.Rateodds4
	}
	return 0
}

func (x *DB_FortuneGod_Odds) GetRateodds5() int32 {
	if x != nil {
		return x.Rateodds5
	}
	return 0
}

type DB_FortuneGod_OddsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FortuneGod_Odds `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FortuneGod_OddsArray) Reset() {
	*x = DB_FortuneGod_OddsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_OddsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_OddsArray) ProtoMessage() {}

func (x *DB_FortuneGod_OddsArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_OddsArray.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_OddsArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{23}
}

func (x *DB_FortuneGod_OddsArray) GetArr() []*DB_FortuneGod_Odds {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FortuneGod_TurnRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ReturnRateMin int32   `protobuf:"varint,2,opt,name=ReturnRateMin,proto3" json:"ReturnRateMin,omitempty"`
	ReturnRateMax int32   `protobuf:"varint,3,opt,name=ReturnRateMax,proto3" json:"ReturnRateMax,omitempty"`
	Chance        []int32 `protobuf:"varint,4,rep,packed,name=Chance,proto3" json:"Chance,omitempty"`
}

func (x *DB_FortuneGod_TurnRate) Reset() {
	*x = DB_FortuneGod_TurnRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_TurnRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_TurnRate) ProtoMessage() {}

func (x *DB_FortuneGod_TurnRate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_TurnRate.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_TurnRate) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{24}
}

func (x *DB_FortuneGod_TurnRate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FortuneGod_TurnRate) GetReturnRateMin() int32 {
	if x != nil {
		return x.ReturnRateMin
	}
	return 0
}

func (x *DB_FortuneGod_TurnRate) GetReturnRateMax() int32 {
	if x != nil {
		return x.ReturnRateMax
	}
	return 0
}

func (x *DB_FortuneGod_TurnRate) GetChance() []int32 {
	if x != nil {
		return x.Chance
	}
	return nil
}

type DB_FortuneGod_TurnRateArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FortuneGod_TurnRate `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FortuneGod_TurnRateArray) Reset() {
	*x = DB_FortuneGod_TurnRateArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_TurnRateArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_TurnRateArray) ProtoMessage() {}

func (x *DB_FortuneGod_TurnRateArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_TurnRateArray.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_TurnRateArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{25}
}

func (x *DB_FortuneGod_TurnRateArray) GetArr() []*DB_FortuneGod_TurnRate {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FortuneGod_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Weight []int32 `protobuf:"varint,3,rep,packed,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *DB_FortuneGod_Weight) Reset() {
	*x = DB_FortuneGod_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_Weight) ProtoMessage() {}

func (x *DB_FortuneGod_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_Weight.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_Weight) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{26}
}

func (x *DB_FortuneGod_Weight) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FortuneGod_Weight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_FortuneGod_Weight) GetWeight() []int32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

type DB_FortuneGod_WeightArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FortuneGod_Weight `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FortuneGod_WeightArray) Reset() {
	*x = DB_FortuneGod_WeightArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_WeightArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_WeightArray) ProtoMessage() {}

func (x *DB_FortuneGod_WeightArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_WeightArray.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_WeightArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{27}
}

func (x *DB_FortuneGod_WeightArray) GetArr() []*DB_FortuneGod_Weight {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_FortuneGod_WeightCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsNew        int32   `protobuf:"varint,2,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	BetScope     []int32 `protobuf:"varint,3,rep,packed,name=BetScope,proto3" json:"BetScope,omitempty"`
	TrueCalcRate []int32 `protobuf:"varint,4,rep,packed,name=TrueCalcRate,proto3" json:"TrueCalcRate,omitempty"`
	WeightId     int32   `protobuf:"varint,5,opt,name=WeightId,proto3" json:"WeightId,omitempty"`
}

func (x *DB_FortuneGod_WeightCondition) Reset() {
	*x = DB_FortuneGod_WeightCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_WeightCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_WeightCondition) ProtoMessage() {}

func (x *DB_FortuneGod_WeightCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_WeightCondition.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_WeightCondition) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{28}
}

func (x *DB_FortuneGod_WeightCondition) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_FortuneGod_WeightCondition) GetIsNew() int32 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *DB_FortuneGod_WeightCondition) GetBetScope() []int32 {
	if x != nil {
		return x.BetScope
	}
	return nil
}

func (x *DB_FortuneGod_WeightCondition) GetTrueCalcRate() []int32 {
	if x != nil {
		return x.TrueCalcRate
	}
	return nil
}

func (x *DB_FortuneGod_WeightCondition) GetWeightId() int32 {
	if x != nil {
		return x.WeightId
	}
	return 0
}

type DB_FortuneGod_WeightConditionArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_FortuneGod_WeightCondition `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_FortuneGod_WeightConditionArray) Reset() {
	*x = DB_FortuneGod_WeightConditionArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_FortuneGod_WeightConditionArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_FortuneGod_WeightConditionArray) ProtoMessage() {}

func (x *DB_FortuneGod_WeightConditionArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_FortuneGod_WeightConditionArray.ProtoReflect.Descriptor instead.
func (*DB_FortuneGod_WeightConditionArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{29}
}

func (x *DB_FortuneGod_WeightConditionArray) GetArr() []*DB_FortuneGod_WeightCondition {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GamMatchLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Star       []int32 `protobuf:"varint,2,rep,packed,name=Star,proto3" json:"Star,omitempty"`
	Name       string  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Star2      int32   `protobuf:"varint,4,opt,name=Star2,proto3" json:"Star2,omitempty"`
	AwardType1 int32   `protobuf:"varint,5,opt,name=AwardType1,proto3" json:"AwardType1,omitempty"`
	AwardId1   int32   `protobuf:"varint,6,opt,name=AwardId1,proto3" json:"AwardId1,omitempty"`
	Number1    int32   `protobuf:"varint,7,opt,name=Number1,proto3" json:"Number1,omitempty"`
	AwardType2 int32   `protobuf:"varint,8,opt,name=AwardType2,proto3" json:"AwardType2,omitempty"`
	AwardId2   int32   `protobuf:"varint,9,opt,name=AwardId2,proto3" json:"AwardId2,omitempty"`
	Number2    int32   `protobuf:"varint,10,opt,name=Number2,proto3" json:"Number2,omitempty"`
	AwardType3 int32   `protobuf:"varint,11,opt,name=AwardType3,proto3" json:"AwardType3,omitempty"`
	AwardId3   int32   `protobuf:"varint,12,opt,name=AwardId3,proto3" json:"AwardId3,omitempty"`
	Number3    int32   `protobuf:"varint,13,opt,name=Number3,proto3" json:"Number3,omitempty"`
}

func (x *DB_GamMatchLV) Reset() {
	*x = DB_GamMatchLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GamMatchLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GamMatchLV) ProtoMessage() {}

func (x *DB_GamMatchLV) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GamMatchLV.ProtoReflect.Descriptor instead.
func (*DB_GamMatchLV) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{30}
}

func (x *DB_GamMatchLV) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GamMatchLV) GetStar() []int32 {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *DB_GamMatchLV) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_GamMatchLV) GetStar2() int32 {
	if x != nil {
		return x.Star2
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardType1() int32 {
	if x != nil {
		return x.AwardType1
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardId1() int32 {
	if x != nil {
		return x.AwardId1
	}
	return 0
}

func (x *DB_GamMatchLV) GetNumber1() int32 {
	if x != nil {
		return x.Number1
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardType2() int32 {
	if x != nil {
		return x.AwardType2
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardId2() int32 {
	if x != nil {
		return x.AwardId2
	}
	return 0
}

func (x *DB_GamMatchLV) GetNumber2() int32 {
	if x != nil {
		return x.Number2
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardType3() int32 {
	if x != nil {
		return x.AwardType3
	}
	return 0
}

func (x *DB_GamMatchLV) GetAwardId3() int32 {
	if x != nil {
		return x.AwardId3
	}
	return 0
}

func (x *DB_GamMatchLV) GetNumber3() int32 {
	if x != nil {
		return x.Number3
	}
	return 0
}

type DB_GamMatchLVArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GamMatchLV `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GamMatchLVArray) Reset() {
	*x = DB_GamMatchLVArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GamMatchLVArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GamMatchLVArray) ProtoMessage() {}

func (x *DB_GamMatchLVArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GamMatchLVArray.ProtoReflect.Descriptor instead.
func (*DB_GamMatchLVArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{31}
}

func (x *DB_GamMatchLVArray) GetArr() []*DB_GamMatchLV {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GameCoinPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	InitValue        int32 `protobuf:"varint,2,opt,name=InitValue,proto3" json:"InitValue,omitempty"`
	LowerLimit       int32 `protobuf:"varint,3,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	UpperLimit       int32 `protobuf:"varint,4,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	UpperOffsetLimit int32 `protobuf:"varint,5,opt,name=UpperOffsetLimit,proto3" json:"UpperOffsetLimit,omitempty"`
	MaxOutValue      int32 `protobuf:"varint,6,opt,name=MaxOutValue,proto3" json:"MaxOutValue,omitempty"`
	ChangeRate       int32 `protobuf:"varint,7,opt,name=ChangeRate,proto3" json:"ChangeRate,omitempty"`
	MinOutPlayerNum  int32 `protobuf:"varint,8,opt,name=MinOutPlayerNum,proto3" json:"MinOutPlayerNum,omitempty"`
	UpperLimitOfOdds int32 `protobuf:"varint,9,opt,name=UpperLimitOfOdds,proto3" json:"UpperLimitOfOdds,omitempty"`
	BaseRate         int32 `protobuf:"varint,10,opt,name=BaseRate,proto3" json:"BaseRate,omitempty"`
	CtroRate         int32 `protobuf:"varint,11,opt,name=CtroRate,proto3" json:"CtroRate,omitempty"`
	HardTimeMin      int32 `protobuf:"varint,12,opt,name=HardTimeMin,proto3" json:"HardTimeMin,omitempty"`
	HardTimeMax      int32 `protobuf:"varint,13,opt,name=HardTimeMax,proto3" json:"HardTimeMax,omitempty"`
	NormalTimeMin    int32 `protobuf:"varint,14,opt,name=NormalTimeMin,proto3" json:"NormalTimeMin,omitempty"`
	NormalTimeMax    int32 `protobuf:"varint,15,opt,name=NormalTimeMax,proto3" json:"NormalTimeMax,omitempty"`
	EasyTimeMin      int32 `protobuf:"varint,16,opt,name=EasyTimeMin,proto3" json:"EasyTimeMin,omitempty"`
	EasyTimeMax      int32 `protobuf:"varint,17,opt,name=EasyTimeMax,proto3" json:"EasyTimeMax,omitempty"`
	EasrierTimeMin   int32 `protobuf:"varint,18,opt,name=EasrierTimeMin,proto3" json:"EasrierTimeMin,omitempty"`
	EasrierTimeMax   int32 `protobuf:"varint,19,opt,name=EasrierTimeMax,proto3" json:"EasrierTimeMax,omitempty"`
	CpCangeType      int32 `protobuf:"varint,20,opt,name=CpCangeType,proto3" json:"CpCangeType,omitempty"`
	CpChangeInterval int32 `protobuf:"varint,21,opt,name=CpChangeInterval,proto3" json:"CpChangeInterval,omitempty"`
	CpChangeTotle    int32 `protobuf:"varint,22,opt,name=CpChangeTotle,proto3" json:"CpChangeTotle,omitempty"`
	CpChangeLower    int32 `protobuf:"varint,23,opt,name=CpChangeLower,proto3" json:"CpChangeLower,omitempty"`
	CpChangeUpper    int32 `protobuf:"varint,24,opt,name=CpChangeUpper,proto3" json:"CpChangeUpper,omitempty"`
	ProfitRate       int32 `protobuf:"varint,25,opt,name=ProfitRate,proto3" json:"ProfitRate,omitempty"`
}

func (x *DB_GameCoinPool) Reset() {
	*x = DB_GameCoinPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameCoinPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameCoinPool) ProtoMessage() {}

func (x *DB_GameCoinPool) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameCoinPool.ProtoReflect.Descriptor instead.
func (*DB_GameCoinPool) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{32}
}

func (x *DB_GameCoinPool) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GameCoinPool) GetInitValue() int32 {
	if x != nil {
		return x.InitValue
	}
	return 0
}

func (x *DB_GameCoinPool) GetLowerLimit() int32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *DB_GameCoinPool) GetUpperLimit() int32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *DB_GameCoinPool) GetUpperOffsetLimit() int32 {
	if x != nil {
		return x.UpperOffsetLimit
	}
	return 0
}

func (x *DB_GameCoinPool) GetMaxOutValue() int32 {
	if x != nil {
		return x.MaxOutValue
	}
	return 0
}

func (x *DB_GameCoinPool) GetChangeRate() int32 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *DB_GameCoinPool) GetMinOutPlayerNum() int32 {
	if x != nil {
		return x.MinOutPlayerNum
	}
	return 0
}

func (x *DB_GameCoinPool) GetUpperLimitOfOdds() int32 {
	if x != nil {
		return x.UpperLimitOfOdds
	}
	return 0
}

func (x *DB_GameCoinPool) GetBaseRate() int32 {
	if x != nil {
		return x.BaseRate
	}
	return 0
}

func (x *DB_GameCoinPool) GetCtroRate() int32 {
	if x != nil {
		return x.CtroRate
	}
	return 0
}

func (x *DB_GameCoinPool) GetHardTimeMin() int32 {
	if x != nil {
		return x.HardTimeMin
	}
	return 0
}

func (x *DB_GameCoinPool) GetHardTimeMax() int32 {
	if x != nil {
		return x.HardTimeMax
	}
	return 0
}

func (x *DB_GameCoinPool) GetNormalTimeMin() int32 {
	if x != nil {
		return x.NormalTimeMin
	}
	return 0
}

func (x *DB_GameCoinPool) GetNormalTimeMax() int32 {
	if x != nil {
		return x.NormalTimeMax
	}
	return 0
}

func (x *DB_GameCoinPool) GetEasyTimeMin() int32 {
	if x != nil {
		return x.EasyTimeMin
	}
	return 0
}

func (x *DB_GameCoinPool) GetEasyTimeMax() int32 {
	if x != nil {
		return x.EasyTimeMax
	}
	return 0
}

func (x *DB_GameCoinPool) GetEasrierTimeMin() int32 {
	if x != nil {
		return x.EasrierTimeMin
	}
	return 0
}

func (x *DB_GameCoinPool) GetEasrierTimeMax() int32 {
	if x != nil {
		return x.EasrierTimeMax
	}
	return 0
}

func (x *DB_GameCoinPool) GetCpCangeType() int32 {
	if x != nil {
		return x.CpCangeType
	}
	return 0
}

func (x *DB_GameCoinPool) GetCpChangeInterval() int32 {
	if x != nil {
		return x.CpChangeInterval
	}
	return 0
}

func (x *DB_GameCoinPool) GetCpChangeTotle() int32 {
	if x != nil {
		return x.CpChangeTotle
	}
	return 0
}

func (x *DB_GameCoinPool) GetCpChangeLower() int32 {
	if x != nil {
		return x.CpChangeLower
	}
	return 0
}

func (x *DB_GameCoinPool) GetCpChangeUpper() int32 {
	if x != nil {
		return x.CpChangeUpper
	}
	return 0
}

func (x *DB_GameCoinPool) GetProfitRate() int32 {
	if x != nil {
		return x.ProfitRate
	}
	return 0
}

type DB_GameCoinPoolArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GameCoinPool `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GameCoinPoolArray) Reset() {
	*x = DB_GameCoinPoolArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameCoinPoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameCoinPoolArray) ProtoMessage() {}

func (x *DB_GameCoinPoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameCoinPoolArray.ProtoReflect.Descriptor instead.
func (*DB_GameCoinPoolArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{33}
}

func (x *DB_GameCoinPoolArray) GetArr() []*DB_GameCoinPool {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GameFree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Title           string  `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	GameId          int32   `protobuf:"varint,4,opt,name=GameId,proto3" json:"GameId,omitempty"`
	GameMode        int32   `protobuf:"varint,5,opt,name=GameMode,proto3" json:"GameMode,omitempty"`
	GameRule        int32   `protobuf:"varint,6,opt,name=GameRule,proto3" json:"GameRule,omitempty"`
	GameType        int32   `protobuf:"varint,7,opt,name=GameType,proto3" json:"GameType,omitempty"`
	SceneType       int32   `protobuf:"varint,8,opt,name=SceneType,proto3" json:"SceneType,omitempty"`
	Desc            string  `protobuf:"bytes,9,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ShowType        int32   `protobuf:"varint,10,opt,name=ShowType,proto3" json:"ShowType,omitempty"`
	SubShowType     int32   `protobuf:"varint,11,opt,name=SubShowType,proto3" json:"SubShowType,omitempty"`
	Flag            int32   `protobuf:"varint,12,opt,name=Flag,proto3" json:"Flag,omitempty"`
	TestTakeCoin    int32   `protobuf:"varint,13,opt,name=TestTakeCoin,proto3" json:"TestTakeCoin,omitempty"`
	ShowId          int32   `protobuf:"varint,14,opt,name=ShowId,proto3" json:"ShowId,omitempty"`
	LimitCoin       int32   `protobuf:"varint,15,opt,name=LimitCoin,proto3" json:"LimitCoin,omitempty"`
	MaxCoinLimit    int32   `protobuf:"varint,16,opt,name=MaxCoinLimit,proto3" json:"MaxCoinLimit,omitempty"`
	ServiceFee      int32   `protobuf:"varint,17,opt,name=ServiceFee,proto3" json:"ServiceFee,omitempty"`
	LowerThanKick   int32   `protobuf:"varint,18,opt,name=LowerThanKick,proto3" json:"LowerThanKick,omitempty"`
	BaseScore       int32   `protobuf:"varint,19,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`
	Turn            int32   `protobuf:"varint,20,opt,name=Turn,proto3" json:"Turn,omitempty"`
	BetDec          string  `protobuf:"bytes,21,opt,name=BetDec,proto3" json:"BetDec,omitempty"`
	Bot             int32   `protobuf:"varint,22,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Ai              []int32 `protobuf:"varint,23,rep,packed,name=Ai,proto3" json:"Ai,omitempty"`
	Banker          int32   `protobuf:"varint,24,opt,name=Banker,proto3" json:"Banker,omitempty"`
	MaxChip         int32   `protobuf:"varint,25,opt,name=MaxChip,proto3" json:"MaxChip,omitempty"`
	OtherIntParams  []int32 `protobuf:"varint,26,rep,packed,name=OtherIntParams,proto3" json:"OtherIntParams,omitempty"`
	Jackpot         []int32 `protobuf:"varint,27,rep,packed,name=Jackpot,proto3" json:"Jackpot,omitempty"`
	RobotNumRng     []int32 `protobuf:"varint,28,rep,packed,name=RobotNumRng,proto3" json:"RobotNumRng,omitempty"`
	RobotTakeCoin   []int32 `protobuf:"varint,29,rep,packed,name=RobotTakeCoin,proto3" json:"RobotTakeCoin,omitempty"`
	RobotLimitCoin  []int32 `protobuf:"varint,30,rep,packed,name=RobotLimitCoin,proto3" json:"RobotLimitCoin,omitempty"`
	BetLimit        int32   `protobuf:"varint,31,opt,name=BetLimit,proto3" json:"BetLimit,omitempty"`
	TaxRate         int32   `protobuf:"varint,32,opt,name=TaxRate,proto3" json:"TaxRate,omitempty"`
	SameIpLimit     int32   `protobuf:"varint,33,opt,name=SameIpLimit,proto3" json:"SameIpLimit,omitempty"`
	SamePlaceLimit  int32   `protobuf:"varint,34,opt,name=SamePlaceLimit,proto3" json:"SamePlaceLimit,omitempty"`
	GameDif         string  `protobuf:"bytes,35,opt,name=GameDif,proto3" json:"GameDif,omitempty"`
	GameClass       int32   `protobuf:"varint,36,opt,name=GameClass,proto3" json:"GameClass,omitempty"`
	PlatformName    string  `protobuf:"bytes,37,opt,name=PlatformName,proto3" json:"PlatformName,omitempty"`
	MaxBetCoin      []int32 `protobuf:"varint,38,rep,packed,name=MaxBetCoin,proto3" json:"MaxBetCoin,omitempty"`
	PlayNumLimit    int32   `protobuf:"varint,39,opt,name=PlayNumLimit,proto3" json:"PlayNumLimit,omitempty"`
	CreateRoomNum   int32   `protobuf:"varint,40,opt,name=CreateRoomNum,proto3" json:"CreateRoomNum,omitempty"`
	MatchTrueMan    int32   `protobuf:"varint,41,opt,name=MatchTrueMan,proto3" json:"MatchTrueMan,omitempty"`
	PlayerWaterRate int32   `protobuf:"varint,42,opt,name=PlayerWaterRate,proto3" json:"PlayerWaterRate,omitempty"`
	MatchMode       int32   `protobuf:"varint,43,opt,name=MatchMode,proto3" json:"MatchMode,omitempty"`
	KillingRate     int32   `protobuf:"varint,44,opt,name=KillingRate,proto3" json:"KillingRate,omitempty"`
	BetWaterRate    int32   `protobuf:"varint,45,opt,name=BetWaterRate,proto3" json:"BetWaterRate,omitempty"`
	Lottery         int32   `protobuf:"varint,46,opt,name=Lottery,proto3" json:"Lottery,omitempty"`
	LotteryConfig   string  `protobuf:"bytes,47,opt,name=LotteryConfig,proto3" json:"LotteryConfig,omitempty"`
	BalanceLine     []int32 `protobuf:"varint,48,rep,packed,name=BalanceLine,proto3" json:"BalanceLine,omitempty"`
}

func (x *DB_GameFree) Reset() {
	*x = DB_GameFree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameFree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameFree) ProtoMessage() {}

func (x *DB_GameFree) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameFree.ProtoReflect.Descriptor instead.
func (*DB_GameFree) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{34}
}

func (x *DB_GameFree) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GameFree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_GameFree) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DB_GameFree) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *DB_GameFree) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *DB_GameFree) GetGameRule() int32 {
	if x != nil {
		return x.GameRule
	}
	return 0
}

func (x *DB_GameFree) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *DB_GameFree) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *DB_GameFree) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_GameFree) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *DB_GameFree) GetSubShowType() int32 {
	if x != nil {
		return x.SubShowType
	}
	return 0
}

func (x *DB_GameFree) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *DB_GameFree) GetTestTakeCoin() int32 {
	if x != nil {
		return x.TestTakeCoin
	}
	return 0
}

func (x *DB_GameFree) GetShowId() int32 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *DB_GameFree) GetLimitCoin() int32 {
	if x != nil {
		return x.LimitCoin
	}
	return 0
}

func (x *DB_GameFree) GetMaxCoinLimit() int32 {
	if x != nil {
		return x.MaxCoinLimit
	}
	return 0
}

func (x *DB_GameFree) GetServiceFee() int32 {
	if x != nil {
		return x.ServiceFee
	}
	return 0
}

func (x *DB_GameFree) GetLowerThanKick() int32 {
	if x != nil {
		return x.LowerThanKick
	}
	return 0
}

func (x *DB_GameFree) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *DB_GameFree) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *DB_GameFree) GetBetDec() string {
	if x != nil {
		return x.BetDec
	}
	return ""
}

func (x *DB_GameFree) GetBot() int32 {
	if x != nil {
		return x.Bot
	}
	return 0
}

func (x *DB_GameFree) GetAi() []int32 {
	if x != nil {
		return x.Ai
	}
	return nil
}

func (x *DB_GameFree) GetBanker() int32 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *DB_GameFree) GetMaxChip() int32 {
	if x != nil {
		return x.MaxChip
	}
	return 0
}

func (x *DB_GameFree) GetOtherIntParams() []int32 {
	if x != nil {
		return x.OtherIntParams
	}
	return nil
}

func (x *DB_GameFree) GetJackpot() []int32 {
	if x != nil {
		return x.Jackpot
	}
	return nil
}

func (x *DB_GameFree) GetRobotNumRng() []int32 {
	if x != nil {
		return x.RobotNumRng
	}
	return nil
}

func (x *DB_GameFree) GetRobotTakeCoin() []int32 {
	if x != nil {
		return x.RobotTakeCoin
	}
	return nil
}

func (x *DB_GameFree) GetRobotLimitCoin() []int32 {
	if x != nil {
		return x.RobotLimitCoin
	}
	return nil
}

func (x *DB_GameFree) GetBetLimit() int32 {
	if x != nil {
		return x.BetLimit
	}
	return 0
}

func (x *DB_GameFree) GetTaxRate() int32 {
	if x != nil {
		return x.TaxRate
	}
	return 0
}

func (x *DB_GameFree) GetSameIpLimit() int32 {
	if x != nil {
		return x.SameIpLimit
	}
	return 0
}

func (x *DB_GameFree) GetSamePlaceLimit() int32 {
	if x != nil {
		return x.SamePlaceLimit
	}
	return 0
}

func (x *DB_GameFree) GetGameDif() string {
	if x != nil {
		return x.GameDif
	}
	return ""
}

func (x *DB_GameFree) GetGameClass() int32 {
	if x != nil {
		return x.GameClass
	}
	return 0
}

func (x *DB_GameFree) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *DB_GameFree) GetMaxBetCoin() []int32 {
	if x != nil {
		return x.MaxBetCoin
	}
	return nil
}

func (x *DB_GameFree) GetPlayNumLimit() int32 {
	if x != nil {
		return x.PlayNumLimit
	}
	return 0
}

func (x *DB_GameFree) GetCreateRoomNum() int32 {
	if x != nil {
		return x.CreateRoomNum
	}
	return 0
}

func (x *DB_GameFree) GetMatchTrueMan() int32 {
	if x != nil {
		return x.MatchTrueMan
	}
	return 0
}

func (x *DB_GameFree) GetPlayerWaterRate() int32 {
	if x != nil {
		return x.PlayerWaterRate
	}
	return 0
}

func (x *DB_GameFree) GetMatchMode() int32 {
	if x != nil {
		return x.MatchMode
	}
	return 0
}

func (x *DB_GameFree) GetKillingRate() int32 {
	if x != nil {
		return x.KillingRate
	}
	return 0
}

func (x *DB_GameFree) GetBetWaterRate() int32 {
	if x != nil {
		return x.BetWaterRate
	}
	return 0
}

func (x *DB_GameFree) GetLottery() int32 {
	if x != nil {
		return x.Lottery
	}
	return 0
}

func (x *DB_GameFree) GetLotteryConfig() string {
	if x != nil {
		return x.LotteryConfig
	}
	return ""
}

func (x *DB_GameFree) GetBalanceLine() []int32 {
	if x != nil {
		return x.BalanceLine
	}
	return nil
}

type DB_GameFreeArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GameFree `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GameFreeArray) Reset() {
	*x = DB_GameFreeArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameFreeArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameFreeArray) ProtoMessage() {}

func (x *DB_GameFreeArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameFreeArray.ProtoReflect.Descriptor instead.
func (*DB_GameFreeArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{35}
}

func (x *DB_GameFreeArray) GetArr() []*DB_GameFree {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GameItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ShowLocation   []int32 `protobuf:"varint,3,rep,packed,name=ShowLocation,proto3" json:"ShowLocation,omitempty"`
	Classify       []int32 `protobuf:"varint,4,rep,packed,name=Classify,proto3" json:"Classify,omitempty"`
	Type           int32   `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Effect0        []int32 `protobuf:"varint,6,rep,packed,name=Effect0,proto3" json:"Effect0,omitempty"`
	Effect         []int32 `protobuf:"varint,7,rep,packed,name=Effect,proto3" json:"Effect,omitempty"`
	SaleType       int32   `protobuf:"varint,8,opt,name=SaleType,proto3" json:"SaleType,omitempty"`
	SaleGold       int32   `protobuf:"varint,9,opt,name=SaleGold,proto3" json:"SaleGold,omitempty"`
	Composition    int32   `protobuf:"varint,10,opt,name=Composition,proto3" json:"Composition,omitempty"`
	CompositionMax int32   `protobuf:"varint,11,opt,name=CompositionMax,proto3" json:"CompositionMax,omitempty"`
	Time           int32   `protobuf:"varint,12,opt,name=Time,proto3" json:"Time,omitempty"`
	Location       string  `protobuf:"bytes,13,opt,name=Location,proto3" json:"Location,omitempty"`
	Describe       string  `protobuf:"bytes,14,opt,name=Describe,proto3" json:"Describe,omitempty"`
}

func (x *DB_GameItem) Reset() {
	*x = DB_GameItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameItem) ProtoMessage() {}

func (x *DB_GameItem) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameItem.ProtoReflect.Descriptor instead.
func (*DB_GameItem) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{36}
}

func (x *DB_GameItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GameItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_GameItem) GetShowLocation() []int32 {
	if x != nil {
		return x.ShowLocation
	}
	return nil
}

func (x *DB_GameItem) GetClassify() []int32 {
	if x != nil {
		return x.Classify
	}
	return nil
}

func (x *DB_GameItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DB_GameItem) GetEffect0() []int32 {
	if x != nil {
		return x.Effect0
	}
	return nil
}

func (x *DB_GameItem) GetEffect() []int32 {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *DB_GameItem) GetSaleType() int32 {
	if x != nil {
		return x.SaleType
	}
	return 0
}

func (x *DB_GameItem) GetSaleGold() int32 {
	if x != nil {
		return x.SaleGold
	}
	return 0
}

func (x *DB_GameItem) GetComposition() int32 {
	if x != nil {
		return x.Composition
	}
	return 0
}

func (x *DB_GameItem) GetCompositionMax() int32 {
	if x != nil {
		return x.CompositionMax
	}
	return 0
}

func (x *DB_GameItem) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_GameItem) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DB_GameItem) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type DB_GameItemArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GameItem `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GameItemArray) Reset() {
	*x = DB_GameItemArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameItemArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameItemArray) ProtoMessage() {}

func (x *DB_GameItemArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameItemArray.ProtoReflect.Descriptor instead.
func (*DB_GameItemArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{37}
}

func (x *DB_GameItemArray) GetArr() []*DB_GameItem {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GameRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GameId   int32   `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`
	GameMode int32   `protobuf:"varint,4,opt,name=GameMode,proto3" json:"GameMode,omitempty"`
	Params   []int32 `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`
	RuleDesc string  `protobuf:"bytes,6,opt,name=RuleDesc,proto3" json:"RuleDesc,omitempty"`
	GameDif  string  `protobuf:"bytes,7,opt,name=GameDif,proto3" json:"GameDif,omitempty"`
}

func (x *DB_GameRule) Reset() {
	*x = DB_GameRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameRule) ProtoMessage() {}

func (x *DB_GameRule) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameRule.ProtoReflect.Descriptor instead.
func (*DB_GameRule) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{38}
}

func (x *DB_GameRule) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GameRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_GameRule) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *DB_GameRule) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *DB_GameRule) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DB_GameRule) GetRuleDesc() string {
	if x != nil {
		return x.RuleDesc
	}
	return ""
}

func (x *DB_GameRule) GetGameDif() string {
	if x != nil {
		return x.GameDif
	}
	return ""
}

type DB_GameRuleArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GameRule `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GameRuleArray) Reset() {
	*x = DB_GameRuleArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameRuleArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameRuleArray) ProtoMessage() {}

func (x *DB_GameRuleArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameRuleArray.ProtoReflect.Descriptor instead.
func (*DB_GameRuleArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{39}
}

func (x *DB_GameRuleArray) GetArr() []*DB_GameRule {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_GameSubsidy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LimitNum int32 `protobuf:"varint,2,opt,name=LimitNum,proto3" json:"LimitNum,omitempty"`
	Get      int32 `protobuf:"varint,3,opt,name=Get,proto3" json:"Get,omitempty"`
	Times    int32 `protobuf:"varint,4,opt,name=Times,proto3" json:"Times,omitempty"`
}

func (x *DB_GameSubsidy) Reset() {
	*x = DB_GameSubsidy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameSubsidy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameSubsidy) ProtoMessage() {}

func (x *DB_GameSubsidy) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameSubsidy.ProtoReflect.Descriptor instead.
func (*DB_GameSubsidy) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{40}
}

func (x *DB_GameSubsidy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_GameSubsidy) GetLimitNum() int32 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *DB_GameSubsidy) GetGet() int32 {
	if x != nil {
		return x.Get
	}
	return 0
}

func (x *DB_GameSubsidy) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type DB_GameSubsidyArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_GameSubsidy `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_GameSubsidyArray) Reset() {
	*x = DB_GameSubsidyArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_GameSubsidyArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_GameSubsidyArray) ProtoMessage() {}

func (x *DB_GameSubsidyArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_GameSubsidyArray.ProtoReflect.Descriptor instead.
func (*DB_GameSubsidyArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{41}
}

func (x *DB_GameSubsidyArray) GetArr() []*DB_GameSubsidy {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Game_Drop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GameId    int32   `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`
	Bet       int32   `protobuf:"varint,3,opt,name=Bet,proto3" json:"Bet,omitempty"`
	ItemName1 int32   `protobuf:"varint,4,opt,name=ItemName1,proto3" json:"ItemName1,omitempty"`
	ItemId1   int32   `protobuf:"varint,5,opt,name=ItemId1,proto3" json:"ItemId1,omitempty"`
	Rate1     int32   `protobuf:"varint,6,opt,name=Rate1,proto3" json:"Rate1,omitempty"`
	Amount1   []int32 `protobuf:"varint,7,rep,packed,name=Amount1,proto3" json:"Amount1,omitempty"`
}

func (x *DB_Game_Drop) Reset() {
	*x = DB_Game_Drop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_Drop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_Drop) ProtoMessage() {}

func (x *DB_Game_Drop) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_Drop.ProtoReflect.Descriptor instead.
func (*DB_Game_Drop) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{42}
}

func (x *DB_Game_Drop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Game_Drop) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *DB_Game_Drop) GetBet() int32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *DB_Game_Drop) GetItemName1() int32 {
	if x != nil {
		return x.ItemName1
	}
	return 0
}

func (x *DB_Game_Drop) GetItemId1() int32 {
	if x != nil {
		return x.ItemId1
	}
	return 0
}

func (x *DB_Game_Drop) GetRate1() int32 {
	if x != nil {
		return x.Rate1
	}
	return 0
}

func (x *DB_Game_Drop) GetAmount1() []int32 {
	if x != nil {
		return x.Amount1
	}
	return nil
}

type DB_Game_DropArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Game_Drop `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Game_DropArray) Reset() {
	*x = DB_Game_DropArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_DropArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_DropArray) ProtoMessage() {}

func (x *DB_Game_DropArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_DropArray.ProtoReflect.Descriptor instead.
func (*DB_Game_DropArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{43}
}

func (x *DB_Game_DropArray) GetArr() []*DB_Game_Drop {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Game_Introduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type       int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Story      string `protobuf:"bytes,4,opt,name=Story,proto3" json:"Story,omitempty"`
	AwardTitle string `protobuf:"bytes,5,opt,name=AwardTitle,proto3" json:"AwardTitle,omitempty"`
	LevelMax   int32  `protobuf:"varint,6,opt,name=LevelMax,proto3" json:"LevelMax,omitempty"`
}

func (x *DB_Game_Introduction) Reset() {
	*x = DB_Game_Introduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_Introduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_Introduction) ProtoMessage() {}

func (x *DB_Game_Introduction) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_Introduction.ProtoReflect.Descriptor instead.
func (*DB_Game_Introduction) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{44}
}

func (x *DB_Game_Introduction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Game_Introduction) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DB_Game_Introduction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Game_Introduction) GetStory() string {
	if x != nil {
		return x.Story
	}
	return ""
}

func (x *DB_Game_Introduction) GetAwardTitle() string {
	if x != nil {
		return x.AwardTitle
	}
	return ""
}

func (x *DB_Game_Introduction) GetLevelMax() int32 {
	if x != nil {
		return x.LevelMax
	}
	return 0
}

type DB_Game_IntroductionArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Game_Introduction `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Game_IntroductionArray) Reset() {
	*x = DB_Game_IntroductionArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_IntroductionArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_IntroductionArray) ProtoMessage() {}

func (x *DB_Game_IntroductionArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_IntroductionArray.ProtoReflect.Descriptor instead.
func (*DB_Game_IntroductionArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{45}
}

func (x *DB_Game_IntroductionArray) GetArr() []*DB_Game_Introduction {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Game_Pet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PetId     int32  `protobuf:"varint,2,opt,name=PetId,proto3" json:"PetId,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Grade     int32  `protobuf:"varint,4,opt,name=Grade,proto3" json:"Grade,omitempty"`
	Level     int32  `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	Fragment  int32  `protobuf:"varint,6,opt,name=Fragment,proto3" json:"Fragment,omitempty"`
	Amount    int32  `protobuf:"varint,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
	AwardType int32  `protobuf:"varint,8,opt,name=AwardType,proto3" json:"AwardType,omitempty"`
	Award     int32  `protobuf:"varint,9,opt,name=Award,proto3" json:"Award,omitempty"`
	AwardRate int32  `protobuf:"varint,10,opt,name=AwardRate,proto3" json:"AwardRate,omitempty"`
}

func (x *DB_Game_Pet) Reset() {
	*x = DB_Game_Pet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_Pet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_Pet) ProtoMessage() {}

func (x *DB_Game_Pet) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_Pet.ProtoReflect.Descriptor instead.
func (*DB_Game_Pet) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{46}
}

func (x *DB_Game_Pet) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Game_Pet) GetPetId() int32 {
	if x != nil {
		return x.PetId
	}
	return 0
}

func (x *DB_Game_Pet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Game_Pet) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *DB_Game_Pet) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DB_Game_Pet) GetFragment() int32 {
	if x != nil {
		return x.Fragment
	}
	return 0
}

func (x *DB_Game_Pet) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DB_Game_Pet) GetAwardType() int32 {
	if x != nil {
		return x.AwardType
	}
	return 0
}

func (x *DB_Game_Pet) GetAward() int32 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *DB_Game_Pet) GetAwardRate() int32 {
	if x != nil {
		return x.AwardRate
	}
	return 0
}

type DB_Game_PetArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Game_Pet `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Game_PetArray) Reset() {
	*x = DB_Game_PetArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_PetArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_PetArray) ProtoMessage() {}

func (x *DB_Game_PetArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_PetArray.ProtoReflect.Descriptor instead.
func (*DB_Game_PetArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{47}
}

func (x *DB_Game_PetArray) GetArr() []*DB_Game_Pet {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Game_Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RoleId    int32  `protobuf:"varint,2,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Grade     int32  `protobuf:"varint,4,opt,name=Grade,proto3" json:"Grade,omitempty"`
	Level     int32  `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	Fragment  int32  `protobuf:"varint,6,opt,name=Fragment,proto3" json:"Fragment,omitempty"`
	Amount    int32  `protobuf:"varint,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
	AwardType int32  `protobuf:"varint,8,opt,name=AwardType,proto3" json:"AwardType,omitempty"`
	Award     int32  `protobuf:"varint,9,opt,name=Award,proto3" json:"Award,omitempty"`
	AwardRate int32  `protobuf:"varint,10,opt,name=AwardRate,proto3" json:"AwardRate,omitempty"`
}

func (x *DB_Game_Role) Reset() {
	*x = DB_Game_Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_Role) ProtoMessage() {}

func (x *DB_Game_Role) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_Role.ProtoReflect.Descriptor instead.
func (*DB_Game_Role) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{48}
}

func (x *DB_Game_Role) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Game_Role) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *DB_Game_Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Game_Role) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *DB_Game_Role) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DB_Game_Role) GetFragment() int32 {
	if x != nil {
		return x.Fragment
	}
	return 0
}

func (x *DB_Game_Role) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DB_Game_Role) GetAwardType() int32 {
	if x != nil {
		return x.AwardType
	}
	return 0
}

func (x *DB_Game_Role) GetAward() int32 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *DB_Game_Role) GetAwardRate() int32 {
	if x != nil {
		return x.AwardRate
	}
	return 0
}

type DB_Game_RoleArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Game_Role `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Game_RoleArray) Reset() {
	*x = DB_Game_RoleArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Game_RoleArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Game_RoleArray) ProtoMessage() {}

func (x *DB_Game_RoleArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Game_RoleArray.ProtoReflect.Descriptor instead.
func (*DB_Game_RoleArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{49}
}

func (x *DB_Game_RoleArray) GetArr() []*DB_Game_Role {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Legend_Odds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Rateodds3 int32  `protobuf:"varint,3,opt,name=Rateodds3,proto3" json:"Rateodds3,omitempty"`
	Rateodds4 int32  `protobuf:"varint,4,opt,name=Rateodds4,proto3" json:"Rateodds4,omitempty"`
	Rateodds5 int32  `protobuf:"varint,5,opt,name=Rateodds5,proto3" json:"Rateodds5,omitempty"`
}

func (x *DB_Legend_Odds) Reset() {
	*x = DB_Legend_Odds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_Odds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_Odds) ProtoMessage() {}

func (x *DB_Legend_Odds) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_Odds.ProtoReflect.Descriptor instead.
func (*DB_Legend_Odds) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{50}
}

func (x *DB_Legend_Odds) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Legend_Odds) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Legend_Odds) GetRateodds3() int32 {
	if x != nil {
		return x.Rateodds3
	}
	return 0
}

func (x *DB_Legend_Odds) GetRateodds4() int32 {
	if x != nil {
		return x.Rateodds4
	}
	return 0
}

func (x *DB_Legend_Odds) GetRateodds5() int32 {
	if x != nil {
		return x.Rateodds5
	}
	return 0
}

type DB_Legend_OddsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Legend_Odds `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Legend_OddsArray) Reset() {
	*x = DB_Legend_OddsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_OddsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_OddsArray) ProtoMessage() {}

func (x *DB_Legend_OddsArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_OddsArray.ProtoReflect.Descriptor instead.
func (*DB_Legend_OddsArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{51}
}

func (x *DB_Legend_OddsArray) GetArr() []*DB_Legend_Odds {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Legend_TurnRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ReturnRateMin int32   `protobuf:"varint,2,opt,name=ReturnRateMin,proto3" json:"ReturnRateMin,omitempty"`
	ReturnRateMax int32   `protobuf:"varint,3,opt,name=ReturnRateMax,proto3" json:"ReturnRateMax,omitempty"`
	Chance        []int32 `protobuf:"varint,4,rep,packed,name=Chance,proto3" json:"Chance,omitempty"`
}

func (x *DB_Legend_TurnRate) Reset() {
	*x = DB_Legend_TurnRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_TurnRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_TurnRate) ProtoMessage() {}

func (x *DB_Legend_TurnRate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_TurnRate.ProtoReflect.Descriptor instead.
func (*DB_Legend_TurnRate) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{52}
}

func (x *DB_Legend_TurnRate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Legend_TurnRate) GetReturnRateMin() int32 {
	if x != nil {
		return x.ReturnRateMin
	}
	return 0
}

func (x *DB_Legend_TurnRate) GetReturnRateMax() int32 {
	if x != nil {
		return x.ReturnRateMax
	}
	return 0
}

func (x *DB_Legend_TurnRate) GetChance() []int32 {
	if x != nil {
		return x.Chance
	}
	return nil
}

type DB_Legend_TurnRateArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Legend_TurnRate `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Legend_TurnRateArray) Reset() {
	*x = DB_Legend_TurnRateArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_TurnRateArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_TurnRateArray) ProtoMessage() {}

func (x *DB_Legend_TurnRateArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_TurnRateArray.ProtoReflect.Descriptor instead.
func (*DB_Legend_TurnRateArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{53}
}

func (x *DB_Legend_TurnRateArray) GetArr() []*DB_Legend_TurnRate {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Legend_Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Weight []int32 `protobuf:"varint,3,rep,packed,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *DB_Legend_Weight) Reset() {
	*x = DB_Legend_Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_Weight) ProtoMessage() {}

func (x *DB_Legend_Weight) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_Weight.ProtoReflect.Descriptor instead.
func (*DB_Legend_Weight) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{54}
}

func (x *DB_Legend_Weight) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Legend_Weight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Legend_Weight) GetWeight() []int32 {
	if x != nil {
		return x.Weight
	}
	return nil
}

type DB_Legend_WeightArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Legend_Weight `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Legend_WeightArray) Reset() {
	*x = DB_Legend_WeightArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_WeightArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_WeightArray) ProtoMessage() {}

func (x *DB_Legend_WeightArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_WeightArray.ProtoReflect.Descriptor instead.
func (*DB_Legend_WeightArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{55}
}

func (x *DB_Legend_WeightArray) GetArr() []*DB_Legend_Weight {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Legend_WeightCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsNew        int32   `protobuf:"varint,2,opt,name=IsNew,proto3" json:"IsNew,omitempty"`
	BetScope     []int32 `protobuf:"varint,3,rep,packed,name=BetScope,proto3" json:"BetScope,omitempty"`
	TrueCalcRate []int32 `protobuf:"varint,4,rep,packed,name=TrueCalcRate,proto3" json:"TrueCalcRate,omitempty"`
	WeightId     int32   `protobuf:"varint,5,opt,name=WeightId,proto3" json:"WeightId,omitempty"`
}

func (x *DB_Legend_WeightCondition) Reset() {
	*x = DB_Legend_WeightCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_WeightCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_WeightCondition) ProtoMessage() {}

func (x *DB_Legend_WeightCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_WeightCondition.ProtoReflect.Descriptor instead.
func (*DB_Legend_WeightCondition) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{56}
}

func (x *DB_Legend_WeightCondition) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Legend_WeightCondition) GetIsNew() int32 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *DB_Legend_WeightCondition) GetBetScope() []int32 {
	if x != nil {
		return x.BetScope
	}
	return nil
}

func (x *DB_Legend_WeightCondition) GetTrueCalcRate() []int32 {
	if x != nil {
		return x.TrueCalcRate
	}
	return nil
}

func (x *DB_Legend_WeightCondition) GetWeightId() int32 {
	if x != nil {
		return x.WeightId
	}
	return 0
}

type DB_Legend_WeightConditionArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Legend_WeightCondition `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Legend_WeightConditionArray) Reset() {
	*x = DB_Legend_WeightConditionArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Legend_WeightConditionArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Legend_WeightConditionArray) ProtoMessage() {}

func (x *DB_Legend_WeightConditionArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Legend_WeightConditionArray.ProtoReflect.Descriptor instead.
func (*DB_Legend_WeightConditionArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{57}
}

func (x *DB_Legend_WeightConditionArray) GetArr() []*DB_Legend_WeightCondition {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_MatchRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RankStar []int32 `protobuf:"varint,2,rep,packed,name=RankStar,proto3" json:"RankStar,omitempty"`
}

func (x *DB_MatchRank) Reset() {
	*x = DB_MatchRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_MatchRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_MatchRank) ProtoMessage() {}

func (x *DB_MatchRank) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_MatchRank.ProtoReflect.Descriptor instead.
func (*DB_MatchRank) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{58}
}

func (x *DB_MatchRank) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_MatchRank) GetRankStar() []int32 {
	if x != nil {
		return x.RankStar
	}
	return nil
}

type DB_MatchRankArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_MatchRank `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_MatchRankArray) Reset() {
	*x = DB_MatchRankArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_MatchRankArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_MatchRankArray) ProtoMessage() {}

func (x *DB_MatchRankArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_MatchRankArray.ProtoReflect.Descriptor instead.
func (*DB_MatchRankArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{59}
}

func (x *DB_MatchRankArray) GetArr() []*DB_MatchRank {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DB_Name) Reset() {
	*x = DB_Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Name) ProtoMessage() {}

func (x *DB_Name) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Name.ProtoReflect.Descriptor instead.
func (*DB_Name) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{60}
}

func (x *DB_Name) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Name) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DB_NameArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Name `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_NameArray) Reset() {
	*x = DB_NameArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_NameArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_NameArray) ProtoMessage() {}

func (x *DB_NameArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_NameArray.ProtoReflect.Descriptor instead.
func (*DB_NameArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{61}
}

func (x *DB_NameArray) GetArr() []*DB_Name {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_NameBoy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DB_NameBoy) Reset() {
	*x = DB_NameBoy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_NameBoy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_NameBoy) ProtoMessage() {}

func (x *DB_NameBoy) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_NameBoy.ProtoReflect.Descriptor instead.
func (*DB_NameBoy) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{62}
}

func (x *DB_NameBoy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_NameBoy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DB_NameBoyArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_NameBoy `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_NameBoyArray) Reset() {
	*x = DB_NameBoyArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_NameBoyArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_NameBoyArray) ProtoMessage() {}

func (x *DB_NameBoyArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_NameBoyArray.ProtoReflect.Descriptor instead.
func (*DB_NameBoyArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{63}
}

func (x *DB_NameBoyArray) GetArr() []*DB_NameBoy {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_NameGirl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DB_NameGirl) Reset() {
	*x = DB_NameGirl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_NameGirl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_NameGirl) ProtoMessage() {}

func (x *DB_NameGirl) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_NameGirl.ProtoReflect.Descriptor instead.
func (*DB_NameGirl) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{64}
}

func (x *DB_NameGirl) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_NameGirl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DB_NameGirlArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_NameGirl `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_NameGirlArray) Reset() {
	*x = DB_NameGirlArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_NameGirlArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_NameGirlArray) ProtoMessage() {}

func (x *DB_NameGirlArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_NameGirlArray.ProtoReflect.Descriptor instead.
func (*DB_NameGirlArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{65}
}

func (x *DB_NameGirlArray) GetArr() []*DB_NameGirl {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City string `protobuf:"bytes,1,opt,name=City,proto3" json:"City,omitempty"`
	Head int32  `protobuf:"varint,2,opt,name=Head,proto3" json:"Head,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Sex  int32  `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Id   int32  `protobuf:"varint,5,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *DB_PlayerInfo) Reset() {
	*x = DB_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_PlayerInfo) ProtoMessage() {}

func (x *DB_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_PlayerInfo.ProtoReflect.Descriptor instead.
func (*DB_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{66}
}

func (x *DB_PlayerInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DB_PlayerInfo) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *DB_PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_PlayerInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *DB_PlayerInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DB_PlayerInfoArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_PlayerInfo `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_PlayerInfoArray) Reset() {
	*x = DB_PlayerInfoArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_PlayerInfoArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_PlayerInfoArray) ProtoMessage() {}

func (x *DB_PlayerInfoArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_PlayerInfoArray.ProtoReflect.Descriptor instead.
func (*DB_PlayerInfoArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{67}
}

func (x *DB_PlayerInfoArray) GetArr() []*DB_PlayerInfo {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_PlayerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name               string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	GameFreeId         int32   `protobuf:"varint,3,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	PayLowerLimit      int32   `protobuf:"varint,4,opt,name=PayLowerLimit,proto3" json:"PayLowerLimit,omitempty"`
	PayUpperLimit      int32   `protobuf:"varint,5,opt,name=PayUpperLimit,proto3" json:"PayUpperLimit,omitempty"`
	GameTimeLowerLimit int32   `protobuf:"varint,6,opt,name=GameTimeLowerLimit,proto3" json:"GameTimeLowerLimit,omitempty"`
	GameTimeUpperLimit int32   `protobuf:"varint,7,opt,name=GameTimeUpperLimit,proto3" json:"GameTimeUpperLimit,omitempty"`
	TotalInLowerLimit  int32   `protobuf:"varint,8,opt,name=TotalInLowerLimit,proto3" json:"TotalInLowerLimit,omitempty"`
	TotalInUpperLimit  int32   `protobuf:"varint,9,opt,name=TotalInUpperLimit,proto3" json:"TotalInUpperLimit,omitempty"`
	OddsLowerLimit     int32   `protobuf:"varint,10,opt,name=OddsLowerLimit,proto3" json:"OddsLowerLimit,omitempty"`
	OddsUpperLimit     int32   `protobuf:"varint,11,opt,name=OddsUpperLimit,proto3" json:"OddsUpperLimit,omitempty"`
	LuckyRate          int32   `protobuf:"varint,12,opt,name=LuckyRate,proto3" json:"LuckyRate,omitempty"`
	ChangeCardRate     int32   `protobuf:"varint,13,opt,name=ChangeCardRate,proto3" json:"ChangeCardRate,omitempty"`
	CardValueRange     []int32 `protobuf:"varint,14,rep,packed,name=CardValueRange,proto3" json:"CardValueRange,omitempty"`
	MatchPriority      []int32 `protobuf:"varint,15,rep,packed,name=MatchPriority,proto3" json:"MatchPriority,omitempty"`
	ExcludeMatch       []int32 `protobuf:"varint,16,rep,packed,name=ExcludeMatch,proto3" json:"ExcludeMatch,omitempty"`
	CardLibRate        int32   `protobuf:"varint,17,opt,name=CardLibRate,proto3" json:"CardLibRate,omitempty"`
	CardLibArr         []int32 `protobuf:"varint,18,rep,packed,name=CardLibArr,proto3" json:"CardLibArr,omitempty"`
}

func (x *DB_PlayerType) Reset() {
	*x = DB_PlayerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_PlayerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_PlayerType) ProtoMessage() {}

func (x *DB_PlayerType) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_PlayerType.ProtoReflect.Descriptor instead.
func (*DB_PlayerType) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{68}
}

func (x *DB_PlayerType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_PlayerType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_PlayerType) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *DB_PlayerType) GetPayLowerLimit() int32 {
	if x != nil {
		return x.PayLowerLimit
	}
	return 0
}

func (x *DB_PlayerType) GetPayUpperLimit() int32 {
	if x != nil {
		return x.PayUpperLimit
	}
	return 0
}

func (x *DB_PlayerType) GetGameTimeLowerLimit() int32 {
	if x != nil {
		return x.GameTimeLowerLimit
	}
	return 0
}

func (x *DB_PlayerType) GetGameTimeUpperLimit() int32 {
	if x != nil {
		return x.GameTimeUpperLimit
	}
	return 0
}

func (x *DB_PlayerType) GetTotalInLowerLimit() int32 {
	if x != nil {
		return x.TotalInLowerLimit
	}
	return 0
}

func (x *DB_PlayerType) GetTotalInUpperLimit() int32 {
	if x != nil {
		return x.TotalInUpperLimit
	}
	return 0
}

func (x *DB_PlayerType) GetOddsLowerLimit() int32 {
	if x != nil {
		return x.OddsLowerLimit
	}
	return 0
}

func (x *DB_PlayerType) GetOddsUpperLimit() int32 {
	if x != nil {
		return x.OddsUpperLimit
	}
	return 0
}

func (x *DB_PlayerType) GetLuckyRate() int32 {
	if x != nil {
		return x.LuckyRate
	}
	return 0
}

func (x *DB_PlayerType) GetChangeCardRate() int32 {
	if x != nil {
		return x.ChangeCardRate
	}
	return 0
}

func (x *DB_PlayerType) GetCardValueRange() []int32 {
	if x != nil {
		return x.CardValueRange
	}
	return nil
}

func (x *DB_PlayerType) GetMatchPriority() []int32 {
	if x != nil {
		return x.MatchPriority
	}
	return nil
}

func (x *DB_PlayerType) GetExcludeMatch() []int32 {
	if x != nil {
		return x.ExcludeMatch
	}
	return nil
}

func (x *DB_PlayerType) GetCardLibRate() int32 {
	if x != nil {
		return x.CardLibRate
	}
	return 0
}

func (x *DB_PlayerType) GetCardLibArr() []int32 {
	if x != nil {
		return x.CardLibArr
	}
	return nil
}

type DB_PlayerTypeArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_PlayerType `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_PlayerTypeArray) Reset() {
	*x = DB_PlayerTypeArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_PlayerTypeArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_PlayerTypeArray) ProtoMessage() {}

func (x *DB_PlayerTypeArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_PlayerTypeArray.ProtoReflect.Descriptor instead.
func (*DB_PlayerTypeArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{69}
}

func (x *DB_PlayerTypeArray) GetArr() []*DB_PlayerType {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy101 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy101) Reset() {
	*x = DB_Policy101{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy101) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy101) ProtoMessage() {}

func (x *DB_Policy101) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy101.ProtoReflect.Descriptor instead.
func (*DB_Policy101) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{70}
}

func (x *DB_Policy101) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy101) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy101) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy101) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy101) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy101) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy101) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy101) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy101) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy101Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy101 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy101Array) Reset() {
	*x = DB_Policy101Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy101Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy101Array) ProtoMessage() {}

func (x *DB_Policy101Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy101Array.ProtoReflect.Descriptor instead.
func (*DB_Policy101Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{71}
}

func (x *DB_Policy101Array) GetArr() []*DB_Policy101 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy102 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy102) Reset() {
	*x = DB_Policy102{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy102) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy102) ProtoMessage() {}

func (x *DB_Policy102) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy102.ProtoReflect.Descriptor instead.
func (*DB_Policy102) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{72}
}

func (x *DB_Policy102) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy102) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy102) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy102) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy102) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy102) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy102) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy102) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy102) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy102Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy102 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy102Array) Reset() {
	*x = DB_Policy102Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy102Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy102Array) ProtoMessage() {}

func (x *DB_Policy102Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy102Array.ProtoReflect.Descriptor instead.
func (*DB_Policy102Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{73}
}

func (x *DB_Policy102Array) GetArr() []*DB_Policy102 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy103 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy103) Reset() {
	*x = DB_Policy103{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy103) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy103) ProtoMessage() {}

func (x *DB_Policy103) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy103.ProtoReflect.Descriptor instead.
func (*DB_Policy103) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{74}
}

func (x *DB_Policy103) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy103) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy103) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy103) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy103) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy103) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy103) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy103) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy103) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy103Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy103 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy103Array) Reset() {
	*x = DB_Policy103Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy103Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy103Array) ProtoMessage() {}

func (x *DB_Policy103Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy103Array.ProtoReflect.Descriptor instead.
func (*DB_Policy103Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{75}
}

func (x *DB_Policy103Array) GetArr() []*DB_Policy103 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy151 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy151) Reset() {
	*x = DB_Policy151{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy151) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy151) ProtoMessage() {}

func (x *DB_Policy151) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy151.ProtoReflect.Descriptor instead.
func (*DB_Policy151) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{76}
}

func (x *DB_Policy151) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy151) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy151) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy151) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy151) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy151) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy151) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy151) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy151) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy151Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy151 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy151Array) Reset() {
	*x = DB_Policy151Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy151Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy151Array) ProtoMessage() {}

func (x *DB_Policy151Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy151Array.ProtoReflect.Descriptor instead.
func (*DB_Policy151Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{77}
}

func (x *DB_Policy151Array) GetArr() []*DB_Policy151 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy152 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy152) Reset() {
	*x = DB_Policy152{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy152) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy152) ProtoMessage() {}

func (x *DB_Policy152) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy152.ProtoReflect.Descriptor instead.
func (*DB_Policy152) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{78}
}

func (x *DB_Policy152) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy152) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy152) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy152) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy152) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy152) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy152) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy152) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy152) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy152Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy152 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy152Array) Reset() {
	*x = DB_Policy152Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy152Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy152Array) ProtoMessage() {}

func (x *DB_Policy152Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy152Array.ProtoReflect.Descriptor instead.
func (*DB_Policy152Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{79}
}

func (x *DB_Policy152Array) GetArr() []*DB_Policy152 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy153 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy153) Reset() {
	*x = DB_Policy153{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy153) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy153) ProtoMessage() {}

func (x *DB_Policy153) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy153.ProtoReflect.Descriptor instead.
func (*DB_Policy153) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{80}
}

func (x *DB_Policy153) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy153) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy153) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy153) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy153) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy153) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy153) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy153) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy153) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy153Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy153 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy153Array) Reset() {
	*x = DB_Policy153Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy153Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy153Array) ProtoMessage() {}

func (x *DB_Policy153Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy153Array.ProtoReflect.Descriptor instead.
func (*DB_Policy153Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{81}
}

func (x *DB_Policy153Array) GetArr() []*DB_Policy153 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy201 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy201) Reset() {
	*x = DB_Policy201{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy201) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy201) ProtoMessage() {}

func (x *DB_Policy201) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy201.ProtoReflect.Descriptor instead.
func (*DB_Policy201) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{82}
}

func (x *DB_Policy201) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy201) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy201) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy201) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy201) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy201) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy201) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy201) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy201) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy201Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy201 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy201Array) Reset() {
	*x = DB_Policy201Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy201Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy201Array) ProtoMessage() {}

func (x *DB_Policy201Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy201Array.ProtoReflect.Descriptor instead.
func (*DB_Policy201Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{83}
}

func (x *DB_Policy201Array) GetArr() []*DB_Policy201 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy202 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy202) Reset() {
	*x = DB_Policy202{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy202) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy202) ProtoMessage() {}

func (x *DB_Policy202) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy202.ProtoReflect.Descriptor instead.
func (*DB_Policy202) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{84}
}

func (x *DB_Policy202) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy202) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy202) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy202) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy202) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy202) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy202) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy202) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy202) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy202Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy202 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy202Array) Reset() {
	*x = DB_Policy202Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy202Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy202Array) ProtoMessage() {}

func (x *DB_Policy202Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy202Array.ProtoReflect.Descriptor instead.
func (*DB_Policy202Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{85}
}

func (x *DB_Policy202Array) GetArr() []*DB_Policy202 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy203 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy203) Reset() {
	*x = DB_Policy203{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy203) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy203) ProtoMessage() {}

func (x *DB_Policy203) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy203.ProtoReflect.Descriptor instead.
func (*DB_Policy203) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{86}
}

func (x *DB_Policy203) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy203) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy203) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy203) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy203) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy203) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy203) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy203) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy203) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy203Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy203 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy203Array) Reset() {
	*x = DB_Policy203Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy203Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy203Array) ProtoMessage() {}

func (x *DB_Policy203Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy203Array.ProtoReflect.Descriptor instead.
func (*DB_Policy203Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{87}
}

func (x *DB_Policy203Array) GetArr() []*DB_Policy203 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy251 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy251) Reset() {
	*x = DB_Policy251{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy251) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy251) ProtoMessage() {}

func (x *DB_Policy251) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy251.ProtoReflect.Descriptor instead.
func (*DB_Policy251) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{88}
}

func (x *DB_Policy251) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy251) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy251) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy251) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy251) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy251) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy251) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy251) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy251) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy251Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy251 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy251Array) Reset() {
	*x = DB_Policy251Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy251Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy251Array) ProtoMessage() {}

func (x *DB_Policy251Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy251Array.ProtoReflect.Descriptor instead.
func (*DB_Policy251Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{89}
}

func (x *DB_Policy251Array) GetArr() []*DB_Policy251 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy252 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy252) Reset() {
	*x = DB_Policy252{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy252) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy252) ProtoMessage() {}

func (x *DB_Policy252) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy252.ProtoReflect.Descriptor instead.
func (*DB_Policy252) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{90}
}

func (x *DB_Policy252) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy252) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy252) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy252) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy252) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy252) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy252) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy252) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy252) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy252Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy252 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy252Array) Reset() {
	*x = DB_Policy252Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy252Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy252Array) ProtoMessage() {}

func (x *DB_Policy252Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy252Array.ProtoReflect.Descriptor instead.
func (*DB_Policy252Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{91}
}

func (x *DB_Policy252Array) GetArr() []*DB_Policy252 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy253 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy253) Reset() {
	*x = DB_Policy253{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy253) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy253) ProtoMessage() {}

func (x *DB_Policy253) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy253.ProtoReflect.Descriptor instead.
func (*DB_Policy253) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{92}
}

func (x *DB_Policy253) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy253) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy253) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy253) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy253) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy253) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy253) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy253) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy253) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy253Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy253 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy253Array) Reset() {
	*x = DB_Policy253Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy253Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy253Array) ProtoMessage() {}

func (x *DB_Policy253Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy253Array.ProtoReflect.Descriptor instead.
func (*DB_Policy253Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{93}
}

func (x *DB_Policy253Array) GetArr() []*DB_Policy253 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy301 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy301) Reset() {
	*x = DB_Policy301{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy301) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy301) ProtoMessage() {}

func (x *DB_Policy301) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy301.ProtoReflect.Descriptor instead.
func (*DB_Policy301) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{94}
}

func (x *DB_Policy301) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy301) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy301) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy301) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy301) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy301) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy301) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy301) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy301) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy301Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy301 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy301Array) Reset() {
	*x = DB_Policy301Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy301Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy301Array) ProtoMessage() {}

func (x *DB_Policy301Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy301Array.ProtoReflect.Descriptor instead.
func (*DB_Policy301Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{95}
}

func (x *DB_Policy301Array) GetArr() []*DB_Policy301 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy302 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy302) Reset() {
	*x = DB_Policy302{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy302) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy302) ProtoMessage() {}

func (x *DB_Policy302) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy302.ProtoReflect.Descriptor instead.
func (*DB_Policy302) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{96}
}

func (x *DB_Policy302) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy302) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy302) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy302) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy302) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy302) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy302) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy302) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy302) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy302Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy302 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy302Array) Reset() {
	*x = DB_Policy302Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy302Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy302Array) ProtoMessage() {}

func (x *DB_Policy302Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy302Array.ProtoReflect.Descriptor instead.
func (*DB_Policy302Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{97}
}

func (x *DB_Policy302Array) GetArr() []*DB_Policy302 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy303 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy303) Reset() {
	*x = DB_Policy303{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy303) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy303) ProtoMessage() {}

func (x *DB_Policy303) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy303.ProtoReflect.Descriptor instead.
func (*DB_Policy303) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{98}
}

func (x *DB_Policy303) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy303) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy303) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy303) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy303) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy303) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy303) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy303) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy303) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy303Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy303 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy303Array) Reset() {
	*x = DB_Policy303Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy303Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy303Array) ProtoMessage() {}

func (x *DB_Policy303Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy303Array.ProtoReflect.Descriptor instead.
func (*DB_Policy303Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{99}
}

func (x *DB_Policy303Array) GetArr() []*DB_Policy303 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy351 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy351) Reset() {
	*x = DB_Policy351{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy351) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy351) ProtoMessage() {}

func (x *DB_Policy351) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy351.ProtoReflect.Descriptor instead.
func (*DB_Policy351) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{100}
}

func (x *DB_Policy351) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy351) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy351) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy351) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy351) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy351) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy351) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy351) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy351) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy351Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy351 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy351Array) Reset() {
	*x = DB_Policy351Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy351Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy351Array) ProtoMessage() {}

func (x *DB_Policy351Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy351Array.ProtoReflect.Descriptor instead.
func (*DB_Policy351Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{101}
}

func (x *DB_Policy351Array) GetArr() []*DB_Policy351 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy352 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy352) Reset() {
	*x = DB_Policy352{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy352) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy352) ProtoMessage() {}

func (x *DB_Policy352) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy352.ProtoReflect.Descriptor instead.
func (*DB_Policy352) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{102}
}

func (x *DB_Policy352) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy352) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy352) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy352) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy352) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy352) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy352) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy352) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy352) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy352Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy352 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy352Array) Reset() {
	*x = DB_Policy352Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy352Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy352Array) ProtoMessage() {}

func (x *DB_Policy352Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy352Array.ProtoReflect.Descriptor instead.
func (*DB_Policy352Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{103}
}

func (x *DB_Policy352Array) GetArr() []*DB_Policy352 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy353 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy353) Reset() {
	*x = DB_Policy353{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy353) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy353) ProtoMessage() {}

func (x *DB_Policy353) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy353.ProtoReflect.Descriptor instead.
func (*DB_Policy353) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{104}
}

func (x *DB_Policy353) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy353) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy353) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy353) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy353) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy353) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy353) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy353) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy353) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy353Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy353 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy353Array) Reset() {
	*x = DB_Policy353Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy353Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy353Array) ProtoMessage() {}

func (x *DB_Policy353Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy353Array.ProtoReflect.Descriptor instead.
func (*DB_Policy353Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{105}
}

func (x *DB_Policy353Array) GetArr() []*DB_Policy353 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy401 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy401) Reset() {
	*x = DB_Policy401{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy401) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy401) ProtoMessage() {}

func (x *DB_Policy401) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy401.ProtoReflect.Descriptor instead.
func (*DB_Policy401) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{106}
}

func (x *DB_Policy401) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy401) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy401) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy401) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy401) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy401) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy401) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy401) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy401) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy401Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy401 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy401Array) Reset() {
	*x = DB_Policy401Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy401Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy401Array) ProtoMessage() {}

func (x *DB_Policy401Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy401Array.ProtoReflect.Descriptor instead.
func (*DB_Policy401Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{107}
}

func (x *DB_Policy401Array) GetArr() []*DB_Policy401 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy402 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy402) Reset() {
	*x = DB_Policy402{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy402) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy402) ProtoMessage() {}

func (x *DB_Policy402) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy402.ProtoReflect.Descriptor instead.
func (*DB_Policy402) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{108}
}

func (x *DB_Policy402) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy402) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy402) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy402) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy402) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy402) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy402) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy402) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy402) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy402Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy402 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy402Array) Reset() {
	*x = DB_Policy402Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy402Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy402Array) ProtoMessage() {}

func (x *DB_Policy402Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy402Array.ProtoReflect.Descriptor instead.
func (*DB_Policy402Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{109}
}

func (x *DB_Policy402Array) GetArr() []*DB_Policy402 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy403 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy403) Reset() {
	*x = DB_Policy403{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy403) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy403) ProtoMessage() {}

func (x *DB_Policy403) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy403.ProtoReflect.Descriptor instead.
func (*DB_Policy403) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{110}
}

func (x *DB_Policy403) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy403) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy403) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy403) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy403) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy403) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy403) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy403) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy403) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy403Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy403 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy403Array) Reset() {
	*x = DB_Policy403Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy403Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy403Array) ProtoMessage() {}

func (x *DB_Policy403Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy403Array.ProtoReflect.Descriptor instead.
func (*DB_Policy403Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{111}
}

func (x *DB_Policy403Array) GetArr() []*DB_Policy403 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy420 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy420) Reset() {
	*x = DB_Policy420{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy420) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy420) ProtoMessage() {}

func (x *DB_Policy420) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy420.ProtoReflect.Descriptor instead.
func (*DB_Policy420) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{112}
}

func (x *DB_Policy420) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy420) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy420) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy420) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy420) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy420) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy420) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy420) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy420) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy420Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy420 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy420Array) Reset() {
	*x = DB_Policy420Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy420Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy420Array) ProtoMessage() {}

func (x *DB_Policy420Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy420Array.ProtoReflect.Descriptor instead.
func (*DB_Policy420Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{113}
}

func (x *DB_Policy420Array) GetArr() []*DB_Policy420 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy451 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy451) Reset() {
	*x = DB_Policy451{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy451) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy451) ProtoMessage() {}

func (x *DB_Policy451) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy451.ProtoReflect.Descriptor instead.
func (*DB_Policy451) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{114}
}

func (x *DB_Policy451) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy451) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy451) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy451) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy451) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy451) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy451) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy451) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy451) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy451Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy451 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy451Array) Reset() {
	*x = DB_Policy451Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy451Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy451Array) ProtoMessage() {}

func (x *DB_Policy451Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy451Array.ProtoReflect.Descriptor instead.
func (*DB_Policy451Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{115}
}

func (x *DB_Policy451Array) GetArr() []*DB_Policy451 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy452 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy452) Reset() {
	*x = DB_Policy452{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy452) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy452) ProtoMessage() {}

func (x *DB_Policy452) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy452.ProtoReflect.Descriptor instead.
func (*DB_Policy452) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{116}
}

func (x *DB_Policy452) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy452) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy452) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy452) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy452) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy452) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy452) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy452) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy452) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy452Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy452 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy452Array) Reset() {
	*x = DB_Policy452Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy452Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy452Array) ProtoMessage() {}

func (x *DB_Policy452Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy452Array.ProtoReflect.Descriptor instead.
func (*DB_Policy452Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{117}
}

func (x *DB_Policy452Array) GetArr() []*DB_Policy452 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy453 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy453) Reset() {
	*x = DB_Policy453{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy453) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy453) ProtoMessage() {}

func (x *DB_Policy453) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy453.ProtoReflect.Descriptor instead.
func (*DB_Policy453) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{118}
}

func (x *DB_Policy453) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy453) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy453) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy453) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy453) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy453) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy453) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy453) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy453) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy453Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy453 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy453Array) Reset() {
	*x = DB_Policy453Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy453Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy453Array) ProtoMessage() {}

func (x *DB_Policy453Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy453Array.ProtoReflect.Descriptor instead.
func (*DB_Policy453Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{119}
}

func (x *DB_Policy453Array) GetArr() []*DB_Policy453 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy501 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy501) Reset() {
	*x = DB_Policy501{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy501) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy501) ProtoMessage() {}

func (x *DB_Policy501) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy501.ProtoReflect.Descriptor instead.
func (*DB_Policy501) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{120}
}

func (x *DB_Policy501) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy501) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy501) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy501) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy501) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy501) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy501) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy501) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy501) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy501Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy501 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy501Array) Reset() {
	*x = DB_Policy501Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy501Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy501Array) ProtoMessage() {}

func (x *DB_Policy501Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy501Array.ProtoReflect.Descriptor instead.
func (*DB_Policy501Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{121}
}

func (x *DB_Policy501Array) GetArr() []*DB_Policy501 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy502 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy502) Reset() {
	*x = DB_Policy502{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy502) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy502) ProtoMessage() {}

func (x *DB_Policy502) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy502.ProtoReflect.Descriptor instead.
func (*DB_Policy502) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{122}
}

func (x *DB_Policy502) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy502) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy502) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy502) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy502) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy502) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy502) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy502) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy502) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy502Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy502 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy502Array) Reset() {
	*x = DB_Policy502Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy502Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy502Array) ProtoMessage() {}

func (x *DB_Policy502Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy502Array.ProtoReflect.Descriptor instead.
func (*DB_Policy502Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{123}
}

func (x *DB_Policy502Array) GetArr() []*DB_Policy502 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy601 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy601) Reset() {
	*x = DB_Policy601{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy601) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy601) ProtoMessage() {}

func (x *DB_Policy601) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy601.ProtoReflect.Descriptor instead.
func (*DB_Policy601) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{124}
}

func (x *DB_Policy601) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy601) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy601) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy601) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy601) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy601) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy601) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy601) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy601) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy601Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy601 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy601Array) Reset() {
	*x = DB_Policy601Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy601Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy601Array) ProtoMessage() {}

func (x *DB_Policy601Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy601Array.ProtoReflect.Descriptor instead.
func (*DB_Policy601Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{125}
}

func (x *DB_Policy601Array) GetArr() []*DB_Policy601 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy701 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy701) Reset() {
	*x = DB_Policy701{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy701) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy701) ProtoMessage() {}

func (x *DB_Policy701) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy701.ProtoReflect.Descriptor instead.
func (*DB_Policy701) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{126}
}

func (x *DB_Policy701) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy701) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy701) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy701) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy701) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy701) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy701) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy701) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy701) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy701Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy701 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy701Array) Reset() {
	*x = DB_Policy701Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy701Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy701Array) ProtoMessage() {}

func (x *DB_Policy701Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy701Array.ProtoReflect.Descriptor instead.
func (*DB_Policy701Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{127}
}

func (x *DB_Policy701Array) GetArr() []*DB_Policy701 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy702 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy702) Reset() {
	*x = DB_Policy702{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy702) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy702) ProtoMessage() {}

func (x *DB_Policy702) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy702.ProtoReflect.Descriptor instead.
func (*DB_Policy702) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{128}
}

func (x *DB_Policy702) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy702) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy702) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy702) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy702) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy702) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy702) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy702) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy702) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy702Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy702 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy702Array) Reset() {
	*x = DB_Policy702Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy702Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy702Array) ProtoMessage() {}

func (x *DB_Policy702Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy702Array.ProtoReflect.Descriptor instead.
func (*DB_Policy702Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{129}
}

func (x *DB_Policy702Array) GetArr() []*DB_Policy702 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy801 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy801) Reset() {
	*x = DB_Policy801{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy801) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy801) ProtoMessage() {}

func (x *DB_Policy801) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy801.ProtoReflect.Descriptor instead.
func (*DB_Policy801) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{130}
}

func (x *DB_Policy801) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy801) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy801) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy801) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy801) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy801) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy801) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy801) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy801) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy801Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy801 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy801Array) Reset() {
	*x = DB_Policy801Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy801Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy801Array) ProtoMessage() {}

func (x *DB_Policy801Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy801Array.ProtoReflect.Descriptor instead.
func (*DB_Policy801Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{131}
}

func (x *DB_Policy801Array) GetArr() []*DB_Policy801 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy802 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy802) Reset() {
	*x = DB_Policy802{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy802) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy802) ProtoMessage() {}

func (x *DB_Policy802) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy802.ProtoReflect.Descriptor instead.
func (*DB_Policy802) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{132}
}

func (x *DB_Policy802) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy802) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy802) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy802) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy802) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy802) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy802) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy802) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy802) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy802Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy802 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy802Array) Reset() {
	*x = DB_Policy802Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy802Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy802Array) ProtoMessage() {}

func (x *DB_Policy802Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy802Array.ProtoReflect.Descriptor instead.
func (*DB_Policy802Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{133}
}

func (x *DB_Policy802Array) GetArr() []*DB_Policy802 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy803 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy803) Reset() {
	*x = DB_Policy803{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy803) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy803) ProtoMessage() {}

func (x *DB_Policy803) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy803.ProtoReflect.Descriptor instead.
func (*DB_Policy803) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{134}
}

func (x *DB_Policy803) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy803) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy803) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy803) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy803) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy803) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy803) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy803) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy803) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy803Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy803 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy803Array) Reset() {
	*x = DB_Policy803Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy803Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy803Array) ProtoMessage() {}

func (x *DB_Policy803Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy803Array.ProtoReflect.Descriptor instead.
func (*DB_Policy803Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{135}
}

func (x *DB_Policy803Array) GetArr() []*DB_Policy803 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy804 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy804) Reset() {
	*x = DB_Policy804{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy804) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy804) ProtoMessage() {}

func (x *DB_Policy804) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy804.ProtoReflect.Descriptor instead.
func (*DB_Policy804) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{136}
}

func (x *DB_Policy804) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy804) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy804) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy804) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy804) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy804) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy804) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy804) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy804) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy804Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy804 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy804Array) Reset() {
	*x = DB_Policy804Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy804Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy804Array) ProtoMessage() {}

func (x *DB_Policy804Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy804Array.ProtoReflect.Descriptor instead.
func (*DB_Policy804Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{137}
}

func (x *DB_Policy804Array) GetArr() []*DB_Policy804 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy805 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy805) Reset() {
	*x = DB_Policy805{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy805) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy805) ProtoMessage() {}

func (x *DB_Policy805) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy805.ProtoReflect.Descriptor instead.
func (*DB_Policy805) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{138}
}

func (x *DB_Policy805) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy805) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy805) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy805) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy805) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy805) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy805) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy805) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy805) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy805Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy805 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy805Array) Reset() {
	*x = DB_Policy805Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy805Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy805Array) ProtoMessage() {}

func (x *DB_Policy805Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy805Array.ProtoReflect.Descriptor instead.
func (*DB_Policy805Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{139}
}

func (x *DB_Policy805Array) GetArr() []*DB_Policy805 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy806 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy806) Reset() {
	*x = DB_Policy806{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy806) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy806) ProtoMessage() {}

func (x *DB_Policy806) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy806.ProtoReflect.Descriptor instead.
func (*DB_Policy806) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{140}
}

func (x *DB_Policy806) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy806) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy806) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy806) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy806) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy806) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy806) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy806) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy806) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy806Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy806 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy806Array) Reset() {
	*x = DB_Policy806Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy806Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy806Array) ProtoMessage() {}

func (x *DB_Policy806Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy806Array.ProtoReflect.Descriptor instead.
func (*DB_Policy806Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{141}
}

func (x *DB_Policy806Array) GetArr() []*DB_Policy806 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy811 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy811) Reset() {
	*x = DB_Policy811{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy811) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy811) ProtoMessage() {}

func (x *DB_Policy811) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy811.ProtoReflect.Descriptor instead.
func (*DB_Policy811) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{142}
}

func (x *DB_Policy811) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy811) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy811) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy811) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy811) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy811) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy811) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy811) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy811) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy811Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy811 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy811Array) Reset() {
	*x = DB_Policy811Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy811Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy811Array) ProtoMessage() {}

func (x *DB_Policy811Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy811Array.ProtoReflect.Descriptor instead.
func (*DB_Policy811Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{143}
}

func (x *DB_Policy811Array) GetArr() []*DB_Policy811 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy812 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy812) Reset() {
	*x = DB_Policy812{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy812) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy812) ProtoMessage() {}

func (x *DB_Policy812) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy812.ProtoReflect.Descriptor instead.
func (*DB_Policy812) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{144}
}

func (x *DB_Policy812) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy812) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy812) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy812) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy812) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy812) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy812) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy812) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy812) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy812Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy812 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy812Array) Reset() {
	*x = DB_Policy812Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy812Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy812Array) ProtoMessage() {}

func (x *DB_Policy812Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy812Array.ProtoReflect.Descriptor instead.
func (*DB_Policy812Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{145}
}

func (x *DB_Policy812Array) GetArr() []*DB_Policy812 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy813 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy813) Reset() {
	*x = DB_Policy813{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy813) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy813) ProtoMessage() {}

func (x *DB_Policy813) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy813.ProtoReflect.Descriptor instead.
func (*DB_Policy813) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{146}
}

func (x *DB_Policy813) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy813) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy813) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy813) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy813) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy813) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy813) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy813) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy813) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy813Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy813 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy813Array) Reset() {
	*x = DB_Policy813Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy813Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy813Array) ProtoMessage() {}

func (x *DB_Policy813Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy813Array.ProtoReflect.Descriptor instead.
func (*DB_Policy813Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{147}
}

func (x *DB_Policy813Array) GetArr() []*DB_Policy813 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy814 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy814) Reset() {
	*x = DB_Policy814{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy814) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy814) ProtoMessage() {}

func (x *DB_Policy814) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy814.ProtoReflect.Descriptor instead.
func (*DB_Policy814) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{148}
}

func (x *DB_Policy814) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy814) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy814) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy814) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy814) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy814) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy814) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy814) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy814) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy814Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy814 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy814Array) Reset() {
	*x = DB_Policy814Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy814Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy814Array) ProtoMessage() {}

func (x *DB_Policy814Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy814Array.ProtoReflect.Descriptor instead.
func (*DB_Policy814Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{149}
}

func (x *DB_Policy814Array) GetArr() []*DB_Policy814 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy815 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy815) Reset() {
	*x = DB_Policy815{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy815) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy815) ProtoMessage() {}

func (x *DB_Policy815) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy815.ProtoReflect.Descriptor instead.
func (*DB_Policy815) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{150}
}

func (x *DB_Policy815) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy815) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy815) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy815) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy815) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy815) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy815) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy815) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy815) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy815Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy815 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy815Array) Reset() {
	*x = DB_Policy815Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy815Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy815Array) ProtoMessage() {}

func (x *DB_Policy815Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy815Array.ProtoReflect.Descriptor instead.
func (*DB_Policy815Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{151}
}

func (x *DB_Policy815Array) GetArr() []*DB_Policy815 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Policy816 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Time            int32   `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
	FishId          int32   `protobuf:"varint,3,opt,name=FishId,proto3" json:"FishId,omitempty"`
	Paths           []int32 `protobuf:"varint,4,rep,packed,name=Paths,proto3" json:"Paths,omitempty"`
	Count           int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	Speed           int32   `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Event           int32   `protobuf:"varint,7,opt,name=Event,proto3" json:"Event,omitempty"`
	RefreshInterval int32   `protobuf:"varint,8,opt,name=RefreshInterval,proto3" json:"RefreshInterval,omitempty"`
	TimeToLive      int32   `protobuf:"varint,9,opt,name=TimeToLive,proto3" json:"TimeToLive,omitempty"`
}

func (x *DB_Policy816) Reset() {
	*x = DB_Policy816{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy816) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy816) ProtoMessage() {}

func (x *DB_Policy816) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy816.ProtoReflect.Descriptor instead.
func (*DB_Policy816) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{152}
}

func (x *DB_Policy816) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Policy816) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DB_Policy816) GetFishId() int32 {
	if x != nil {
		return x.FishId
	}
	return 0
}

func (x *DB_Policy816) GetPaths() []int32 {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *DB_Policy816) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_Policy816) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DB_Policy816) GetEvent() int32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *DB_Policy816) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DB_Policy816) GetTimeToLive() int32 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

type DB_Policy816Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Policy816 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Policy816Array) Reset() {
	*x = DB_Policy816Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Policy816Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Policy816Array) ProtoMessage() {}

func (x *DB_Policy816Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Policy816Array.ProtoReflect.Descriptor instead.
func (*DB_Policy816Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{153}
}

func (x *DB_Policy816Array) GetArr() []*DB_Policy816 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_RobotGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EnterCoin int32 `protobuf:"varint,2,opt,name=EnterCoin,proto3" json:"EnterCoin,omitempty"`
	LeaveCoin int32 `protobuf:"varint,3,opt,name=LeaveCoin,proto3" json:"LeaveCoin,omitempty"`
	GameTimes int32 `protobuf:"varint,4,opt,name=GameTimes,proto3" json:"GameTimes,omitempty"`
}

func (x *DB_RobotGame) Reset() {
	*x = DB_RobotGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_RobotGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_RobotGame) ProtoMessage() {}

func (x *DB_RobotGame) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_RobotGame.ProtoReflect.Descriptor instead.
func (*DB_RobotGame) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{154}
}

func (x *DB_RobotGame) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_RobotGame) GetEnterCoin() int32 {
	if x != nil {
		return x.EnterCoin
	}
	return 0
}

func (x *DB_RobotGame) GetLeaveCoin() int32 {
	if x != nil {
		return x.LeaveCoin
	}
	return 0
}

func (x *DB_RobotGame) GetGameTimes() int32 {
	if x != nil {
		return x.GameTimes
	}
	return 0
}

type DB_RobotGameArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_RobotGame `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_RobotGameArray) Reset() {
	*x = DB_RobotGameArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_RobotGameArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_RobotGameArray) ProtoMessage() {}

func (x *DB_RobotGameArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_RobotGameArray.ProtoReflect.Descriptor instead.
func (*DB_RobotGameArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{155}
}

func (x *DB_RobotGameArray) GetArr() []*DB_RobotGame {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Sensitive_Words struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Sensitive_Words string `protobuf:"bytes,2,opt,name=Sensitive_Words,json=SensitiveWords,proto3" json:"Sensitive_Words,omitempty"`
}

func (x *DB_Sensitive_Words) Reset() {
	*x = DB_Sensitive_Words{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Sensitive_Words) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Sensitive_Words) ProtoMessage() {}

func (x *DB_Sensitive_Words) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Sensitive_Words.ProtoReflect.Descriptor instead.
func (*DB_Sensitive_Words) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{156}
}

func (x *DB_Sensitive_Words) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Sensitive_Words) GetSensitive_Words() string {
	if x != nil {
		return x.Sensitive_Words
	}
	return ""
}

type DB_Sensitive_WordsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Sensitive_Words `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Sensitive_WordsArray) Reset() {
	*x = DB_Sensitive_WordsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Sensitive_WordsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Sensitive_WordsArray) ProtoMessage() {}

func (x *DB_Sensitive_WordsArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Sensitive_WordsArray.ProtoReflect.Descriptor instead.
func (*DB_Sensitive_WordsArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{157}
}

func (x *DB_Sensitive_WordsArray) GetArr() []*DB_Sensitive_Words {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Shop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ShowType         int32  `protobuf:"varint,2,opt,name=ShowType,proto3" json:"ShowType,omitempty"`
	Name             string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Picture          string `protobuf:"bytes,4,opt,name=Picture,proto3" json:"Picture,omitempty"`
	Desc             string `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Group            int32  `protobuf:"varint,6,opt,name=Group,proto3" json:"Group,omitempty"`
	Rebate           int32  `protobuf:"varint,7,opt,name=Rebate,proto3" json:"Rebate,omitempty"`
	Turn             int32  `protobuf:"varint,8,opt,name=Turn,proto3" json:"Turn,omitempty"`
	Special          int32  `protobuf:"varint,9,opt,name=Special,proto3" json:"Special,omitempty"`
	Costype          int32  `protobuf:"varint,10,opt,name=Costype,proto3" json:"Costype,omitempty"`
	Costp            int32  `protobuf:"varint,11,opt,name=Costp,proto3" json:"Costp,omitempty"`
	Cost             int32  `protobuf:"varint,12,opt,name=Cost,proto3" json:"Cost,omitempty"`
	Typee            int32  `protobuf:"varint,13,opt,name=Typee,proto3" json:"Typee,omitempty"`
	PropId           int32  `protobuf:"varint,14,opt,name=PropId,proto3" json:"PropId,omitempty"`
	Value            int32  `protobuf:"varint,15,opt,name=Value,proto3" json:"Value,omitempty"`
	Getype           int32  `protobuf:"varint,16,opt,name=Getype,proto3" json:"Getype,omitempty"`
	Tpyes            int32  `protobuf:"varint,17,opt,name=Tpyes,proto3" json:"Tpyes,omitempty"`
	Max              int32  `protobuf:"varint,18,opt,name=Max,proto3" json:"Max,omitempty"`
	ConditionId      int32  `protobuf:"varint,19,opt,name=ConditionId,proto3" json:"ConditionId,omitempty"`
	Reload           int32  `protobuf:"varint,20,opt,name=Reload,proto3" json:"Reload,omitempty"`
	Amount           int32  `protobuf:"varint,21,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TimesLimit       int32  `protobuf:"varint,22,opt,name=TimesLimit,proto3" json:"TimesLimit,omitempty"`
	DayLimit         int32  `protobuf:"varint,23,opt,name=DayLimit,proto3" json:"DayLimit,omitempty"`
	PT_ItemCode      string `protobuf:"bytes,24,opt,name=PT_ItemCode,json=PTItemCode,proto3" json:"PT_ItemCode,omitempty"`
	PayPlatform_Flag string `protobuf:"bytes,25,opt,name=PayPlatform_Flag,json=PayPlatformFlag,proto3" json:"PayPlatform_Flag,omitempty"`
}

func (x *DB_Shop) Reset() {
	*x = DB_Shop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Shop) ProtoMessage() {}

func (x *DB_Shop) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Shop.ProtoReflect.Descriptor instead.
func (*DB_Shop) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{158}
}

func (x *DB_Shop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Shop) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *DB_Shop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Shop) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *DB_Shop) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_Shop) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *DB_Shop) GetRebate() int32 {
	if x != nil {
		return x.Rebate
	}
	return 0
}

func (x *DB_Shop) GetTurn() int32 {
	if x != nil {
		return x.Turn
	}
	return 0
}

func (x *DB_Shop) GetSpecial() int32 {
	if x != nil {
		return x.Special
	}
	return 0
}

func (x *DB_Shop) GetCostype() int32 {
	if x != nil {
		return x.Costype
	}
	return 0
}

func (x *DB_Shop) GetCostp() int32 {
	if x != nil {
		return x.Costp
	}
	return 0
}

func (x *DB_Shop) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *DB_Shop) GetTypee() int32 {
	if x != nil {
		return x.Typee
	}
	return 0
}

func (x *DB_Shop) GetPropId() int32 {
	if x != nil {
		return x.PropId
	}
	return 0
}

func (x *DB_Shop) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DB_Shop) GetGetype() int32 {
	if x != nil {
		return x.Getype
	}
	return 0
}

func (x *DB_Shop) GetTpyes() int32 {
	if x != nil {
		return x.Tpyes
	}
	return 0
}

func (x *DB_Shop) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *DB_Shop) GetConditionId() int32 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *DB_Shop) GetReload() int32 {
	if x != nil {
		return x.Reload
	}
	return 0
}

func (x *DB_Shop) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DB_Shop) GetTimesLimit() int32 {
	if x != nil {
		return x.TimesLimit
	}
	return 0
}

func (x *DB_Shop) GetDayLimit() int32 {
	if x != nil {
		return x.DayLimit
	}
	return 0
}

func (x *DB_Shop) GetPT_ItemCode() string {
	if x != nil {
		return x.PT_ItemCode
	}
	return ""
}

func (x *DB_Shop) GetPayPlatform_Flag() string {
	if x != nil {
		return x.PayPlatform_Flag
	}
	return ""
}

type DB_ShopArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Shop `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_ShopArray) Reset() {
	*x = DB_ShopArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ShopArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ShopArray) ProtoMessage() {}

func (x *DB_ShopArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ShopArray.ProtoReflect.Descriptor instead.
func (*DB_ShopArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{159}
}

func (x *DB_ShopArray) GetArr() []*DB_Shop {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Shop1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ItemId            int32   `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	Page              int32   `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`
	Order             int32   `protobuf:"varint,4,opt,name=Order,proto3" json:"Order,omitempty"`
	Type              int32   `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Location          []int32 `protobuf:"varint,6,rep,packed,name=Location,proto3" json:"Location,omitempty"`
	Picture           string  `protobuf:"bytes,7,opt,name=Picture,proto3" json:"Picture,omitempty"`
	Name              string  `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	Ad                int32   `protobuf:"varint,9,opt,name=Ad,proto3" json:"Ad,omitempty"`
	AdTime            int32   `protobuf:"varint,10,opt,name=AdTime,proto3" json:"AdTime,omitempty"`
	RepeatTimes       int32   `protobuf:"varint,11,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`
	CoolingTime       []int32 `protobuf:"varint,12,rep,packed,name=CoolingTime,proto3" json:"CoolingTime,omitempty"`
	Label             []int32 `protobuf:"varint,13,rep,packed,name=Label,proto3" json:"Label,omitempty"`
	Added             int32   `protobuf:"varint,14,opt,name=Added,proto3" json:"Added,omitempty"`
	Amount            int32   `protobuf:"varint,15,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Consume           int32   `protobuf:"varint,16,opt,name=Consume,proto3" json:"Consume,omitempty"`
	ConsumptionAmount int32   `protobuf:"varint,17,opt,name=ConsumptionAmount,proto3" json:"ConsumptionAmount,omitempty"`
}

func (x *DB_Shop1) Reset() {
	*x = DB_Shop1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Shop1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Shop1) ProtoMessage() {}

func (x *DB_Shop1) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Shop1.ProtoReflect.Descriptor instead.
func (*DB_Shop1) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{160}
}

func (x *DB_Shop1) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Shop1) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DB_Shop1) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DB_Shop1) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DB_Shop1) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DB_Shop1) GetLocation() []int32 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DB_Shop1) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *DB_Shop1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Shop1) GetAd() int32 {
	if x != nil {
		return x.Ad
	}
	return 0
}

func (x *DB_Shop1) GetAdTime() int32 {
	if x != nil {
		return x.AdTime
	}
	return 0
}

func (x *DB_Shop1) GetRepeatTimes() int32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *DB_Shop1) GetCoolingTime() []int32 {
	if x != nil {
		return x.CoolingTime
	}
	return nil
}

func (x *DB_Shop1) GetLabel() []int32 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *DB_Shop1) GetAdded() int32 {
	if x != nil {
		return x.Added
	}
	return 0
}

func (x *DB_Shop1) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DB_Shop1) GetConsume() int32 {
	if x != nil {
		return x.Consume
	}
	return 0
}

func (x *DB_Shop1) GetConsumptionAmount() int32 {
	if x != nil {
		return x.ConsumptionAmount
	}
	return 0
}

type DB_Shop1Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Shop1 `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_Shop1Array) Reset() {
	*x = DB_Shop1Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Shop1Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Shop1Array) ProtoMessage() {}

func (x *DB_Shop1Array) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Shop1Array.ProtoReflect.Descriptor instead.
func (*DB_Shop1Array) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{161}
}

func (x *DB_Shop1Array) GetArr() []*DB_Shop1 {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_SlotRateWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GameFreeId int32   `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	Pos        int32   `protobuf:"varint,3,opt,name=Pos,proto3" json:"Pos,omitempty"`
	NormCol1   []int32 `protobuf:"varint,4,rep,packed,name=NormCol1,proto3" json:"NormCol1,omitempty"`
	NormCol2   []int32 `protobuf:"varint,5,rep,packed,name=NormCol2,proto3" json:"NormCol2,omitempty"`
	NormCol3   []int32 `protobuf:"varint,6,rep,packed,name=NormCol3,proto3" json:"NormCol3,omitempty"`
	NormCol4   []int32 `protobuf:"varint,7,rep,packed,name=NormCol4,proto3" json:"NormCol4,omitempty"`
	NormCol5   []int32 `protobuf:"varint,8,rep,packed,name=NormCol5,proto3" json:"NormCol5,omitempty"`
	FreeCol1   []int32 `protobuf:"varint,9,rep,packed,name=FreeCol1,proto3" json:"FreeCol1,omitempty"`
	FreeCol2   []int32 `protobuf:"varint,10,rep,packed,name=FreeCol2,proto3" json:"FreeCol2,omitempty"`
	FreeCol3   []int32 `protobuf:"varint,11,rep,packed,name=FreeCol3,proto3" json:"FreeCol3,omitempty"`
	FreeCol4   []int32 `protobuf:"varint,12,rep,packed,name=FreeCol4,proto3" json:"FreeCol4,omitempty"`
	FreeCol5   []int32 `protobuf:"varint,13,rep,packed,name=FreeCol5,proto3" json:"FreeCol5,omitempty"`
	MaryOut    []int32 `protobuf:"varint,14,rep,packed,name=MaryOut,proto3" json:"MaryOut,omitempty"`
	MaryMid    []int32 `protobuf:"varint,15,rep,packed,name=MaryMid,proto3" json:"MaryMid,omitempty"`
}

func (x *DB_SlotRateWeight) Reset() {
	*x = DB_SlotRateWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_SlotRateWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_SlotRateWeight) ProtoMessage() {}

func (x *DB_SlotRateWeight) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_SlotRateWeight.ProtoReflect.Descriptor instead.
func (*DB_SlotRateWeight) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{162}
}

func (x *DB_SlotRateWeight) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_SlotRateWeight) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *DB_SlotRateWeight) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DB_SlotRateWeight) GetNormCol1() []int32 {
	if x != nil {
		return x.NormCol1
	}
	return nil
}

func (x *DB_SlotRateWeight) GetNormCol2() []int32 {
	if x != nil {
		return x.NormCol2
	}
	return nil
}

func (x *DB_SlotRateWeight) GetNormCol3() []int32 {
	if x != nil {
		return x.NormCol3
	}
	return nil
}

func (x *DB_SlotRateWeight) GetNormCol4() []int32 {
	if x != nil {
		return x.NormCol4
	}
	return nil
}

func (x *DB_SlotRateWeight) GetNormCol5() []int32 {
	if x != nil {
		return x.NormCol5
	}
	return nil
}

func (x *DB_SlotRateWeight) GetFreeCol1() []int32 {
	if x != nil {
		return x.FreeCol1
	}
	return nil
}

func (x *DB_SlotRateWeight) GetFreeCol2() []int32 {
	if x != nil {
		return x.FreeCol2
	}
	return nil
}

func (x *DB_SlotRateWeight) GetFreeCol3() []int32 {
	if x != nil {
		return x.FreeCol3
	}
	return nil
}

func (x *DB_SlotRateWeight) GetFreeCol4() []int32 {
	if x != nil {
		return x.FreeCol4
	}
	return nil
}

func (x *DB_SlotRateWeight) GetFreeCol5() []int32 {
	if x != nil {
		return x.FreeCol5
	}
	return nil
}

func (x *DB_SlotRateWeight) GetMaryOut() []int32 {
	if x != nil {
		return x.MaryOut
	}
	return nil
}

func (x *DB_SlotRateWeight) GetMaryMid() []int32 {
	if x != nil {
		return x.MaryMid
	}
	return nil
}

type DB_SlotRateWeightArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_SlotRateWeight `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_SlotRateWeightArray) Reset() {
	*x = DB_SlotRateWeightArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_SlotRateWeightArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_SlotRateWeightArray) ProtoMessage() {}

func (x *DB_SlotRateWeightArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_SlotRateWeightArray.ProtoReflect.Descriptor instead.
func (*DB_SlotRateWeightArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{163}
}

func (x *DB_SlotRateWeightArray) GetArr() []*DB_SlotRateWeight {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_SystemChance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Desc       string `protobuf:"bytes,2,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ChanceType int32  `protobuf:"varint,3,opt,name=ChanceType,proto3" json:"ChanceType,omitempty"`
	Coin       int32  `protobuf:"varint,4,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Rate       int32  `protobuf:"varint,5,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *DB_SystemChance) Reset() {
	*x = DB_SystemChance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_SystemChance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_SystemChance) ProtoMessage() {}

func (x *DB_SystemChance) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_SystemChance.ProtoReflect.Descriptor instead.
func (*DB_SystemChance) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{164}
}

func (x *DB_SystemChance) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_SystemChance) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_SystemChance) GetChanceType() int32 {
	if x != nil {
		return x.ChanceType
	}
	return 0
}

func (x *DB_SystemChance) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DB_SystemChance) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type DB_SystemChanceArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_SystemChance `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_SystemChanceArray) Reset() {
	*x = DB_SystemChanceArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_SystemChanceArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_SystemChanceArray) ProtoMessage() {}

func (x *DB_SystemChanceArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_SystemChanceArray.ProtoReflect.Descriptor instead.
func (*DB_SystemChanceArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{165}
}

func (x *DB_SystemChanceArray) GetArr() []*DB_SystemChance {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Desc          string  `protobuf:"bytes,3,opt,name=Desc,proto3" json:"Desc,omitempty"`
	Sort          int32   `protobuf:"varint,4,opt,name=Sort,proto3" json:"Sort,omitempty"`
	TrunkTaskId   int32   `protobuf:"varint,5,opt,name=TrunkTaskId,proto3" json:"TrunkTaskId,omitempty"`
	PostIds       []int32 `protobuf:"varint,6,rep,packed,name=PostIds,proto3" json:"PostIds,omitempty"`
	PostLimitTime int32   `protobuf:"varint,7,opt,name=PostLimitTime,proto3" json:"PostLimitTime,omitempty"`
	AcceptConds   []int32 `protobuf:"varint,8,rep,packed,name=AcceptConds,proto3" json:"AcceptConds,omitempty"`
	CompleteConds []int32 `protobuf:"varint,9,rep,packed,name=CompleteConds,proto3" json:"CompleteConds,omitempty"`
	Prize         []int32 `protobuf:"varint,10,rep,packed,name=Prize,proto3" json:"Prize,omitempty"`
	PeriodOfTime  int32   `protobuf:"varint,11,opt,name=PeriodOfTime,proto3" json:"PeriodOfTime,omitempty"`
	StartOfTime   int32   `protobuf:"varint,12,opt,name=StartOfTime,proto3" json:"StartOfTime,omitempty"`
	NeedDel       int32   `protobuf:"varint,13,opt,name=NeedDel,proto3" json:"NeedDel,omitempty"`
	Func          int32   `protobuf:"varint,14,opt,name=Func,proto3" json:"Func,omitempty"`
	FuncParam     []int32 `protobuf:"varint,15,rep,packed,name=FuncParam,proto3" json:"FuncParam,omitempty"`
	ZeroEffect    int32   `protobuf:"varint,16,opt,name=ZeroEffect,proto3" json:"ZeroEffect,omitempty"`
}

func (x *DB_Task) Reset() {
	*x = DB_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Task) ProtoMessage() {}

func (x *DB_Task) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Task.ProtoReflect.Descriptor instead.
func (*DB_Task) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{166}
}

func (x *DB_Task) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_Task) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_Task) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DB_Task) GetTrunkTaskId() int32 {
	if x != nil {
		return x.TrunkTaskId
	}
	return 0
}

func (x *DB_Task) GetPostIds() []int32 {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *DB_Task) GetPostLimitTime() int32 {
	if x != nil {
		return x.PostLimitTime
	}
	return 0
}

func (x *DB_Task) GetAcceptConds() []int32 {
	if x != nil {
		return x.AcceptConds
	}
	return nil
}

func (x *DB_Task) GetCompleteConds() []int32 {
	if x != nil {
		return x.CompleteConds
	}
	return nil
}

func (x *DB_Task) GetPrize() []int32 {
	if x != nil {
		return x.Prize
	}
	return nil
}

func (x *DB_Task) GetPeriodOfTime() int32 {
	if x != nil {
		return x.PeriodOfTime
	}
	return 0
}

func (x *DB_Task) GetStartOfTime() int32 {
	if x != nil {
		return x.StartOfTime
	}
	return 0
}

func (x *DB_Task) GetNeedDel() int32 {
	if x != nil {
		return x.NeedDel
	}
	return 0
}

func (x *DB_Task) GetFunc() int32 {
	if x != nil {
		return x.Func
	}
	return 0
}

func (x *DB_Task) GetFuncParam() []int32 {
	if x != nil {
		return x.FuncParam
	}
	return nil
}

func (x *DB_Task) GetZeroEffect() int32 {
	if x != nil {
		return x.ZeroEffect
	}
	return 0
}

type DB_TaskArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Task `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_TaskArray) Reset() {
	*x = DB_TaskArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_TaskArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_TaskArray) ProtoMessage() {}

func (x *DB_TaskArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_TaskArray.ProtoReflect.Descriptor instead.
func (*DB_TaskArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{167}
}

func (x *DB_TaskArray) GetArr() []*DB_Task {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_TaskCond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CondType int32   `protobuf:"varint,3,opt,name=CondType,proto3" json:"CondType,omitempty"`
	Param    []int32 `protobuf:"varint,4,rep,packed,name=Param,proto3" json:"Param,omitempty"`
	Count    int32   `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *DB_TaskCond) Reset() {
	*x = DB_TaskCond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_TaskCond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_TaskCond) ProtoMessage() {}

func (x *DB_TaskCond) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_TaskCond.ProtoReflect.Descriptor instead.
func (*DB_TaskCond) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{168}
}

func (x *DB_TaskCond) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_TaskCond) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_TaskCond) GetCondType() int32 {
	if x != nil {
		return x.CondType
	}
	return 0
}

func (x *DB_TaskCond) GetParam() []int32 {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *DB_TaskCond) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DB_TaskCondArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_TaskCond `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_TaskCondArray) Reset() {
	*x = DB_TaskCondArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_TaskCondArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_TaskCondArray) ProtoMessage() {}

func (x *DB_TaskCondArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_TaskCondArray.ProtoReflect.Descriptor instead.
func (*DB_TaskCondArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{169}
}

func (x *DB_TaskCondArray) GetArr() []*DB_TaskCond {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_ThirdPlatformGameMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SystemGameID          int32  `protobuf:"varint,2,opt,name=SystemGameID,proto3" json:"SystemGameID,omitempty"`
	ThirdPlatformName     string `protobuf:"bytes,3,opt,name=ThirdPlatformName,proto3" json:"ThirdPlatformName,omitempty"`
	ThirdGameID           string `protobuf:"bytes,4,opt,name=ThirdGameID,proto3" json:"ThirdGameID,omitempty"`
	Desc                  string `protobuf:"bytes,5,opt,name=Desc,proto3" json:"Desc,omitempty"`
	ScreenOrientationType int32  `protobuf:"varint,6,opt,name=ScreenOrientationType,proto3" json:"ScreenOrientationType,omitempty"`
	ThirdID               int32  `protobuf:"varint,7,opt,name=ThirdID,proto3" json:"ThirdID,omitempty"`
}

func (x *DB_ThirdPlatformGameMapping) Reset() {
	*x = DB_ThirdPlatformGameMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ThirdPlatformGameMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ThirdPlatformGameMapping) ProtoMessage() {}

func (x *DB_ThirdPlatformGameMapping) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ThirdPlatformGameMapping.ProtoReflect.Descriptor instead.
func (*DB_ThirdPlatformGameMapping) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{170}
}

func (x *DB_ThirdPlatformGameMapping) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_ThirdPlatformGameMapping) GetSystemGameID() int32 {
	if x != nil {
		return x.SystemGameID
	}
	return 0
}

func (x *DB_ThirdPlatformGameMapping) GetThirdPlatformName() string {
	if x != nil {
		return x.ThirdPlatformName
	}
	return ""
}

func (x *DB_ThirdPlatformGameMapping) GetThirdGameID() string {
	if x != nil {
		return x.ThirdGameID
	}
	return ""
}

func (x *DB_ThirdPlatformGameMapping) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *DB_ThirdPlatformGameMapping) GetScreenOrientationType() int32 {
	if x != nil {
		return x.ScreenOrientationType
	}
	return 0
}

func (x *DB_ThirdPlatformGameMapping) GetThirdID() int32 {
	if x != nil {
		return x.ThirdID
	}
	return 0
}

type DB_ThirdPlatformGameMappingArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_ThirdPlatformGameMapping `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_ThirdPlatformGameMappingArray) Reset() {
	*x = DB_ThirdPlatformGameMappingArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_ThirdPlatformGameMappingArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_ThirdPlatformGameMappingArray) ProtoMessage() {}

func (x *DB_ThirdPlatformGameMappingArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_ThirdPlatformGameMappingArray.ProtoReflect.Descriptor instead.
func (*DB_ThirdPlatformGameMappingArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{171}
}

func (x *DB_ThirdPlatformGameMappingArray) GetArr() []*DB_ThirdPlatformGameMapping {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_Tips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GameId []int32 `protobuf:"varint,2,rep,packed,name=GameId,proto3" json:"GameId,omitempty"`
	Des    string  `protobuf:"bytes,3,opt,name=Des,proto3" json:"Des,omitempty"`
}

func (x *DB_Tips) Reset() {
	*x = DB_Tips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_Tips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_Tips) ProtoMessage() {}

func (x *DB_Tips) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_Tips.ProtoReflect.Descriptor instead.
func (*DB_Tips) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{172}
}

func (x *DB_Tips) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_Tips) GetGameId() []int32 {
	if x != nil {
		return x.GameId
	}
	return nil
}

func (x *DB_Tips) GetDes() string {
	if x != nil {
		return x.Des
	}
	return ""
}

type DB_TipsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_Tips `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_TipsArray) Reset() {
	*x = DB_TipsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_TipsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_TipsArray) ProtoMessage() {}

func (x *DB_TipsArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_TipsArray.ProtoReflect.Descriptor instead.
func (*DB_TipsArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{173}
}

func (x *DB_TipsArray) GetArr() []*DB_Tips {
	if x != nil {
		return x.Arr
	}
	return nil
}

type DB_VIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Count           int32    `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	Param           []int32  `protobuf:"varint,4,rep,packed,name=Param,proto3" json:"Param,omitempty"`
	ParamName       []string `protobuf:"bytes,5,rep,name=ParamName,proto3" json:"ParamName,omitempty"`
	ExchangeRate    int32    `protobuf:"varint,6,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`
	RewardPaotaiID  []int32  `protobuf:"varint,7,rep,packed,name=RewardPaotaiID,proto3" json:"RewardPaotaiID,omitempty"`
	RewardOutlineID []int32  `protobuf:"varint,8,rep,packed,name=RewardOutlineID,proto3" json:"RewardOutlineID,omitempty"`
}

func (x *DB_VIP) Reset() {
	*x = DB_VIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_VIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_VIP) ProtoMessage() {}

func (x *DB_VIP) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_VIP.ProtoReflect.Descriptor instead.
func (*DB_VIP) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{174}
}

func (x *DB_VIP) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DB_VIP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DB_VIP) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DB_VIP) GetParam() []int32 {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *DB_VIP) GetParamName() []string {
	if x != nil {
		return x.ParamName
	}
	return nil
}

func (x *DB_VIP) GetExchangeRate() int32 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *DB_VIP) GetRewardPaotaiID() []int32 {
	if x != nil {
		return x.RewardPaotaiID
	}
	return nil
}

func (x *DB_VIP) GetRewardOutlineID() []int32 {
	if x != nil {
		return x.RewardOutlineID
	}
	return nil
}

type DB_VIPArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*DB_VIP `protobuf:"bytes,1,rep,name=Arr,proto3" json:"Arr,omitempty"`
}

func (x *DB_VIPArray) Reset() {
	*x = DB_VIPArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdata_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DB_VIPArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DB_VIPArray) ProtoMessage() {}

func (x *DB_VIPArray) ProtoReflect() protoreflect.Message {
	mi := &file_pbdata_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DB_VIPArray.ProtoReflect.Descriptor instead.
func (*DB_VIPArray) Descriptor() ([]byte, []int) {
	return file_pbdata_proto_rawDescGZIP(), []int{175}
}

func (x *DB_VIPArray) GetArr() []*DB_VIP {
	if x != nil {
		return x.Arr
	}
	return nil
}

var File_pbdata_proto protoreflect.FileDescriptor

var file_pbdata_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x0a, 0x44, 0x42, 0x5f, 0x41, 0x63, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x49, 0x74, 0x65, 0x6d, 0x5f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x44,
	0x42, 0x5f, 0x41, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x24,
	0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x41, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x03, 0x41, 0x72, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x43, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a,
	0x11, 0x44, 0x42, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x31, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x56, 0x0a, 0x0e, 0x44, 0x42,
	0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x44, 0x42, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x03,
	0x41, 0x72, 0x72, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a,
	0x11, 0x44, 0x42, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x44,
	0x42, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x47, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x44, 0x42,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x27, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x91, 0x07, 0x0a, 0x07, 0x44, 0x42,
	0x5f, 0x46, 0x69, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x12,
	0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x47,
	0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x45, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x68, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x65, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x69, 0x65, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x69, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x69, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x44, 0x69, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x69, 0x65, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44,
	0x69, 0x65, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x6b, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49,
	0x73, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x49, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52, 0x65, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x69, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x69, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x73, 0x68, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x5a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x5a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x50, 0x6e,
	0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x50, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x69, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x69,
	0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x31, 0x0a,
	0x0c, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0x85, 0x01, 0x0a, 0x09, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x48, 0x50, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x22, 0x35, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x46,
	0x69, 0x73, 0x68, 0x48, 0x50, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x03, 0x41, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x48, 0x50, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22,
	0x72, 0x0a, 0x0a, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x48, 0x50, 0x32, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x69, 0x73, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46,
	0x69, 0x73, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x37, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x48, 0x50,
	0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f,
	0x46, 0x69, 0x73, 0x68, 0x48, 0x50, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xa5, 0x01, 0x0a,
	0x0b, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22,
	0xbd, 0x01, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x47, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x47, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x41, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x52, 0x61, 0x74, 0x65, 0x41, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x52, 0x61, 0x74, 0x65, 0x42, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x61, 0x74, 0x65, 0x43, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xed, 0x02, 0x0a, 0x0b, 0x44,
	0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c,
	0x64, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c,
	0x64, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75,
	0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75,
	0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c,
	0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x6d, 0x47, 0x6f, 0x6c,
	0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x44, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x6f, 0x73, 0x73,
	0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x6f,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42,
	0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25,
	0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x69, 0x73, 0x68, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x33, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x34, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x35, 0x22, 0x47, 0x0a, 0x17, 0x44, 0x42,
	0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x4f, 0x64, 0x64, 0x73,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x4f, 0x64, 0x64, 0x73, 0x52, 0x03,
	0x41, 0x72, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65,
	0x47, 0x6f, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x30, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x03,
	0x41, 0x72, 0x72, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x65, 0x47, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x42, 0x5f, 0x46, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x03, 0x41, 0x72, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x54, 0x72, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x22, 0x44, 0x42, 0x5f, 0x46,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x47, 0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x37,
	0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x46, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x65, 0x47,
	0x6f, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xdf, 0x02, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x47,
	0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x56, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x31, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x33, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x33, 0x12,
	0x18, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x22, 0x3d, 0x0a, 0x12, 0x44, 0x42, 0x5f,
	0x47, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x56, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x27, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x56, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xff, 0x06, 0x0a, 0x0f, 0x44, 0x42, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78,
	0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x4f,
	0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x4d, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x66, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x74,
	0x72, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x74,
	0x72, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48,
	0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x61, 0x73, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x61, 0x73,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x61, 0x73, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45,
	0x61, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x61,
	0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x45, 0x61, 0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x61, 0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x45, 0x61, 0x73, 0x72,
	0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x70,
	0x43, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x43, 0x70, 0x43, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x14, 0x44, 0x42,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xa5, 0x0b,
	0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x68, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x75, 0x72,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x65, 0x74, 0x44, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x65, 0x74, 0x44, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x69, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x02, 0x41, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x65, 0x49, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x61, 0x6d, 0x65, 0x49, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x69, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x4e,
	0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50,
	0x6c, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x75, 0x65, 0x4d, 0x61,
	0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x75, 0x65, 0x4d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x65, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x18, 0x30, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0x85, 0x03, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x77,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x30, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x61,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x47, 0x6f,
	0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x03,
	0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03,
	0x41, 0x72, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x03, 0x41, 0x72, 0x72, 0x22, 0x64, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x13, 0x44, 0x42,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x0c,
	0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x42, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x31, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52,
	0x61, 0x74, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x22, 0x3b,
	0x0a, 0x11, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x14,
	0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x22, 0x4b,
	0x0a, 0x19, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x41,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xf9, 0x01, 0x0a, 0x0b,
	0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x5f, 0x50, 0x65, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x41,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x65, 0x74, 0x52, 0x03, 0x41,
	0x72, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x8e,
	0x01, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x4f, 0x64, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64,
	0x73, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64,
	0x64, 0x73, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73,
	0x34, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x35, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6f, 0x64, 0x64, 0x73, 0x35, 0x22,
	0x3f, 0x0a, 0x13, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x4f, 0x64, 0x64,
	0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x4f, 0x64, 0x64, 0x73, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0x88, 0x01, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x54,
	0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x44,
	0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x03, 0x41, 0x72, 0x72, 0x22, 0x4e, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x43, 0x0a, 0x15, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x44, 0x42,
	0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x42, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x75,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x54, 0x72, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1e, 0x44, 0x42, 0x5f,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x03, 0x41,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x42, 0x5f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0x3a, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x2d, 0x0a, 0x07, 0x44, 0x42, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x42, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x30, 0x0a, 0x0a, 0x44,
	0x42, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a,
	0x0f, 0x44, 0x42, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x24, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f,
	0x79, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x31, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x47, 0x69, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x72, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x72, 0x6c, 0x52,
	0x03, 0x41, 0x72, 0x72, 0x22, 0x6d, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x53, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x41,
	0x72, 0x72, 0x22, 0xa5, 0x05, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x50, 0x61, 0x79, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x64, 0x64, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x64, 0x64, 0x73, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x64, 0x64, 0x73,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x4f, 0x64, 0x64, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e,
	0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64,
	0x4c, 0x69, 0x62, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x62, 0x41, 0x72, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x62, 0x41, 0x72, 0x72, 0x22, 0x3d, 0x0a, 0x12, 0x44, 0x42,
	0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x27, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x31,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x31, 0x30, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x31, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31,
	0x30, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x33,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x30, 0x33, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x31, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x31, 0x35, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x32,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x31, 0x35, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x31, 0x35, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x31, 0x35, 0x33, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32,
	0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x31,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x32, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x30, 0x33,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x32, 0x35, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x32, 0x35, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x35, 0x31, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32,
	0x35, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x35, 0x32,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x35, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x35, 0x33, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x35, 0x33, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x32, 0x35, 0x33, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x31,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x33, 0x30, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x33, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33,
	0x30, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x33,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x30, 0x33, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x31, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x33, 0x35, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x32,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x33, 0x35, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x33, 0x35, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x33, 0x35, 0x33, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34,
	0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x31,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x34, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x30, 0x33,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x34, 0x32, 0x30, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x34, 0x32, 0x30, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x32, 0x30, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34,
	0x35, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x31,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x32, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x34, 0x35, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x34, 0x35, 0x33,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x35, 0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x35, 0x30, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x35, 0x30, 0x31, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x35,
	0x30, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x35, 0x30, 0x32,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x35, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x36, 0x30, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x36, 0x30, 0x31, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x36, 0x30, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x37, 0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x37, 0x30, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x37, 0x30, 0x31,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x37, 0x30, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x37, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x37, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38,
	0x30, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x31,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x31, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x32, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x30, 0x32, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x33, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x33,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x38, 0x30, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x30, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x34, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38,
	0x30, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x35,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x35, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x36, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x30, 0x36, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x30, 0x36, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x31, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x31,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x38, 0x31, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x31, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x32, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38,
	0x31, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x33,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x33, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x34, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x34, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x31, 0x34, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42,
	0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x46, 0x69, 0x73, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x35, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x35,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x38, 0x31, 0x36, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x69, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x38, 0x31, 0x36, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x42, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x38, 0x31, 0x36, 0x52, 0x03, 0x41, 0x72,
	0x72, 0x22, 0x78, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x44,
	0x42, 0x5f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x26, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x4d, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x44, 0x42, 0x5f, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0xf5, 0x04, 0x0a, 0x07, 0x44, 0x42, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x73, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x79,
	0x70, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x70, 0x79, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x70, 0x79, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x4d, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x50, 0x54, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x54, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x31, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x53,
	0x68, 0x6f, 0x70, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x42, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xb2, 0x03, 0x0a, 0x08,
	0x44, 0x42, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x41, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x33, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x31, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x31,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0xa1, 0x03, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6c, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6c, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x33, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x33, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x34, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x34, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x35, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c,
	0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c,
	0x32, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x33, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x33, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x35, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x4d, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x16, 0x44, 0x42, 0x5f,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x61, 0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0x7d, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x41, 0x0a, 0x14, 0x44, 0x42, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42,
	0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x41,
	0x72, 0x72, 0x22, 0xc7, 0x03, 0x0a, 0x07, 0x44, 0x42, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50,
	0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x75,
	0x6e, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x5a, 0x65, 0x72, 0x6f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x5a, 0x65, 0x72, 0x6f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x31, 0x0a, 0x0c,
	0x44, 0x42, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x03,
	0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22,
	0x79, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x44, 0x42,
	0x5f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x25,
	0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x85, 0x02, 0x0a, 0x1b, 0x44, 0x42, 0x5f, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a,
	0x15, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x68, 0x69, 0x72, 0x64, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x68, 0x69, 0x72, 0x64, 0x49, 0x44, 0x22, 0x59, 0x0a,
	0x20, 0x44, 0x42, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x35, 0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x03, 0x41, 0x72, 0x72, 0x22, 0x43, 0x0a, 0x07, 0x44, 0x42, 0x5f, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x44,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x65, 0x73, 0x22, 0x31, 0x0a,
	0x0c, 0x44, 0x42, 0x5f, 0x54, 0x69, 0x70, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x21, 0x0a,
	0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x54, 0x69, 0x70, 0x73, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x22, 0xec, 0x01, 0x0a, 0x06, 0x44, 0x42, 0x5f, 0x56, 0x49, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6f, 0x74, 0x61, 0x69, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x6f,
	0x74, 0x61, 0x69, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x22,
	0x2f, 0x0a, 0x0b, 0x44, 0x42, 0x5f, 0x56, 0x49, 0x50, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x20,
	0x0a, 0x03, 0x41, 0x72, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x42, 0x5f, 0x56, 0x49, 0x50, 0x52, 0x03, 0x41, 0x72, 0x72,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbdata_proto_rawDescOnce sync.Once
	file_pbdata_proto_rawDescData = file_pbdata_proto_rawDesc
)

func file_pbdata_proto_rawDescGZIP() []byte {
	file_pbdata_proto_rawDescOnce.Do(func() {
		file_pbdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdata_proto_rawDescData)
	})
	return file_pbdata_proto_rawDescData
}

var file_pbdata_proto_msgTypes = make([]protoimpl.MessageInfo, 176)
var file_pbdata_proto_goTypes = []interface{}{
	(*DB_ActSign)(nil),                         // 0: server.DB_ActSign
	(*DB_ActSignArray)(nil),                    // 1: server.DB_ActSignArray
	(*DB_Activity1)(nil),                       // 2: server.DB_Activity1
	(*DB_Activity1Array)(nil),                  // 3: server.DB_Activity1Array
	(*DB_AnimalColor)(nil),                     // 4: server.DB_AnimalColor
	(*DB_AnimalColorArray)(nil),                // 5: server.DB_AnimalColorArray
	(*DB_ClientVer)(nil),                       // 6: server.DB_ClientVer
	(*DB_ClientVerArray)(nil),                  // 7: server.DB_ClientVerArray
	(*DB_Createroom)(nil),                      // 8: server.DB_Createroom
	(*DB_CreateroomArray)(nil),                 // 9: server.DB_CreateroomArray
	(*DB_Fish)(nil),                            // 10: server.DB_Fish
	(*DB_FishArray)(nil),                       // 11: server.DB_FishArray
	(*DB_FishHP)(nil),                          // 12: server.DB_FishHP
	(*DB_FishHPArray)(nil),                     // 13: server.DB_FishHPArray
	(*DB_FishHP2)(nil),                         // 14: server.DB_FishHP2
	(*DB_FishHP2Array)(nil),                    // 15: server.DB_FishHP2Array
	(*DB_FishPool)(nil),                        // 16: server.DB_FishPool
	(*DB_FishPoolArray)(nil),                   // 17: server.DB_FishPoolArray
	(*DB_FishRate)(nil),                        // 18: server.DB_FishRate
	(*DB_FishRateArray)(nil),                   // 19: server.DB_FishRateArray
	(*DB_FishRoom)(nil),                        // 20: server.DB_FishRoom
	(*DB_FishRoomArray)(nil),                   // 21: server.DB_FishRoomArray
	(*DB_FortuneGod_Odds)(nil),                 // 22: server.DB_FortuneGod_Odds
	(*DB_FortuneGod_OddsArray)(nil),            // 23: server.DB_FortuneGod_OddsArray
	(*DB_FortuneGod_TurnRate)(nil),             // 24: server.DB_FortuneGod_TurnRate
	(*DB_FortuneGod_TurnRateArray)(nil),        // 25: server.DB_FortuneGod_TurnRateArray
	(*DB_FortuneGod_Weight)(nil),               // 26: server.DB_FortuneGod_Weight
	(*DB_FortuneGod_WeightArray)(nil),          // 27: server.DB_FortuneGod_WeightArray
	(*DB_FortuneGod_WeightCondition)(nil),      // 28: server.DB_FortuneGod_WeightCondition
	(*DB_FortuneGod_WeightConditionArray)(nil), // 29: server.DB_FortuneGod_WeightConditionArray
	(*DB_GamMatchLV)(nil),                      // 30: server.DB_GamMatchLV
	(*DB_GamMatchLVArray)(nil),                 // 31: server.DB_GamMatchLVArray
	(*DB_GameCoinPool)(nil),                    // 32: server.DB_GameCoinPool
	(*DB_GameCoinPoolArray)(nil),               // 33: server.DB_GameCoinPoolArray
	(*DB_GameFree)(nil),                        // 34: server.DB_GameFree
	(*DB_GameFreeArray)(nil),                   // 35: server.DB_GameFreeArray
	(*DB_GameItem)(nil),                        // 36: server.DB_GameItem
	(*DB_GameItemArray)(nil),                   // 37: server.DB_GameItemArray
	(*DB_GameRule)(nil),                        // 38: server.DB_GameRule
	(*DB_GameRuleArray)(nil),                   // 39: server.DB_GameRuleArray
	(*DB_GameSubsidy)(nil),                     // 40: server.DB_GameSubsidy
	(*DB_GameSubsidyArray)(nil),                // 41: server.DB_GameSubsidyArray
	(*DB_Game_Drop)(nil),                       // 42: server.DB_Game_Drop
	(*DB_Game_DropArray)(nil),                  // 43: server.DB_Game_DropArray
	(*DB_Game_Introduction)(nil),               // 44: server.DB_Game_Introduction
	(*DB_Game_IntroductionArray)(nil),          // 45: server.DB_Game_IntroductionArray
	(*DB_Game_Pet)(nil),                        // 46: server.DB_Game_Pet
	(*DB_Game_PetArray)(nil),                   // 47: server.DB_Game_PetArray
	(*DB_Game_Role)(nil),                       // 48: server.DB_Game_Role
	(*DB_Game_RoleArray)(nil),                  // 49: server.DB_Game_RoleArray
	(*DB_Legend_Odds)(nil),                     // 50: server.DB_Legend_Odds
	(*DB_Legend_OddsArray)(nil),                // 51: server.DB_Legend_OddsArray
	(*DB_Legend_TurnRate)(nil),                 // 52: server.DB_Legend_TurnRate
	(*DB_Legend_TurnRateArray)(nil),            // 53: server.DB_Legend_TurnRateArray
	(*DB_Legend_Weight)(nil),                   // 54: server.DB_Legend_Weight
	(*DB_Legend_WeightArray)(nil),              // 55: server.DB_Legend_WeightArray
	(*DB_Legend_WeightCondition)(nil),          // 56: server.DB_Legend_WeightCondition
	(*DB_Legend_WeightConditionArray)(nil),     // 57: server.DB_Legend_WeightConditionArray
	(*DB_MatchRank)(nil),                       // 58: server.DB_MatchRank
	(*DB_MatchRankArray)(nil),                  // 59: server.DB_MatchRankArray
	(*DB_Name)(nil),                            // 60: server.DB_Name
	(*DB_NameArray)(nil),                       // 61: server.DB_NameArray
	(*DB_NameBoy)(nil),                         // 62: server.DB_NameBoy
	(*DB_NameBoyArray)(nil),                    // 63: server.DB_NameBoyArray
	(*DB_NameGirl)(nil),                        // 64: server.DB_NameGirl
	(*DB_NameGirlArray)(nil),                   // 65: server.DB_NameGirlArray
	(*DB_PlayerInfo)(nil),                      // 66: server.DB_PlayerInfo
	(*DB_PlayerInfoArray)(nil),                 // 67: server.DB_PlayerInfoArray
	(*DB_PlayerType)(nil),                      // 68: server.DB_PlayerType
	(*DB_PlayerTypeArray)(nil),                 // 69: server.DB_PlayerTypeArray
	(*DB_Policy101)(nil),                       // 70: server.DB_Policy101
	(*DB_Policy101Array)(nil),                  // 71: server.DB_Policy101Array
	(*DB_Policy102)(nil),                       // 72: server.DB_Policy102
	(*DB_Policy102Array)(nil),                  // 73: server.DB_Policy102Array
	(*DB_Policy103)(nil),                       // 74: server.DB_Policy103
	(*DB_Policy103Array)(nil),                  // 75: server.DB_Policy103Array
	(*DB_Policy151)(nil),                       // 76: server.DB_Policy151
	(*DB_Policy151Array)(nil),                  // 77: server.DB_Policy151Array
	(*DB_Policy152)(nil),                       // 78: server.DB_Policy152
	(*DB_Policy152Array)(nil),                  // 79: server.DB_Policy152Array
	(*DB_Policy153)(nil),                       // 80: server.DB_Policy153
	(*DB_Policy153Array)(nil),                  // 81: server.DB_Policy153Array
	(*DB_Policy201)(nil),                       // 82: server.DB_Policy201
	(*DB_Policy201Array)(nil),                  // 83: server.DB_Policy201Array
	(*DB_Policy202)(nil),                       // 84: server.DB_Policy202
	(*DB_Policy202Array)(nil),                  // 85: server.DB_Policy202Array
	(*DB_Policy203)(nil),                       // 86: server.DB_Policy203
	(*DB_Policy203Array)(nil),                  // 87: server.DB_Policy203Array
	(*DB_Policy251)(nil),                       // 88: server.DB_Policy251
	(*DB_Policy251Array)(nil),                  // 89: server.DB_Policy251Array
	(*DB_Policy252)(nil),                       // 90: server.DB_Policy252
	(*DB_Policy252Array)(nil),                  // 91: server.DB_Policy252Array
	(*DB_Policy253)(nil),                       // 92: server.DB_Policy253
	(*DB_Policy253Array)(nil),                  // 93: server.DB_Policy253Array
	(*DB_Policy301)(nil),                       // 94: server.DB_Policy301
	(*DB_Policy301Array)(nil),                  // 95: server.DB_Policy301Array
	(*DB_Policy302)(nil),                       // 96: server.DB_Policy302
	(*DB_Policy302Array)(nil),                  // 97: server.DB_Policy302Array
	(*DB_Policy303)(nil),                       // 98: server.DB_Policy303
	(*DB_Policy303Array)(nil),                  // 99: server.DB_Policy303Array
	(*DB_Policy351)(nil),                       // 100: server.DB_Policy351
	(*DB_Policy351Array)(nil),                  // 101: server.DB_Policy351Array
	(*DB_Policy352)(nil),                       // 102: server.DB_Policy352
	(*DB_Policy352Array)(nil),                  // 103: server.DB_Policy352Array
	(*DB_Policy353)(nil),                       // 104: server.DB_Policy353
	(*DB_Policy353Array)(nil),                  // 105: server.DB_Policy353Array
	(*DB_Policy401)(nil),                       // 106: server.DB_Policy401
	(*DB_Policy401Array)(nil),                  // 107: server.DB_Policy401Array
	(*DB_Policy402)(nil),                       // 108: server.DB_Policy402
	(*DB_Policy402Array)(nil),                  // 109: server.DB_Policy402Array
	(*DB_Policy403)(nil),                       // 110: server.DB_Policy403
	(*DB_Policy403Array)(nil),                  // 111: server.DB_Policy403Array
	(*DB_Policy420)(nil),                       // 112: server.DB_Policy420
	(*DB_Policy420Array)(nil),                  // 113: server.DB_Policy420Array
	(*DB_Policy451)(nil),                       // 114: server.DB_Policy451
	(*DB_Policy451Array)(nil),                  // 115: server.DB_Policy451Array
	(*DB_Policy452)(nil),                       // 116: server.DB_Policy452
	(*DB_Policy452Array)(nil),                  // 117: server.DB_Policy452Array
	(*DB_Policy453)(nil),                       // 118: server.DB_Policy453
	(*DB_Policy453Array)(nil),                  // 119: server.DB_Policy453Array
	(*DB_Policy501)(nil),                       // 120: server.DB_Policy501
	(*DB_Policy501Array)(nil),                  // 121: server.DB_Policy501Array
	(*DB_Policy502)(nil),                       // 122: server.DB_Policy502
	(*DB_Policy502Array)(nil),                  // 123: server.DB_Policy502Array
	(*DB_Policy601)(nil),                       // 124: server.DB_Policy601
	(*DB_Policy601Array)(nil),                  // 125: server.DB_Policy601Array
	(*DB_Policy701)(nil),                       // 126: server.DB_Policy701
	(*DB_Policy701Array)(nil),                  // 127: server.DB_Policy701Array
	(*DB_Policy702)(nil),                       // 128: server.DB_Policy702
	(*DB_Policy702Array)(nil),                  // 129: server.DB_Policy702Array
	(*DB_Policy801)(nil),                       // 130: server.DB_Policy801
	(*DB_Policy801Array)(nil),                  // 131: server.DB_Policy801Array
	(*DB_Policy802)(nil),                       // 132: server.DB_Policy802
	(*DB_Policy802Array)(nil),                  // 133: server.DB_Policy802Array
	(*DB_Policy803)(nil),                       // 134: server.DB_Policy803
	(*DB_Policy803Array)(nil),                  // 135: server.DB_Policy803Array
	(*DB_Policy804)(nil),                       // 136: server.DB_Policy804
	(*DB_Policy804Array)(nil),                  // 137: server.DB_Policy804Array
	(*DB_Policy805)(nil),                       // 138: server.DB_Policy805
	(*DB_Policy805Array)(nil),                  // 139: server.DB_Policy805Array
	(*DB_Policy806)(nil),                       // 140: server.DB_Policy806
	(*DB_Policy806Array)(nil),                  // 141: server.DB_Policy806Array
	(*DB_Policy811)(nil),                       // 142: server.DB_Policy811
	(*DB_Policy811Array)(nil),                  // 143: server.DB_Policy811Array
	(*DB_Policy812)(nil),                       // 144: server.DB_Policy812
	(*DB_Policy812Array)(nil),                  // 145: server.DB_Policy812Array
	(*DB_Policy813)(nil),                       // 146: server.DB_Policy813
	(*DB_Policy813Array)(nil),                  // 147: server.DB_Policy813Array
	(*DB_Policy814)(nil),                       // 148: server.DB_Policy814
	(*DB_Policy814Array)(nil),                  // 149: server.DB_Policy814Array
	(*DB_Policy815)(nil),                       // 150: server.DB_Policy815
	(*DB_Policy815Array)(nil),                  // 151: server.DB_Policy815Array
	(*DB_Policy816)(nil),                       // 152: server.DB_Policy816
	(*DB_Policy816Array)(nil),                  // 153: server.DB_Policy816Array
	(*DB_RobotGame)(nil),                       // 154: server.DB_RobotGame
	(*DB_RobotGameArray)(nil),                  // 155: server.DB_RobotGameArray
	(*DB_Sensitive_Words)(nil),                 // 156: server.DB_Sensitive_Words
	(*DB_Sensitive_WordsArray)(nil),            // 157: server.DB_Sensitive_WordsArray
	(*DB_Shop)(nil),                            // 158: server.DB_Shop
	(*DB_ShopArray)(nil),                       // 159: server.DB_ShopArray
	(*DB_Shop1)(nil),                           // 160: server.DB_Shop1
	(*DB_Shop1Array)(nil),                      // 161: server.DB_Shop1Array
	(*DB_SlotRateWeight)(nil),                  // 162: server.DB_SlotRateWeight
	(*DB_SlotRateWeightArray)(nil),             // 163: server.DB_SlotRateWeightArray
	(*DB_SystemChance)(nil),                    // 164: server.DB_SystemChance
	(*DB_SystemChanceArray)(nil),               // 165: server.DB_SystemChanceArray
	(*DB_Task)(nil),                            // 166: server.DB_Task
	(*DB_TaskArray)(nil),                       // 167: server.DB_TaskArray
	(*DB_TaskCond)(nil),                        // 168: server.DB_TaskCond
	(*DB_TaskCondArray)(nil),                   // 169: server.DB_TaskCondArray
	(*DB_ThirdPlatformGameMapping)(nil),        // 170: server.DB_ThirdPlatformGameMapping
	(*DB_ThirdPlatformGameMappingArray)(nil),   // 171: server.DB_ThirdPlatformGameMappingArray
	(*DB_Tips)(nil),                            // 172: server.DB_Tips
	(*DB_TipsArray)(nil),                       // 173: server.DB_TipsArray
	(*DB_VIP)(nil),                             // 174: server.DB_VIP
	(*DB_VIPArray)(nil),                        // 175: server.DB_VIPArray
}
var file_pbdata_proto_depIdxs = []int32{
	0,   // 0: server.DB_ActSignArray.Arr:type_name -> server.DB_ActSign
	2,   // 1: server.DB_Activity1Array.Arr:type_name -> server.DB_Activity1
	4,   // 2: server.DB_AnimalColorArray.Arr:type_name -> server.DB_AnimalColor
	6,   // 3: server.DB_ClientVerArray.Arr:type_name -> server.DB_ClientVer
	8,   // 4: server.DB_CreateroomArray.Arr:type_name -> server.DB_Createroom
	10,  // 5: server.DB_FishArray.Arr:type_name -> server.DB_Fish
	12,  // 6: server.DB_FishHPArray.Arr:type_name -> server.DB_FishHP
	14,  // 7: server.DB_FishHP2Array.Arr:type_name -> server.DB_FishHP2
	16,  // 8: server.DB_FishPoolArray.Arr:type_name -> server.DB_FishPool
	18,  // 9: server.DB_FishRateArray.Arr:type_name -> server.DB_FishRate
	20,  // 10: server.DB_FishRoomArray.Arr:type_name -> server.DB_FishRoom
	22,  // 11: server.DB_FortuneGod_OddsArray.Arr:type_name -> server.DB_FortuneGod_Odds
	24,  // 12: server.DB_FortuneGod_TurnRateArray.Arr:type_name -> server.DB_FortuneGod_TurnRate
	26,  // 13: server.DB_FortuneGod_WeightArray.Arr:type_name -> server.DB_FortuneGod_Weight
	28,  // 14: server.DB_FortuneGod_WeightConditionArray.Arr:type_name -> server.DB_FortuneGod_WeightCondition
	30,  // 15: server.DB_GamMatchLVArray.Arr:type_name -> server.DB_GamMatchLV
	32,  // 16: server.DB_GameCoinPoolArray.Arr:type_name -> server.DB_GameCoinPool
	34,  // 17: server.DB_GameFreeArray.Arr:type_name -> server.DB_GameFree
	36,  // 18: server.DB_GameItemArray.Arr:type_name -> server.DB_GameItem
	38,  // 19: server.DB_GameRuleArray.Arr:type_name -> server.DB_GameRule
	40,  // 20: server.DB_GameSubsidyArray.Arr:type_name -> server.DB_GameSubsidy
	42,  // 21: server.DB_Game_DropArray.Arr:type_name -> server.DB_Game_Drop
	44,  // 22: server.DB_Game_IntroductionArray.Arr:type_name -> server.DB_Game_Introduction
	46,  // 23: server.DB_Game_PetArray.Arr:type_name -> server.DB_Game_Pet
	48,  // 24: server.DB_Game_RoleArray.Arr:type_name -> server.DB_Game_Role
	50,  // 25: server.DB_Legend_OddsArray.Arr:type_name -> server.DB_Legend_Odds
	52,  // 26: server.DB_Legend_TurnRateArray.Arr:type_name -> server.DB_Legend_TurnRate
	54,  // 27: server.DB_Legend_WeightArray.Arr:type_name -> server.DB_Legend_Weight
	56,  // 28: server.DB_Legend_WeightConditionArray.Arr:type_name -> server.DB_Legend_WeightCondition
	58,  // 29: server.DB_MatchRankArray.Arr:type_name -> server.DB_MatchRank
	60,  // 30: server.DB_NameArray.Arr:type_name -> server.DB_Name
	62,  // 31: server.DB_NameBoyArray.Arr:type_name -> server.DB_NameBoy
	64,  // 32: server.DB_NameGirlArray.Arr:type_name -> server.DB_NameGirl
	66,  // 33: server.DB_PlayerInfoArray.Arr:type_name -> server.DB_PlayerInfo
	68,  // 34: server.DB_PlayerTypeArray.Arr:type_name -> server.DB_PlayerType
	70,  // 35: server.DB_Policy101Array.Arr:type_name -> server.DB_Policy101
	72,  // 36: server.DB_Policy102Array.Arr:type_name -> server.DB_Policy102
	74,  // 37: server.DB_Policy103Array.Arr:type_name -> server.DB_Policy103
	76,  // 38: server.DB_Policy151Array.Arr:type_name -> server.DB_Policy151
	78,  // 39: server.DB_Policy152Array.Arr:type_name -> server.DB_Policy152
	80,  // 40: server.DB_Policy153Array.Arr:type_name -> server.DB_Policy153
	82,  // 41: server.DB_Policy201Array.Arr:type_name -> server.DB_Policy201
	84,  // 42: server.DB_Policy202Array.Arr:type_name -> server.DB_Policy202
	86,  // 43: server.DB_Policy203Array.Arr:type_name -> server.DB_Policy203
	88,  // 44: server.DB_Policy251Array.Arr:type_name -> server.DB_Policy251
	90,  // 45: server.DB_Policy252Array.Arr:type_name -> server.DB_Policy252
	92,  // 46: server.DB_Policy253Array.Arr:type_name -> server.DB_Policy253
	94,  // 47: server.DB_Policy301Array.Arr:type_name -> server.DB_Policy301
	96,  // 48: server.DB_Policy302Array.Arr:type_name -> server.DB_Policy302
	98,  // 49: server.DB_Policy303Array.Arr:type_name -> server.DB_Policy303
	100, // 50: server.DB_Policy351Array.Arr:type_name -> server.DB_Policy351
	102, // 51: server.DB_Policy352Array.Arr:type_name -> server.DB_Policy352
	104, // 52: server.DB_Policy353Array.Arr:type_name -> server.DB_Policy353
	106, // 53: server.DB_Policy401Array.Arr:type_name -> server.DB_Policy401
	108, // 54: server.DB_Policy402Array.Arr:type_name -> server.DB_Policy402
	110, // 55: server.DB_Policy403Array.Arr:type_name -> server.DB_Policy403
	112, // 56: server.DB_Policy420Array.Arr:type_name -> server.DB_Policy420
	114, // 57: server.DB_Policy451Array.Arr:type_name -> server.DB_Policy451
	116, // 58: server.DB_Policy452Array.Arr:type_name -> server.DB_Policy452
	118, // 59: server.DB_Policy453Array.Arr:type_name -> server.DB_Policy453
	120, // 60: server.DB_Policy501Array.Arr:type_name -> server.DB_Policy501
	122, // 61: server.DB_Policy502Array.Arr:type_name -> server.DB_Policy502
	124, // 62: server.DB_Policy601Array.Arr:type_name -> server.DB_Policy601
	126, // 63: server.DB_Policy701Array.Arr:type_name -> server.DB_Policy701
	128, // 64: server.DB_Policy702Array.Arr:type_name -> server.DB_Policy702
	130, // 65: server.DB_Policy801Array.Arr:type_name -> server.DB_Policy801
	132, // 66: server.DB_Policy802Array.Arr:type_name -> server.DB_Policy802
	134, // 67: server.DB_Policy803Array.Arr:type_name -> server.DB_Policy803
	136, // 68: server.DB_Policy804Array.Arr:type_name -> server.DB_Policy804
	138, // 69: server.DB_Policy805Array.Arr:type_name -> server.DB_Policy805
	140, // 70: server.DB_Policy806Array.Arr:type_name -> server.DB_Policy806
	142, // 71: server.DB_Policy811Array.Arr:type_name -> server.DB_Policy811
	144, // 72: server.DB_Policy812Array.Arr:type_name -> server.DB_Policy812
	146, // 73: server.DB_Policy813Array.Arr:type_name -> server.DB_Policy813
	148, // 74: server.DB_Policy814Array.Arr:type_name -> server.DB_Policy814
	150, // 75: server.DB_Policy815Array.Arr:type_name -> server.DB_Policy815
	152, // 76: server.DB_Policy816Array.Arr:type_name -> server.DB_Policy816
	154, // 77: server.DB_RobotGameArray.Arr:type_name -> server.DB_RobotGame
	156, // 78: server.DB_Sensitive_WordsArray.Arr:type_name -> server.DB_Sensitive_Words
	158, // 79: server.DB_ShopArray.Arr:type_name -> server.DB_Shop
	160, // 80: server.DB_Shop1Array.Arr:type_name -> server.DB_Shop1
	162, // 81: server.DB_SlotRateWeightArray.Arr:type_name -> server.DB_SlotRateWeight
	164, // 82: server.DB_SystemChanceArray.Arr:type_name -> server.DB_SystemChance
	166, // 83: server.DB_TaskArray.Arr:type_name -> server.DB_Task
	168, // 84: server.DB_TaskCondArray.Arr:type_name -> server.DB_TaskCond
	170, // 85: server.DB_ThirdPlatformGameMappingArray.Arr:type_name -> server.DB_ThirdPlatformGameMapping
	172, // 86: server.DB_TipsArray.Arr:type_name -> server.DB_Tips
	174, // 87: server.DB_VIPArray.Arr:type_name -> server.DB_VIP
	88,  // [88:88] is the sub-list for method output_type
	88,  // [88:88] is the sub-list for method input_type
	88,  // [88:88] is the sub-list for extension type_name
	88,  // [88:88] is the sub-list for extension extendee
	0,   // [0:88] is the sub-list for field type_name
}

func init() { file_pbdata_proto_init() }
func file_pbdata_proto_init() {
	if File_pbdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ActSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ActSignArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Activity1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Activity1Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_AnimalColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_AnimalColorArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ClientVer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ClientVerArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Createroom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_CreateroomArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Fish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishHP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishHPArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishHP2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishHP2Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishPoolArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishRateArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FishRoomArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_Odds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_OddsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_TurnRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_TurnRateArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_WeightArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_WeightCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_FortuneGod_WeightConditionArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GamMatchLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GamMatchLVArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameCoinPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameCoinPoolArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameFree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameFreeArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameItemArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameRuleArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameSubsidy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_GameSubsidyArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_Drop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_DropArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_Introduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_IntroductionArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_Pet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_PetArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Game_RoleArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_Odds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_OddsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_TurnRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_TurnRateArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_WeightArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_WeightCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Legend_WeightConditionArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_MatchRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_MatchRankArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_NameArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_NameBoy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_NameBoyArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_NameGirl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_NameGirlArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_PlayerInfoArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_PlayerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_PlayerTypeArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy101); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy101Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy102); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy102Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy103); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy103Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy151); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy151Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy152); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy152Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy153); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy153Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy201); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy201Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy202); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy202Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy203); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy203Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy251); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy251Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy252); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy252Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy253); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy253Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy301); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy301Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy302); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy302Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy303); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy303Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy351); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy351Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy352); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy352Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy353); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy353Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy401); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy401Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy402); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy402Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy403); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy403Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy420); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy420Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy451); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy451Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy452); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy452Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy453); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy453Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy501); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy501Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy502); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy502Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy601); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy601Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy701); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy701Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy702); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy702Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy801); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy801Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy802); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy802Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy803); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy803Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy804); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy804Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy805); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy805Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy806); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy806Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy811); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy811Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy812); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy812Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy813); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy813Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy814); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy814Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy815); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy815Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy816); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Policy816Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_RobotGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_RobotGameArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Sensitive_Words); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Sensitive_WordsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Shop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ShopArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Shop1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Shop1Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_SlotRateWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_SlotRateWeightArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_SystemChance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_SystemChanceArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_TaskArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_TaskCond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_TaskCondArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ThirdPlatformGameMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_ThirdPlatformGameMappingArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_Tips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_TipsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_VIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdata_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DB_VIPArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   176,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbdata_proto_goTypes,
		DependencyIndexes: file_pbdata_proto_depIdxs,
		MessageInfos:      file_pbdata_proto_msgTypes,
	}.Build()
	File_pbdata_proto = out.File
	file_pbdata_proto_rawDesc = nil
	file_pbdata_proto_goTypes = nil
	file_pbdata_proto_depIdxs = nil
}
