// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: dragonvstiger.proto

package dragonvstiger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess                OpResultCode = 0 //成功
	OpResultCode_OPRC_Error                 OpResultCode = 1 //失败
	OpResultCode_OPRC_BankerLimit           OpResultCode = 2
	OpResultCode_OPRC_BankerWaiting         OpResultCode = 3
	OpResultCode_OPRC_NotBankerWaiting      OpResultCode = 4
	OpResultCode_OPRC_BankerCannotBet       OpResultCode = 5
	OpResultCode_OPRC_CoinMustReachTheValue OpResultCode = 6
	OpResultCode_OPRC_EachBetsLimit         OpResultCode = 7
	OpResultCode_OPRC_CoinIsNotEnough       OpResultCode = 8
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
		2: "OPRC_BankerLimit",
		3: "OPRC_BankerWaiting",
		4: "OPRC_NotBankerWaiting",
		5: "OPRC_BankerCannotBet",
		6: "OPRC_CoinMustReachTheValue",
		7: "OPRC_EachBetsLimit",
		8: "OPRC_CoinIsNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":                0,
		"OPRC_Error":                 1,
		"OPRC_BankerLimit":           2,
		"OPRC_BankerWaiting":         3,
		"OPRC_NotBankerWaiting":      4,
		"OPRC_BankerCannotBet":       5,
		"OPRC_CoinMustReachTheValue": 6,
		"OPRC_EachBetsLimit":         7,
		"OPRC_CoinIsNotEnough":       8,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dragonvstiger_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_dragonvstiger_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{0}
}

//龙虎斗
type DragonVsTigerPacketID int32

const (
	DragonVsTigerPacketID_PACKET_DVST_ZERO          DragonVsTigerPacketID = 0    // 弃用消息号
	DragonVsTigerPacketID_PACKET_SC_DVST_ROOMINFO   DragonVsTigerPacketID = 5450 //房间信息
	DragonVsTigerPacketID_PACKET_CS_DVST_PLAYEROP   DragonVsTigerPacketID = 5451 //玩家操作（客户-》服务）
	DragonVsTigerPacketID_PACKET_SC_DVST_PLAYEROP   DragonVsTigerPacketID = 5452 //玩家操作（服务-》客户）
	DragonVsTigerPacketID_PACKET_SC_DVST_ROOMSTATE  DragonVsTigerPacketID = 5453 //房间状态
	DragonVsTigerPacketID_PACKET_SC_DVST_GAMEBILLED DragonVsTigerPacketID = 5454 //游戏结算
	DragonVsTigerPacketID_PACKET_SC_DVST_SEATS      DragonVsTigerPacketID = 5455 //座位信息
	DragonVsTigerPacketID_PACKET_SC_DVST_PLAYERLIST DragonVsTigerPacketID = 5456 //玩家列表
	DragonVsTigerPacketID_PACKET_SC_DVST_SENDBET    DragonVsTigerPacketID = 5457 //批量押注筹码信息
	DragonVsTigerPacketID_PACKET_SC_DVST_UPLIST     DragonVsTigerPacketID = 5458 //上庄列表
)

// Enum value maps for DragonVsTigerPacketID.
var (
	DragonVsTigerPacketID_name = map[int32]string{
		0:    "PACKET_DVST_ZERO",
		5450: "PACKET_SC_DVST_ROOMINFO",
		5451: "PACKET_CS_DVST_PLAYEROP",
		5452: "PACKET_SC_DVST_PLAYEROP",
		5453: "PACKET_SC_DVST_ROOMSTATE",
		5454: "PACKET_SC_DVST_GAMEBILLED",
		5455: "PACKET_SC_DVST_SEATS",
		5456: "PACKET_SC_DVST_PLAYERLIST",
		5457: "PACKET_SC_DVST_SENDBET",
		5458: "PACKET_SC_DVST_UPLIST",
	}
	DragonVsTigerPacketID_value = map[string]int32{
		"PACKET_DVST_ZERO":          0,
		"PACKET_SC_DVST_ROOMINFO":   5450,
		"PACKET_CS_DVST_PLAYEROP":   5451,
		"PACKET_SC_DVST_PLAYEROP":   5452,
		"PACKET_SC_DVST_ROOMSTATE":  5453,
		"PACKET_SC_DVST_GAMEBILLED": 5454,
		"PACKET_SC_DVST_SEATS":      5455,
		"PACKET_SC_DVST_PLAYERLIST": 5456,
		"PACKET_SC_DVST_SENDBET":    5457,
		"PACKET_SC_DVST_UPLIST":     5458,
	}
)

func (x DragonVsTigerPacketID) Enum() *DragonVsTigerPacketID {
	p := new(DragonVsTigerPacketID)
	*p = x
	return p
}

func (x DragonVsTigerPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DragonVsTigerPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_dragonvstiger_proto_enumTypes[1].Descriptor()
}

func (DragonVsTigerPacketID) Type() protoreflect.EnumType {
	return &file_dragonvstiger_proto_enumTypes[1]
}

func (x DragonVsTigerPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DragonVsTigerPacketID.Descriptor instead.
func (DragonVsTigerPacketID) EnumDescriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{1}
}

type DragonVsTigerPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	Lately20Win int64    `protobuf:"varint,10,opt,name=Lately20Win,proto3" json:"Lately20Win,omitempty"` //最近20局输赢 (赢的次数)
	Lately20Bet int64    `protobuf:"varint,11,opt,name=Lately20Bet,proto3" json:"Lately20Bet,omitempty"` //最近20局总下注 (可能是负值)
	HeadOutLine int32    `protobuf:"varint,12,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,13,opt,name=VIP,proto3" json:"VIP,omitempty"`
	NiceId      int32    `protobuf:"varint,14,opt,name=NiceId,proto3" json:"NiceId,omitempty"`
}

func (x *DragonVsTigerPlayerData) Reset() {
	*x = DragonVsTigerPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerPlayerData) ProtoMessage() {}

func (x *DragonVsTigerPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerPlayerData.ProtoReflect.Descriptor instead.
func (*DragonVsTigerPlayerData) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{0}
}

func (x *DragonVsTigerPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DragonVsTigerPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DragonVsTigerPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DragonVsTigerPlayerData) GetLately20Win() int64 {
	if x != nil {
		return x.Lately20Win
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetLately20Bet() int64 {
	if x != nil {
		return x.Lately20Bet
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *DragonVsTigerPlayerData) GetNiceId() int32 {
	if x != nil {
		return x.NiceId
	}
	return 0
}

//筹码数据
type DragonVsTigerChips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chip  int32 `protobuf:"varint,1,opt,name=Chip,proto3" json:"Chip,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *DragonVsTigerChips) Reset() {
	*x = DragonVsTigerChips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerChips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerChips) ProtoMessage() {}

func (x *DragonVsTigerChips) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerChips.ProtoReflect.Descriptor instead.
func (*DragonVsTigerChips) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{1}
}

func (x *DragonVsTigerChips) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *DragonVsTigerChips) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type DragonVsTigerZoneChips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone   int32                 `protobuf:"varint,1,opt,name=Zone,proto3" json:"Zone,omitempty"`    //和，龙，虎
	Detail []*DragonVsTigerChips `protobuf:"bytes,2,rep,name=Detail,proto3" json:"Detail,omitempty"` //筹码类型
}

func (x *DragonVsTigerZoneChips) Reset() {
	*x = DragonVsTigerZoneChips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerZoneChips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerZoneChips) ProtoMessage() {}

func (x *DragonVsTigerZoneChips) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerZoneChips.ProtoReflect.Descriptor instead.
func (*DragonVsTigerZoneChips) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{2}
}

func (x *DragonVsTigerZoneChips) GetZone() int32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *DragonVsTigerZoneChips) GetDetail() []*DragonVsTigerChips {
	if x != nil {
		return x.Detail
	}
	return nil
}

//房间信息
type SCDragonVsTigerRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId         int32                      `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                         //房间id
	Creator        int32                      `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                       //创建者SnId
	GameId         int32                      `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                         //游戏id
	RoomMode       int32                      `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                     //游戏模式
	Params         []int32                    `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`                  //规则参数
	NumOfGames     int32                      `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`                 //当前第几局
	Cards          []int32                    `protobuf:"varint,7,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`                    //牌数据 (没开牌之前是两个-1)
	State          int32                      `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                           //房间当前状态
	TimeOut        int32                      `protobuf:"varint,9,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                       //等待剩余时间 单位:毫秒
	BankerId       int32                      `protobuf:"varint,10,opt,name=BankerId,proto3" json:"BankerId,omitempty"`                    //庄家Id
	DisbandGen     int32                      `protobuf:"varint,11,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`                //解散申请
	AgentId        int32                      `protobuf:"varint,12,opt,name=AgentId,proto3" json:"AgentId,omitempty"`                      //代开房者
	ParamsEx       []int32                    `protobuf:"varint,13,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`             //其他参数
	SceneType      int32                      `protobuf:"varint,14,opt,name=SceneType,proto3" json:"SceneType,omitempty"`                  //房间模式 0:房卡模式 1:钻石模式
	Players        []*DragonVsTigerPlayerData `protobuf:"bytes,15,rep,name=Players,proto3" json:"Players,omitempty"`                       //房间内的玩家信息
	TotalChips     []int64                    `protobuf:"varint,16,rep,packed,name=TotalChips,proto3" json:"TotalChips,omitempty"`         //3个区域内的筹码总额 和，龙，虎
	MyChips        []*DragonVsTigerZoneChips  `protobuf:"bytes,17,rep,name=MyChips,proto3" json:"MyChips,omitempty"`                       //区域内我的筹码数据
	Trend100Cur    []int32                    `protobuf:"varint,18,rep,packed,name=Trend100Cur,proto3" json:"Trend100Cur,omitempty"`       //当前100局走势数据
	Trend20Lately  []int32                    `protobuf:"varint,19,rep,packed,name=Trend20Lately,proto3" json:"Trend20Lately,omitempty"`   //最近20龙虎走势数据
	OLNum          int32                      `protobuf:"varint,20,opt,name=OLNum,proto3" json:"OLNum,omitempty"`                          //在线玩家数量
	OtherIntParams []int32                    `protobuf:"varint,21,rep,packed,name=OtherIntParams,proto3" json:"OtherIntParams,omitempty"` //规则参数
	LoopNum        int32                      `protobuf:"varint,22,opt,name=LoopNum,proto3" json:"LoopNum,omitempty"`                      // 后台控制结算结果时使用
}

func (x *SCDragonVsTigerRoomInfo) Reset() {
	*x = SCDragonVsTigerRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerRoomInfo) ProtoMessage() {}

func (x *SCDragonVsTigerRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerRoomInfo.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerRoomInfo) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{3}
}

func (x *SCDragonVsTigerRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetBankerId() int32 {
	if x != nil {
		return x.BankerId
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetPlayers() []*DragonVsTigerPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetTotalChips() []int64 {
	if x != nil {
		return x.TotalChips
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetMyChips() []*DragonVsTigerZoneChips {
	if x != nil {
		return x.MyChips
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetTrend100Cur() []int32 {
	if x != nil {
		return x.Trend100Cur
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetTrend20Lately() []int32 {
	if x != nil {
		return x.Trend20Lately
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetOLNum() int32 {
	if x != nil {
		return x.OLNum
	}
	return 0
}

func (x *SCDragonVsTigerRoomInfo) GetOtherIntParams() []int32 {
	if x != nil {
		return x.OtherIntParams
	}
	return nil
}

func (x *SCDragonVsTigerRoomInfo) GetLoopNum() int32 {
	if x != nil {
		return x.LoopNum
	}
	return 0
}

//座位位置
type SCDragonVsTigerSeats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*DragonVsTigerPlayerData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`            //玩家信息
	PlayerNum int32                      `protobuf:"varint,2,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //玩家数量
	BankerId  int32                      `protobuf:"varint,3,opt,name=BankerId,proto3" json:"BankerId,omitempty"`   //庄的id, 0：系统庄
}

func (x *SCDragonVsTigerSeats) Reset() {
	*x = SCDragonVsTigerSeats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerSeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerSeats) ProtoMessage() {}

func (x *SCDragonVsTigerSeats) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerSeats.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerSeats) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{4}
}

func (x *SCDragonVsTigerSeats) GetData() []*DragonVsTigerPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SCDragonVsTigerSeats) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *SCDragonVsTigerSeats) GetBankerId() int32 {
	if x != nil {
		return x.BankerId
	}
	return 0
}

//玩家操作
type CSDragonVsTiggerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0:押注 1:获取在线玩家 2：上庄 3：下庄 4：上庄列表 5：在庄的下庄
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSDragonVsTiggerOp) Reset() {
	*x = CSDragonVsTiggerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSDragonVsTiggerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSDragonVsTiggerOp) ProtoMessage() {}

func (x *CSDragonVsTiggerOp) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSDragonVsTiggerOp.ProtoReflect.Descriptor instead.
func (*CSDragonVsTiggerOp) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{5}
}

func (x *CSDragonVsTiggerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSDragonVsTiggerOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCDragonVsTiggerOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                           //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                       //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                                //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=dragonvstiger.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCDragonVsTiggerOp) Reset() {
	*x = SCDragonVsTiggerOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTiggerOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTiggerOp) ProtoMessage() {}

func (x *SCDragonVsTiggerOp) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTiggerOp.ProtoReflect.Descriptor instead.
func (*SCDragonVsTiggerOp) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{6}
}

func (x *SCDragonVsTiggerOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCDragonVsTiggerOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCDragonVsTiggerOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCDragonVsTiggerOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//房间状态
type SCDragonVsTigerRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCDragonVsTigerRoomState) Reset() {
	*x = SCDragonVsTigerRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerRoomState) ProtoMessage() {}

func (x *SCDragonVsTigerRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerRoomState.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerRoomState) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{7}
}

func (x *SCDragonVsTigerRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCDragonVsTigerRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCDragonVsTigerRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家列表
type SCDragonVsTigerPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*DragonVsTigerPlayerData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	OLNum int32                      `protobuf:"varint,2,opt,name=OLNum,proto3" json:"OLNum,omitempty"` //在线人数
}

func (x *SCDragonVsTigerPlayerList) Reset() {
	*x = SCDragonVsTigerPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerPlayerList) ProtoMessage() {}

func (x *SCDragonVsTigerPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerPlayerList.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerPlayerList) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{8}
}

func (x *SCDragonVsTigerPlayerList) GetData() []*DragonVsTigerPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SCDragonVsTigerPlayerList) GetOLNum() int32 {
	if x != nil {
		return x.OLNum
	}
	return 0
}

//
type DragonVsTigerBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId     int32 `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`         //玩家ID
	Coin     int64 `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`         //总金币
	GainCoin int64 `protobuf:"varint,3,opt,name=GainCoin,proto3" json:"GainCoin,omitempty"` //输赢的金币
}

func (x *DragonVsTigerBill) Reset() {
	*x = DragonVsTigerBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerBill) ProtoMessage() {}

func (x *DragonVsTigerBill) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerBill.ProtoReflect.Descriptor instead.
func (*DragonVsTigerBill) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{9}
}

func (x *DragonVsTigerBill) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DragonVsTigerBill) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DragonVsTigerBill) GetGainCoin() int64 {
	if x != nil {
		return x.GainCoin
	}
	return 0
}

//大赢家
type DragonVsTigerBigWinner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId        int32  `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	Head        int32  `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	HeadOutLine int32  `protobuf:"varint,4,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32  `protobuf:"varint,5,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Sex         int32  `protobuf:"varint,6,opt,name=Sex,proto3" json:"Sex,omitempty"`           //性别
	Coin        int64  `protobuf:"varint,7,opt,name=Coin,proto3" json:"Coin,omitempty"`         //金币
	GainCoin    int32  `protobuf:"varint,8,opt,name=GainCoin,proto3" json:"GainCoin,omitempty"` //本局赢的钱
	City        string `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`          //城市
}

func (x *DragonVsTigerBigWinner) Reset() {
	*x = DragonVsTigerBigWinner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerBigWinner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerBigWinner) ProtoMessage() {}

func (x *DragonVsTigerBigWinner) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerBigWinner.ProtoReflect.Descriptor instead.
func (*DragonVsTigerBigWinner) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{10}
}

func (x *DragonVsTigerBigWinner) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DragonVsTigerBigWinner) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetGainCoin() int32 {
	if x != nil {
		return x.GainCoin
	}
	return 0
}

func (x *DragonVsTigerBigWinner) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

//结算
type SCDragonVsTigerBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillData  []*DragonVsTigerBill    `protobuf:"bytes,1,rep,name=BillData,proto3" json:"BillData,omitempty"`   //8个位置的结算数据
	BigWinner *DragonVsTigerBigWinner `protobuf:"bytes,2,opt,name=BigWinner,proto3" json:"BigWinner,omitempty"` //大赢家数据
	LoopNum   int32                   `protobuf:"varint,3,opt,name=LoopNum,proto3" json:"LoopNum,omitempty"`    // 后台控制结算结果时使用
}

func (x *SCDragonVsTigerBilled) Reset() {
	*x = SCDragonVsTigerBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerBilled) ProtoMessage() {}

func (x *SCDragonVsTigerBilled) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerBilled.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerBilled) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{11}
}

func (x *SCDragonVsTigerBilled) GetBillData() []*DragonVsTigerBill {
	if x != nil {
		return x.BillData
	}
	return nil
}

func (x *SCDragonVsTigerBilled) GetBigWinner() *DragonVsTigerBigWinner {
	if x != nil {
		return x.BigWinner
	}
	return nil
}

func (x *SCDragonVsTigerBilled) GetLoopNum() int32 {
	if x != nil {
		return x.LoopNum
	}
	return 0
}

type DragonVsTigerBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId       int32   `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                    //座位上的人ID
	TotalChips []int64 `protobuf:"varint,2,rep,packed,name=TotalChips,proto3" json:"TotalChips,omitempty"` //3个区域内的筹码总额 和，龙，虎
}

func (x *DragonVsTigerBetInfo) Reset() {
	*x = DragonVsTigerBetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DragonVsTigerBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DragonVsTigerBetInfo) ProtoMessage() {}

func (x *DragonVsTigerBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DragonVsTigerBetInfo.ProtoReflect.Descriptor instead.
func (*DragonVsTigerBetInfo) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{12}
}

func (x *DragonVsTigerBetInfo) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *DragonVsTigerBetInfo) GetTotalChips() []int64 {
	if x != nil {
		return x.TotalChips
	}
	return nil
}

type SCDragonVsTigerSendBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*DragonVsTigerBetInfo `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`                     //所有座位筹码信息
	TotalChips []int64                 `protobuf:"varint,2,rep,packed,name=TotalChips,proto3" json:"TotalChips,omitempty"` //3个区域内的筹码总额 和，龙，虎
}

func (x *SCDragonVsTigerSendBet) Reset() {
	*x = SCDragonVsTigerSendBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTigerSendBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTigerSendBet) ProtoMessage() {}

func (x *SCDragonVsTigerSendBet) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTigerSendBet.ProtoReflect.Descriptor instead.
func (*SCDragonVsTigerSendBet) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{13}
}

func (x *SCDragonVsTigerSendBet) GetData() []*DragonVsTigerBetInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SCDragonVsTigerSendBet) GetTotalChips() []int64 {
	if x != nil {
		return x.TotalChips
	}
	return nil
}

//上庄列表
type SCDragonVsTiggerUpList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32                      `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`     //数量
	IsExist int32                      `protobuf:"varint,2,opt,name=IsExist,proto3" json:"IsExist,omitempty"` //玩家是否已经在上庄列表  0：不在上庄列表   1：在上庄列表
	Data    []*DragonVsTigerPlayerData `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`        //上庄列表
}

func (x *SCDragonVsTiggerUpList) Reset() {
	*x = SCDragonVsTiggerUpList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dragonvstiger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCDragonVsTiggerUpList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDragonVsTiggerUpList) ProtoMessage() {}

func (x *SCDragonVsTiggerUpList) ProtoReflect() protoreflect.Message {
	mi := &file_dragonvstiger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDragonVsTiggerUpList.ProtoReflect.Descriptor instead.
func (*SCDragonVsTiggerUpList) Descriptor() ([]byte, []int) {
	return file_dragonvstiger_proto_rawDescGZIP(), []int{14}
}

func (x *SCDragonVsTiggerUpList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SCDragonVsTiggerUpList) GetIsExist() int32 {
	if x != nil {
		return x.IsExist
	}
	return 0
}

func (x *SCDragonVsTiggerUpList) GetData() []*DragonVsTigerPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_dragonvstiger_proto protoreflect.FileDescriptor

var file_dragonvstiger_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74,
	0x69, 0x67, 0x65, 0x72, 0x22, 0xdd, 0x02, 0x0a, 0x17, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56,
	0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30,
	0x57, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x32, 0x30, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x32, 0x30, 0x42, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x74,
	0x65, 0x6c, 0x79, 0x32, 0x30, 0x42, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49,
	0x50, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x12, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x68,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x68, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x16, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x05,
	0x0a, 0x17, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d,
	0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44,
	0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x3f, 0x0a, 0x07, 0x4d, 0x79, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x52, 0x07, 0x4d, 0x79, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x31, 0x30, 0x30, 0x43, 0x75, 0x72, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x31, 0x30, 0x30, 0x43,
	0x75, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x32, 0x30, 0x4c, 0x61, 0x74,
	0x65, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x32, 0x30, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x4c, 0x4e, 0x75,
	0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x4c, 0x4e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x6f, 0x70, 0x4e, 0x75,
	0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x6f, 0x6f, 0x70, 0x4e, 0x75, 0x6d,
	0x22, 0x8c, 0x01, 0x0a, 0x14, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54,
	0x69, 0x67, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x12, 0x43, 0x53, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69,
	0x67, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x53,
	0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x6d, 0x0a, 0x19, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54,
	0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x4c,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x4c, 0x4e, 0x75, 0x6d,
	0x22, 0x57, 0x0a, 0x11, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65,
	0x72, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x44, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x42, 0x69, 0x67, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x56, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x53,
	0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76,
	0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54,
	0x69, 0x67, 0x65, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x08, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x09, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69,
	0x67, 0x65, 0x72, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x42, 0x69,
	0x67, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f, 0x6f, 0x70, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4c, 0x6f, 0x6f, 0x70, 0x4e, 0x75,
	0x6d, 0x22, 0x4a, 0x0a, 0x14, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x71, 0x0a,
	0x16, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73,
	0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69,
	0x67, 0x65, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x22, 0x84, 0x01, 0x0a, 0x16, 0x53, 0x43, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xe4, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x4e, 0x6f, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x74, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x54, 0x68, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x61, 0x63, 0x68, 0x42, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69,
	0x6e, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x08, 0x2a, 0xba,
	0x02, 0x0a, 0x15, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x56, 0x73, 0x54, 0x69, 0x67, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53, 0x54,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xca, 0x2a, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xcb, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xcc, 0x2a, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0xcd, 0x2a, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0xce, 0x2a, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x53, 0x10,
	0xcf, 0x2a, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x44, 0x56, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0xd0, 0x2a, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f,
	0x44, 0x56, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x42, 0x45, 0x54, 0x10, 0xd1, 0x2a, 0x12,
	0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x44, 0x56, 0x53,
	0x54, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xd2, 0x2a, 0x42, 0x11, 0x5a, 0x0f, 0x2e,
	0x3b, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x76, 0x73, 0x74, 0x69, 0x67, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dragonvstiger_proto_rawDescOnce sync.Once
	file_dragonvstiger_proto_rawDescData = file_dragonvstiger_proto_rawDesc
)

func file_dragonvstiger_proto_rawDescGZIP() []byte {
	file_dragonvstiger_proto_rawDescOnce.Do(func() {
		file_dragonvstiger_proto_rawDescData = protoimpl.X.CompressGZIP(file_dragonvstiger_proto_rawDescData)
	})
	return file_dragonvstiger_proto_rawDescData
}

var file_dragonvstiger_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dragonvstiger_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_dragonvstiger_proto_goTypes = []interface{}{
	(OpResultCode)(0),                 // 0: dragonvstiger.OpResultCode
	(DragonVsTigerPacketID)(0),        // 1: dragonvstiger.DragonVsTigerPacketID
	(*DragonVsTigerPlayerData)(nil),   // 2: dragonvstiger.DragonVsTigerPlayerData
	(*DragonVsTigerChips)(nil),        // 3: dragonvstiger.DragonVsTigerChips
	(*DragonVsTigerZoneChips)(nil),    // 4: dragonvstiger.DragonVsTigerZoneChips
	(*SCDragonVsTigerRoomInfo)(nil),   // 5: dragonvstiger.SCDragonVsTigerRoomInfo
	(*SCDragonVsTigerSeats)(nil),      // 6: dragonvstiger.SCDragonVsTigerSeats
	(*CSDragonVsTiggerOp)(nil),        // 7: dragonvstiger.CSDragonVsTiggerOp
	(*SCDragonVsTiggerOp)(nil),        // 8: dragonvstiger.SCDragonVsTiggerOp
	(*SCDragonVsTigerRoomState)(nil),  // 9: dragonvstiger.SCDragonVsTigerRoomState
	(*SCDragonVsTigerPlayerList)(nil), // 10: dragonvstiger.SCDragonVsTigerPlayerList
	(*DragonVsTigerBill)(nil),         // 11: dragonvstiger.DragonVsTigerBill
	(*DragonVsTigerBigWinner)(nil),    // 12: dragonvstiger.DragonVsTigerBigWinner
	(*SCDragonVsTigerBilled)(nil),     // 13: dragonvstiger.SCDragonVsTigerBilled
	(*DragonVsTigerBetInfo)(nil),      // 14: dragonvstiger.DragonVsTigerBetInfo
	(*SCDragonVsTigerSendBet)(nil),    // 15: dragonvstiger.SCDragonVsTigerSendBet
	(*SCDragonVsTiggerUpList)(nil),    // 16: dragonvstiger.SCDragonVsTiggerUpList
}
var file_dragonvstiger_proto_depIdxs = []int32{
	3,  // 0: dragonvstiger.DragonVsTigerZoneChips.Detail:type_name -> dragonvstiger.DragonVsTigerChips
	2,  // 1: dragonvstiger.SCDragonVsTigerRoomInfo.Players:type_name -> dragonvstiger.DragonVsTigerPlayerData
	4,  // 2: dragonvstiger.SCDragonVsTigerRoomInfo.MyChips:type_name -> dragonvstiger.DragonVsTigerZoneChips
	2,  // 3: dragonvstiger.SCDragonVsTigerSeats.Data:type_name -> dragonvstiger.DragonVsTigerPlayerData
	0,  // 4: dragonvstiger.SCDragonVsTiggerOp.OpRetCode:type_name -> dragonvstiger.OpResultCode
	2,  // 5: dragonvstiger.SCDragonVsTigerPlayerList.Data:type_name -> dragonvstiger.DragonVsTigerPlayerData
	11, // 6: dragonvstiger.SCDragonVsTigerBilled.BillData:type_name -> dragonvstiger.DragonVsTigerBill
	12, // 7: dragonvstiger.SCDragonVsTigerBilled.BigWinner:type_name -> dragonvstiger.DragonVsTigerBigWinner
	14, // 8: dragonvstiger.SCDragonVsTigerSendBet.Data:type_name -> dragonvstiger.DragonVsTigerBetInfo
	2,  // 9: dragonvstiger.SCDragonVsTiggerUpList.Data:type_name -> dragonvstiger.DragonVsTigerPlayerData
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dragonvstiger_proto_init() }
func file_dragonvstiger_proto_init() {
	if File_dragonvstiger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dragonvstiger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerChips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerZoneChips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerSeats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSDragonVsTiggerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTiggerOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerBigWinner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DragonVsTigerBetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTigerSendBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dragonvstiger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCDragonVsTiggerUpList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dragonvstiger_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dragonvstiger_proto_goTypes,
		DependencyIndexes: file_dragonvstiger_proto_depIdxs,
		EnumInfos:         file_dragonvstiger_proto_enumTypes,
		MessageInfos:      file_dragonvstiger_proto_msgTypes,
	}.Build()
	File_dragonvstiger_proto = out.File
	file_dragonvstiger_proto_rawDesc = nil
	file_dragonvstiger_proto_goTypes = nil
	file_dragonvstiger_proto_depIdxs = nil
}
