// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: coinscene.proto

package gamehall

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess                      OpResultCode = 0    //成功
	OpResultCode_OPRC_Error                       OpResultCode = 1    //失败
	OpResultCode_OPRC_RoomIsFull                  OpResultCode = 1019 //房间已满
	OpResultCode_OPRC_RoomHadClosed               OpResultCode = 1053 //牌局已结束，正在结算
	OpResultCode_OPRC_SceneServerMaintain         OpResultCode = 1054 //服务器维护中,请稍后创建
	OpResultCode_OPRC_CoinNotEnough               OpResultCode = 1056 //金币不够
	OpResultCode_OPRC_CoinTooMore                 OpResultCode = 1058 //金币太多了,请换高倍场
	OpResultCode_OPRC_CoinSceneYouAreGaming       OpResultCode = 1059 //游戏还未结束,不能换桌
	OpResultCode_OPRC_NoFindDownTiceRoom          OpResultCode = 1079 //没有找到可以下米的房间
	OpResultCode_OPRC_ChangeRoomTooOften          OpResultCode = 1080 //老板你换桌太频繁了,请稍等下
	OpResultCode_OPRC_NoOtherDownTiceRoom         OpResultCode = 1081 //对不起，没有其他下米房间可换
	OpResultCode_OPRC_OpYield                     OpResultCode = 1082 //操作被挂起
	OpResultCode_OPRC_RoomGameTimes               OpResultCode = 1103 //超过最大游戏次数
	OpResultCode_OPRC_CoinSceneEnterQueueSucc     OpResultCode = 1105
	OpResultCode_OPRC_CoinSceneEnterQueueFail     OpResultCode = 1106
	OpResultCode_OPRC_CoinSceneEnterQueueOverTime OpResultCode = 1107
	OpResultCode_OPRC_MustBindPromoter            OpResultCode = 1113 //必须绑定推广员
	OpResultCode_OPRC_YourAreGamingCannotLeave    OpResultCode = 1078 //
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		1019: "OPRC_RoomIsFull",
		1053: "OPRC_RoomHadClosed",
		1054: "OPRC_SceneServerMaintain",
		1056: "OPRC_CoinNotEnough",
		1058: "OPRC_CoinTooMore",
		1059: "OPRC_CoinSceneYouAreGaming",
		1079: "OPRC_NoFindDownTiceRoom",
		1080: "OPRC_ChangeRoomTooOften",
		1081: "OPRC_NoOtherDownTiceRoom",
		1082: "OPRC_OpYield",
		1103: "OPRC_RoomGameTimes",
		1105: "OPRC_CoinSceneEnterQueueSucc",
		1106: "OPRC_CoinSceneEnterQueueFail",
		1107: "OPRC_CoinSceneEnterQueueOverTime",
		1113: "OPRC_MustBindPromoter",
		1078: "OPRC_YourAreGamingCannotLeave",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":                      0,
		"OPRC_Error":                       1,
		"OPRC_RoomIsFull":                  1019,
		"OPRC_RoomHadClosed":               1053,
		"OPRC_SceneServerMaintain":         1054,
		"OPRC_CoinNotEnough":               1056,
		"OPRC_CoinTooMore":                 1058,
		"OPRC_CoinSceneYouAreGaming":       1059,
		"OPRC_NoFindDownTiceRoom":          1079,
		"OPRC_ChangeRoomTooOften":          1080,
		"OPRC_NoOtherDownTiceRoom":         1081,
		"OPRC_OpYield":                     1082,
		"OPRC_RoomGameTimes":               1103,
		"OPRC_CoinSceneEnterQueueSucc":     1105,
		"OPRC_CoinSceneEnterQueueFail":     1106,
		"OPRC_CoinSceneEnterQueueOverTime": 1107,
		"OPRC_MustBindPromoter":            1113,
		"OPRC_YourAreGamingCannotLeave":    1078,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_coinscene_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_coinscene_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{0}
}

//自由场协议编号 2320-2339
type CoinSceneGamePacketID int32

const (
	CoinSceneGamePacketID_PACKET_CoinSceneGame_ZERO        CoinSceneGamePacketID = 0 // 弃用消息号
	CoinSceneGamePacketID_PACKET_CS_COINSCENE_GETPLAYERNUM CoinSceneGamePacketID = 2320
	CoinSceneGamePacketID_PACKET_SC_COINSCENE_GETPLAYERNUM CoinSceneGamePacketID = 2321
	CoinSceneGamePacketID_PACKET_CS_COINSCENE_OP           CoinSceneGamePacketID = 2322
	CoinSceneGamePacketID_PACKET_SC_COINSCENE_OP           CoinSceneGamePacketID = 2323
	CoinSceneGamePacketID_PACKET_CS_COINSCENE_LISTROOM     CoinSceneGamePacketID = 2324
	CoinSceneGamePacketID_PACKET_SC_COINSCENE_LISTROOM     CoinSceneGamePacketID = 2325
	CoinSceneGamePacketID_PACKET_SC_COINSCENE_QUEUESTATE   CoinSceneGamePacketID = 2326
)

// Enum value maps for CoinSceneGamePacketID.
var (
	CoinSceneGamePacketID_name = map[int32]string{
		0:    "PACKET_CoinSceneGame_ZERO",
		2320: "PACKET_CS_COINSCENE_GETPLAYERNUM",
		2321: "PACKET_SC_COINSCENE_GETPLAYERNUM",
		2322: "PACKET_CS_COINSCENE_OP",
		2323: "PACKET_SC_COINSCENE_OP",
		2324: "PACKET_CS_COINSCENE_LISTROOM",
		2325: "PACKET_SC_COINSCENE_LISTROOM",
		2326: "PACKET_SC_COINSCENE_QUEUESTATE",
	}
	CoinSceneGamePacketID_value = map[string]int32{
		"PACKET_CoinSceneGame_ZERO":        0,
		"PACKET_CS_COINSCENE_GETPLAYERNUM": 2320,
		"PACKET_SC_COINSCENE_GETPLAYERNUM": 2321,
		"PACKET_CS_COINSCENE_OP":           2322,
		"PACKET_SC_COINSCENE_OP":           2323,
		"PACKET_CS_COINSCENE_LISTROOM":     2324,
		"PACKET_SC_COINSCENE_LISTROOM":     2325,
		"PACKET_SC_COINSCENE_QUEUESTATE":   2326,
	}
)

func (x CoinSceneGamePacketID) Enum() *CoinSceneGamePacketID {
	p := new(CoinSceneGamePacketID)
	*p = x
	return p
}

func (x CoinSceneGamePacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinSceneGamePacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_coinscene_proto_enumTypes[1].Descriptor()
}

func (CoinSceneGamePacketID) Type() protoreflect.EnumType {
	return &file_coinscene_proto_enumTypes[1]
}

func (x CoinSceneGamePacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinSceneGamePacketID.Descriptor instead.
func (CoinSceneGamePacketID) EnumDescriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{1}
}

//PACKET_CS_COINSCENE_GETPLAYERNUM
//获取场次人数
type CSCoinSceneGetPlayerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId    int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`       //游戏ID
	GameModel int32 `protobuf:"varint,2,opt,name=GameModel,proto3" json:"GameModel,omitempty"` //游戏model
}

func (x *CSCoinSceneGetPlayerNum) Reset() {
	*x = CSCoinSceneGetPlayerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCoinSceneGetPlayerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCoinSceneGetPlayerNum) ProtoMessage() {}

func (x *CSCoinSceneGetPlayerNum) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCoinSceneGetPlayerNum.ProtoReflect.Descriptor instead.
func (*CSCoinSceneGetPlayerNum) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{0}
}

func (x *CSCoinSceneGetPlayerNum) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *CSCoinSceneGetPlayerNum) GetGameModel() int32 {
	if x != nil {
		return x.GameModel
	}
	return 0
}

//PACKET_SC_COINSCENE_GETPLAYERNUM
type SCCoinSceneGetPlayerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums []int32 `protobuf:"varint,1,rep,packed,name=Nums,proto3" json:"Nums,omitempty"` //场次人数
}

func (x *SCCoinSceneGetPlayerNum) Reset() {
	*x = SCCoinSceneGetPlayerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinSceneGetPlayerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinSceneGetPlayerNum) ProtoMessage() {}

func (x *SCCoinSceneGetPlayerNum) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinSceneGetPlayerNum.ProtoReflect.Descriptor instead.
func (*SCCoinSceneGetPlayerNum) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{1}
}

func (x *SCCoinSceneGetPlayerNum) GetNums() []int32 {
	if x != nil {
		return x.Nums
	}
	return nil
}

//PACKET_CS_COINSCENE_OP
//玩家进入房间
type CSCoinSceneOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`         //
	OpType   int32   `protobuf:"varint,2,opt,name=OpType,proto3" json:"OpType,omitempty"` //0:进入 1:离开 2:换桌
	OpParams []int32 `protobuf:"varint,3,rep,packed,name=OpParams,proto3" json:"OpParams,omitempty"`
	Platform string  `protobuf:"bytes,4,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *CSCoinSceneOp) Reset() {
	*x = CSCoinSceneOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCoinSceneOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCoinSceneOp) ProtoMessage() {}

func (x *CSCoinSceneOp) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCoinSceneOp.ProtoReflect.Descriptor instead.
func (*CSCoinSceneOp) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{2}
}

func (x *CSCoinSceneOp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CSCoinSceneOp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *CSCoinSceneOp) GetOpParams() []int32 {
	if x != nil {
		return x.OpParams
	}
	return nil
}

func (x *CSCoinSceneOp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

//PACKET_SC_COINSCENE_OP
type SCCoinSceneOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode   OpResultCode `protobuf:"varint,1,opt,name=OpCode,proto3,enum=gamehall.OpResultCode" json:"OpCode,omitempty"` //操作码
	Id       int32        `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`                                    //
	OpType   int32        `protobuf:"varint,3,opt,name=OpType,proto3" json:"OpType,omitempty"`
	OpParams []int32      `protobuf:"varint,4,rep,packed,name=OpParams,proto3" json:"OpParams,omitempty"`
}

func (x *SCCoinSceneOp) Reset() {
	*x = SCCoinSceneOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinSceneOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinSceneOp) ProtoMessage() {}

func (x *SCCoinSceneOp) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinSceneOp.ProtoReflect.Descriptor instead.
func (*SCCoinSceneOp) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{3}
}

func (x *SCCoinSceneOp) GetOpCode() OpResultCode {
	if x != nil {
		return x.OpCode
	}
	return OpResultCode_OPRC_Sucess
}

func (x *SCCoinSceneOp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCCoinSceneOp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *SCCoinSceneOp) GetOpParams() []int32 {
	if x != nil {
		return x.OpParams
	}
	return nil
}

//PACKET_CS_COINSCENE_LISTROOM
//查看房间列表
type CSCoinSceneListRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"` //游戏ID：对应DB_GameFree.xlsx中的id
}

func (x *CSCoinSceneListRoom) Reset() {
	*x = CSCoinSceneListRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCoinSceneListRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCoinSceneListRoom) ProtoMessage() {}

func (x *CSCoinSceneListRoom) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCoinSceneListRoom.ProtoReflect.Descriptor instead.
func (*CSCoinSceneListRoom) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{4}
}

func (x *CSCoinSceneListRoom) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//房间信息
type CoinSceneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId   int32 `protobuf:"varint,1,opt,name=SceneId,proto3" json:"SceneId,omitempty"`
	PlayerNum int32 `protobuf:"varint,2,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"`
}

func (x *CoinSceneInfo) Reset() {
	*x = CoinSceneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinSceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinSceneInfo) ProtoMessage() {}

func (x *CoinSceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinSceneInfo.ProtoReflect.Descriptor instead.
func (*CoinSceneInfo) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{5}
}

func (x *CoinSceneInfo) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *CoinSceneInfo) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

//PACKET_SC_COINSCENE_LISTROOM
//查看房间列表
type SCCoinSceneListRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                //游戏ID：对应DB_GameFree.xlsx中的id
	LimitCoin      int32            `protobuf:"varint,2,opt,name=LimitCoin,proto3" json:"LimitCoin,omitempty"`                  //入场下限
	MaxCoinLimit   int32            `protobuf:"varint,3,opt,name=MaxCoinLimit,proto3" json:"MaxCoinLimit,omitempty"`            //入场上限
	BaseScore      int32            `protobuf:"varint,4,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`                  //最小下注或者底分
	MaxScore       int32            `protobuf:"varint,5,opt,name=MaxScore,proto3" json:"MaxScore,omitempty"`                    //最大下注
	MaxPlayerNum   int32            `protobuf:"varint,6,opt,name=MaxPlayerNum,proto3" json:"MaxPlayerNum,omitempty"`            //最大人数
	OtherIntParams []int32          `protobuf:"varint,7,rep,packed,name=OtherIntParams,proto3" json:"OtherIntParams,omitempty"` //其他参数
	Datas          []*CoinSceneInfo `protobuf:"bytes,8,rep,name=Datas,proto3" json:"Datas,omitempty"`                           //房间信息
}

func (x *SCCoinSceneListRoom) Reset() {
	*x = SCCoinSceneListRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinSceneListRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinSceneListRoom) ProtoMessage() {}

func (x *SCCoinSceneListRoom) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinSceneListRoom.ProtoReflect.Descriptor instead.
func (*SCCoinSceneListRoom) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{6}
}

func (x *SCCoinSceneListRoom) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetLimitCoin() int32 {
	if x != nil {
		return x.LimitCoin
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetMaxCoinLimit() int32 {
	if x != nil {
		return x.MaxCoinLimit
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetMaxScore() int32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetMaxPlayerNum() int32 {
	if x != nil {
		return x.MaxPlayerNum
	}
	return 0
}

func (x *SCCoinSceneListRoom) GetOtherIntParams() []int32 {
	if x != nil {
		return x.OtherIntParams
	}
	return nil
}

func (x *SCCoinSceneListRoom) GetDatas() []*CoinSceneInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

//PACKET_SC_COINSCENE_QUEUESTATE
type SCCoinSceneQueueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameFreeId int32 `protobuf:"varint,1,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	Count      int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	Ts         int64 `protobuf:"varint,3,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (x *SCCoinSceneQueueState) Reset() {
	*x = SCCoinSceneQueueState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinscene_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinSceneQueueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinSceneQueueState) ProtoMessage() {}

func (x *SCCoinSceneQueueState) ProtoReflect() protoreflect.Message {
	mi := &file_coinscene_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinSceneQueueState.ProtoReflect.Descriptor instead.
func (*SCCoinSceneQueueState) Descriptor() ([]byte, []int) {
	return file_coinscene_proto_rawDescGZIP(), []int{7}
}

func (x *SCCoinSceneQueueState) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCCoinSceneQueueState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SCCoinSceneQueueState) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

var File_coinscene_proto protoreflect.FileDescriptor

var file_coinscene_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x22, 0x4f, 0x0a, 0x17, 0x43,
	0x53, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2d, 0x0a, 0x17,
	0x53, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x6f, 0x0a, 0x0d, 0x43,
	0x53, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x83, 0x01, 0x0a,
	0x0d, 0x53, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x70, 0x12, 0x2e,
	0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x53, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0d, 0x43, 0x6f, 0x69,
	0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x53, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61,
	0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61,
	0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73,
	0x2a, 0x82, 0x04, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x73, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0xfb, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x9d,
	0x08, 0x12, 0x1d, 0x0a, 0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x10, 0x9e, 0x08,
	0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x74,
	0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xa0, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x4d, 0x6f, 0x72, 0x65, 0x10, 0xa2, 0x08,
	0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x59, 0x6f, 0x75, 0x41, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0xa3,
	0x08, 0x12, 0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4e, 0x6f, 0x46, 0x69, 0x6e, 0x64,
	0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xb7, 0x08, 0x12,
	0x1c, 0x0a, 0x17, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x4f, 0x66, 0x74, 0x65, 0x6e, 0x10, 0xb8, 0x08, 0x12, 0x1d, 0x0a,
	0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4e, 0x6f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0xb9, 0x08, 0x12, 0x11, 0x0a, 0x0c,
	0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x10, 0xba, 0x08, 0x12,
	0x17, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0xcf, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x63, 0x63, 0x10, 0xd1, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0xd2, 0x08, 0x12, 0x25,
	0x0a, 0x20, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x10, 0xd3, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4d, 0x75,
	0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x10, 0xd9,
	0x08, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x59, 0x6f, 0x75, 0x72, 0x41, 0x72,
	0x65, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x10, 0xb6, 0x08, 0x2a, 0xa9, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4e,
	0x55, 0x4d, 0x10, 0x90, 0x12, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x10, 0x91, 0x12, 0x12, 0x1b, 0x0a, 0x16,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x50, 0x10, 0x92, 0x12, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x4f, 0x50, 0x10, 0x93, 0x12, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x94, 0x12, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x95, 0x12, 0x12, 0x23, 0x0a, 0x1e,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x96,
	0x12, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinscene_proto_rawDescOnce sync.Once
	file_coinscene_proto_rawDescData = file_coinscene_proto_rawDesc
)

func file_coinscene_proto_rawDescGZIP() []byte {
	file_coinscene_proto_rawDescOnce.Do(func() {
		file_coinscene_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinscene_proto_rawDescData)
	})
	return file_coinscene_proto_rawDescData
}

var file_coinscene_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_coinscene_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_coinscene_proto_goTypes = []interface{}{
	(OpResultCode)(0),               // 0: gamehall.OpResultCode
	(CoinSceneGamePacketID)(0),      // 1: gamehall.CoinSceneGamePacketID
	(*CSCoinSceneGetPlayerNum)(nil), // 2: gamehall.CSCoinSceneGetPlayerNum
	(*SCCoinSceneGetPlayerNum)(nil), // 3: gamehall.SCCoinSceneGetPlayerNum
	(*CSCoinSceneOp)(nil),           // 4: gamehall.CSCoinSceneOp
	(*SCCoinSceneOp)(nil),           // 5: gamehall.SCCoinSceneOp
	(*CSCoinSceneListRoom)(nil),     // 6: gamehall.CSCoinSceneListRoom
	(*CoinSceneInfo)(nil),           // 7: gamehall.CoinSceneInfo
	(*SCCoinSceneListRoom)(nil),     // 8: gamehall.SCCoinSceneListRoom
	(*SCCoinSceneQueueState)(nil),   // 9: gamehall.SCCoinSceneQueueState
}
var file_coinscene_proto_depIdxs = []int32{
	0, // 0: gamehall.SCCoinSceneOp.OpCode:type_name -> gamehall.OpResultCode
	7, // 1: gamehall.SCCoinSceneListRoom.Datas:type_name -> gamehall.CoinSceneInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_coinscene_proto_init() }
func file_coinscene_proto_init() {
	if File_coinscene_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinscene_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCoinSceneGetPlayerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinSceneGetPlayerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCoinSceneOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinSceneOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCoinSceneListRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinSceneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinSceneListRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinscene_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinSceneQueueState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinscene_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinscene_proto_goTypes,
		DependencyIndexes: file_coinscene_proto_depIdxs,
		EnumInfos:         file_coinscene_proto_enumTypes,
		MessageInfos:      file_coinscene_proto_msgTypes,
	}.Build()
	File_coinscene_proto = out.File
	file_coinscene_proto_rawDesc = nil
	file_coinscene_proto_goTypes = nil
	file_coinscene_proto_depIdxs = nil
}
