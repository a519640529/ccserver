// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: hundredyxx.proto

package hundredyxx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//鱼虾蟹
type HundredYXXPacketID int32

const (
	HundredYXXPacketID_PACKET_HundredYxx_ZERO    HundredYXXPacketID = 0    //弃用消息号
	HundredYXXPacketID_PACKET_SC_HYXX_ROOMINFO   HundredYXXPacketID = 5390 //房间信息
	HundredYXXPacketID_PACKET_SC_HYXX_ROOMSTATE  HundredYXXPacketID = 5391 //房间状态
	HundredYXXPacketID_PACKET_CS_HYXX_PLAYEROP   HundredYXXPacketID = 5392 //玩家操作
	HundredYXXPacketID_PACKET_SC_HYXX_PLAYEROP   HundredYXXPacketID = 5393 //玩家操作
	HundredYXXPacketID_PACKET_SC_HYXX_GAMEBILLED HundredYXXPacketID = 5394 //游戏结算
	HundredYXXPacketID_PACKET_SC_HYXX_UPLIST     HundredYXXPacketID = 5395 //上庄列表
	HundredYXXPacketID_PACKET_SC_HYXX_TREND      HundredYXXPacketID = 5396 //走势
	HundredYXXPacketID_PACKET_SC_HYXX_SEATS      HundredYXXPacketID = 5397 //座位信息
	HundredYXXPacketID_PACKET_SC_HYXX_OPENDICE   HundredYXXPacketID = 5398 //开骰子
	HundredYXXPacketID_PACKET_SC_HYXX_PLAYERLIST HundredYXXPacketID = 5399 //玩家列表
	HundredYXXPacketID_PACKET_SC_HYXX_SYNCCHIP   HundredYXXPacketID = 5400 //同步总下注额
	HundredYXXPacketID_PACKET_SC_HYXX_BET        HundredYXXPacketID = 5401 //下注
)

// Enum value maps for HundredYXXPacketID.
var (
	HundredYXXPacketID_name = map[int32]string{
		0:    "PACKET_HundredYxx_ZERO",
		5390: "PACKET_SC_HYXX_ROOMINFO",
		5391: "PACKET_SC_HYXX_ROOMSTATE",
		5392: "PACKET_CS_HYXX_PLAYEROP",
		5393: "PACKET_SC_HYXX_PLAYEROP",
		5394: "PACKET_SC_HYXX_GAMEBILLED",
		5395: "PACKET_SC_HYXX_UPLIST",
		5396: "PACKET_SC_HYXX_TREND",
		5397: "PACKET_SC_HYXX_SEATS",
		5398: "PACKET_SC_HYXX_OPENDICE",
		5399: "PACKET_SC_HYXX_PLAYERLIST",
		5400: "PACKET_SC_HYXX_SYNCCHIP",
		5401: "PACKET_SC_HYXX_BET",
	}
	HundredYXXPacketID_value = map[string]int32{
		"PACKET_HundredYxx_ZERO":    0,
		"PACKET_SC_HYXX_ROOMINFO":   5390,
		"PACKET_SC_HYXX_ROOMSTATE":  5391,
		"PACKET_CS_HYXX_PLAYEROP":   5392,
		"PACKET_SC_HYXX_PLAYEROP":   5393,
		"PACKET_SC_HYXX_GAMEBILLED": 5394,
		"PACKET_SC_HYXX_UPLIST":     5395,
		"PACKET_SC_HYXX_TREND":      5396,
		"PACKET_SC_HYXX_SEATS":      5397,
		"PACKET_SC_HYXX_OPENDICE":   5398,
		"PACKET_SC_HYXX_PLAYERLIST": 5399,
		"PACKET_SC_HYXX_SYNCCHIP":   5400,
		"PACKET_SC_HYXX_BET":        5401,
	}
)

func (x HundredYXXPacketID) Enum() *HundredYXXPacketID {
	p := new(HundredYXXPacketID)
	*p = x
	return p
}

func (x HundredYXXPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HundredYXXPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_hundredyxx_proto_enumTypes[0].Descriptor()
}

func (HundredYXXPacketID) Type() protoreflect.EnumType {
	return &file_hundredyxx_proto_enumTypes[0]
}

func (x HundredYXXPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HundredYXXPacketID.Descriptor instead.
func (HundredYXXPacketID) EnumDescriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{0}
}

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess                        OpResultCode = 0    //成功
	OpResultCode_OPRC_Error                         OpResultCode = 1    //失败
	OpResultCode_OPRC_Hundred_CoinMustReachTheValue OpResultCode = 7005 //抱歉,xx筹码以上才能下注
	OpResultCode_OPRC_Hundred_CoinIsNotEnough       OpResultCode = 7006 //你的金币不足，无法下注
	OpResultCode_OPRC_Hundred_BankerWaiting         OpResultCode = 7007 //你已经在上庄等待区了
	OpResultCode_OPRC_Hundred_BankerLimit           OpResultCode = 7008 //不满足上庄条件
	OpResultCode_OPRC_Hundred_NotBankerWaiting      OpResultCode = 7009 //你已经在上庄等待区了
	OpResultCode_OPRC_Hundred_BankerCannotBet       OpResultCode = 7010 //庄家不能下注
	OpResultCode_OPRC_Hundred_SelfBetLimitRate      OpResultCode = 7011 //下注总额不能超过自身携带的1/6
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		7005: "OPRC_Hundred_CoinMustReachTheValue",
		7006: "OPRC_Hundred_CoinIsNotEnough",
		7007: "OPRC_Hundred_BankerWaiting",
		7008: "OPRC_Hundred_BankerLimit",
		7009: "OPRC_Hundred_NotBankerWaiting",
		7010: "OPRC_Hundred_BankerCannotBet",
		7011: "OPRC_Hundred_SelfBetLimitRate",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":                        0,
		"OPRC_Error":                         1,
		"OPRC_Hundred_CoinMustReachTheValue": 7005,
		"OPRC_Hundred_CoinIsNotEnough":       7006,
		"OPRC_Hundred_BankerWaiting":         7007,
		"OPRC_Hundred_BankerLimit":           7008,
		"OPRC_Hundred_NotBankerWaiting":      7009,
		"OPRC_Hundred_BankerCannotBet":       7010,
		"OPRC_Hundred_SelfBetLimitRate":      7011,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hundredyxx_proto_enumTypes[1].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_hundredyxx_proto_enumTypes[1]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{1}
}

type HundredYXXPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	Lately20Win int64    `protobuf:"varint,10,opt,name=Lately20Win,proto3" json:"Lately20Win,omitempty"` //最近20局输赢 (赢的次数)
	Lately20Bet int64    `protobuf:"varint,11,opt,name=Lately20Bet,proto3" json:"Lately20Bet,omitempty"` //最近20局总下注 (可能是负值)
	HeadOutLine int32    `protobuf:"varint,12,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,13,opt,name=VIP,proto3" json:"VIP,omitempty"`
	BetTotal    int64    `protobuf:"varint,14,opt,name=BetTotal,proto3" json:"BetTotal,omitempty"` //本局下注总额  (玩家金币余额=Coin-BetTotal)
	NiceId      int32    `protobuf:"varint,15,opt,name=NiceId,proto3" json:"NiceId,omitempty"`
}

func (x *HundredYXXPlayerData) Reset() {
	*x = HundredYXXPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXPlayerData) ProtoMessage() {}

func (x *HundredYXXPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXPlayerData.ProtoReflect.Descriptor instead.
func (*HundredYXXPlayerData) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{0}
}

func (x *HundredYXXPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HundredYXXPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *HundredYXXPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *HundredYXXPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HundredYXXPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *HundredYXXPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *HundredYXXPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *HundredYXXPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HundredYXXPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HundredYXXPlayerData) GetLately20Win() int64 {
	if x != nil {
		return x.Lately20Win
	}
	return 0
}

func (x *HundredYXXPlayerData) GetLately20Bet() int64 {
	if x != nil {
		return x.Lately20Bet
	}
	return 0
}

func (x *HundredYXXPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *HundredYXXPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *HundredYXXPlayerData) GetBetTotal() int64 {
	if x != nil {
		return x.BetTotal
	}
	return 0
}

func (x *HundredYXXPlayerData) GetNiceId() int32 {
	if x != nil {
		return x.NiceId
	}
	return 0
}

//玩家下注|座位上的玩家下注
//PACKET_SC_HYXX_BET
type SCHundredYXXBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId           int32 `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                     //玩家id
	BetPos         int32 `protobuf:"varint,2,opt,name=BetPos,proto3" json:"BetPos,omitempty"`                 //下注区域 1:天 2:地 3:玄 4:黄
	BetChip        int64 `protobuf:"varint,3,opt,name=BetChip,proto3" json:"BetChip,omitempty"`               //下注数量
	BetPosBetTotal int64 `protobuf:"varint,4,opt,name=BetPosBetTotal,proto3" json:"BetPosBetTotal,omitempty"` //玩家在这个区域的总下注额
	BetTotal       int64 `protobuf:"varint,5,opt,name=BetTotal,proto3" json:"BetTotal,omitempty"`             //玩家本局总的下注额
	Coin           int64 `protobuf:"varint,6,opt,name=Coin,proto3" json:"Coin,omitempty"`                     //玩家总的金币
}

func (x *SCHundredYXXBet) Reset() {
	*x = SCHundredYXXBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXBet) ProtoMessage() {}

func (x *SCHundredYXXBet) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXBet.ProtoReflect.Descriptor instead.
func (*SCHundredYXXBet) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{1}
}

func (x *SCHundredYXXBet) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCHundredYXXBet) GetBetPos() int32 {
	if x != nil {
		return x.BetPos
	}
	return 0
}

func (x *SCHundredYXXBet) GetBetChip() int64 {
	if x != nil {
		return x.BetChip
	}
	return 0
}

func (x *SCHundredYXXBet) GetBetPosBetTotal() int64 {
	if x != nil {
		return x.BetPosBetTotal
	}
	return 0
}

func (x *SCHundredYXXBet) GetBetTotal() int64 {
	if x != nil {
		return x.BetTotal
	}
	return 0
}

func (x *SCHundredYXXBet) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

//同步筹码，暂定1秒1次
//PACKET_SC_HYXX_SYNCCHIP
type SCHundredYXXSyncChip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChipTotal []int64 `protobuf:"varint,2,rep,packed,name=ChipTotal,proto3" json:"ChipTotal,omitempty"` //4个区域总的押注信息
}

func (x *SCHundredYXXSyncChip) Reset() {
	*x = SCHundredYXXSyncChip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXSyncChip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXSyncChip) ProtoMessage() {}

func (x *SCHundredYXXSyncChip) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXSyncChip.ProtoReflect.Descriptor instead.
func (*SCHundredYXXSyncChip) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{2}
}

func (x *SCHundredYXXSyncChip) GetChipTotal() []int64 {
	if x != nil {
		return x.ChipTotal
	}
	return nil
}

//牌型信息
//	CardsKind_Normal             = 0    //单子
//	CardsKind_Double             = 1    //对子
//	CardsKind_ThreeSort          = 2    //顺子
//	CardsKind_SameColor          = 3    //同花
//	CardsKind_SameColorSort      = 4    //同花顺
//	CardsKind_ThreeSame          = 5    //豹子
type HundredYXXCardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      int32   `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`            //位置 0:庄 1:天 2:地 3:玄 4:黄
	CardMask int32   `protobuf:"varint,2,opt,name=CardMask,proto3" json:"CardMask,omitempty"`  //最佳组合掩码，二进制，如：01011 表示，第1,2,4张牌为最大组合
	CardKind int32   `protobuf:"varint,3,opt,name=CardKind,proto3" json:"CardKind,omitempty"`  //牌型 0~6
	Multiple int32   `protobuf:"varint,4,opt,name=Multiple,proto3" json:"Multiple,omitempty"`  //倍数
	IsWin    int32   `protobuf:"varint,5,opt,name=IsWin,proto3" json:"IsWin,omitempty"`        //是否输赢 -1:输 1:赢
	Cards    []int32 `protobuf:"varint,6,rep,packed,name=Cards,proto3" json:"Cards,omitempty"` //手牌
}

func (x *HundredYXXCardsInfo) Reset() {
	*x = HundredYXXCardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXCardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXCardsInfo) ProtoMessage() {}

func (x *HundredYXXCardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXCardsInfo.ProtoReflect.Descriptor instead.
func (*HundredYXXCardsInfo) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{3}
}

func (x *HundredYXXCardsInfo) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *HundredYXXCardsInfo) GetCardMask() int32 {
	if x != nil {
		return x.CardMask
	}
	return 0
}

func (x *HundredYXXCardsInfo) GetCardKind() int32 {
	if x != nil {
		return x.CardKind
	}
	return 0
}

func (x *HundredYXXCardsInfo) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *HundredYXXCardsInfo) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

func (x *HundredYXXCardsInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

//房间信息 PACKET_SC_HYXX_ROOMINFO
type SCHundredYXXRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        int32                   `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                       //房间id
	GameFreeId    int32                   `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`               //场次id
	GameId        int32                   `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                       //游戏id
	RoomMode      int32                   `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`                   //游戏模式
	Params        []int32                 `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`                //规则参数
	NumOfGames    int32                   `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`               //当前第几局
	State         int32                   `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`                         //房间当前状态
	TimeOut       int32                   `protobuf:"varint,8,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                     //等待剩余时间 单位:毫秒
	BankerId      int32                   `protobuf:"varint,9,opt,name=BankerId,proto3" json:"BankerId,omitempty"`                   //庄家位置
	LimitCoin     int32                   `protobuf:"varint,10,opt,name=LimitCoin,proto3" json:"LimitCoin,omitempty"`                //进房金币下限
	MaxCoinLimit  int32                   `protobuf:"varint,11,opt,name=MaxCoinLimit,proto3" json:"MaxCoinLimit,omitempty"`          //进房金币上限
	BankerLimit   int32                   `protobuf:"varint,12,opt,name=BankerLimit,proto3" json:"BankerLimit,omitempty"`            //上庄条件
	BaseScore     int32                   `protobuf:"varint,13,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`                //底分
	LowerThanKick int32                   `protobuf:"varint,14,opt,name=LowerThanKick,proto3" json:"LowerThanKick,omitempty"`        //低于多少踢出房间
	BetRateLimit  int32                   `protobuf:"varint,15,opt,name=BetRateLimit,proto3" json:"BetRateLimit,omitempty"`          //押注限制(区域押注总额不能超过自身携带的百分比)
	MaxBetCoin    []int32                 `protobuf:"varint,16,rep,packed,name=MaxBetCoin,proto3" json:"MaxBetCoin,omitempty"`       //各区域的押注限制
	ParamsEx      []int32                 `protobuf:"varint,17,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`           //其他参数
	SceneType     int32                   `protobuf:"varint,18,opt,name=SceneType,proto3" json:"SceneType,omitempty"`                //房间模式
	PlayerNum     int32                   `protobuf:"varint,19,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"`                //在线玩家数量
	ChipData      []int64                 `protobuf:"varint,20,rep,packed,name=ChipData,proto3" json:"ChipData,omitempty"`           //筹码信息
	MyChipData    []int64                 `protobuf:"varint,21,rep,packed,name=MyChipData,proto3" json:"MyChipData,omitempty"`       //玩家各个区域的筹码信息
	DicePoints    []int32                 `protobuf:"varint,22,rep,packed,name=DicePoints,proto3" json:"DicePoints,omitempty"`       //骰子数值
	Players       []*HundredYXXPlayerData `protobuf:"bytes,23,rep,name=Players,proto3" json:"Players,omitempty"`                     //房间内的玩家信息
	BetLimit      int32                   `protobuf:"varint,24,opt,name=BetLimit,proto3" json:"BetLimit,omitempty"`                  //压注限制，低于xxx不能下注
	MyPreChipData []int64                 `protobuf:"varint,25,rep,packed,name=MyPreChipData,proto3" json:"MyPreChipData,omitempty"` //玩家上一局的下注信息(用于短线重连续投)
}

func (x *SCHundredYXXRoomInfo) Reset() {
	*x = SCHundredYXXRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXRoomInfo) ProtoMessage() {}

func (x *SCHundredYXXRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXRoomInfo.ProtoReflect.Descriptor instead.
func (*SCHundredYXXRoomInfo) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{4}
}

func (x *SCHundredYXXRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetBankerId() int32 {
	if x != nil {
		return x.BankerId
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetLimitCoin() int32 {
	if x != nil {
		return x.LimitCoin
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetMaxCoinLimit() int32 {
	if x != nil {
		return x.MaxCoinLimit
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetBankerLimit() int32 {
	if x != nil {
		return x.BankerLimit
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetBaseScore() int32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetLowerThanKick() int32 {
	if x != nil {
		return x.LowerThanKick
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetBetRateLimit() int32 {
	if x != nil {
		return x.BetRateLimit
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetMaxBetCoin() []int32 {
	if x != nil {
		return x.MaxBetCoin
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetChipData() []int64 {
	if x != nil {
		return x.ChipData
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetMyChipData() []int64 {
	if x != nil {
		return x.MyChipData
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetDicePoints() []int32 {
	if x != nil {
		return x.DicePoints
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetPlayers() []*HundredYXXPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCHundredYXXRoomInfo) GetBetLimit() int32 {
	if x != nil {
		return x.BetLimit
	}
	return 0
}

func (x *SCHundredYXXRoomInfo) GetMyPreChipData() []int64 {
	if x != nil {
		return x.MyPreChipData
	}
	return nil
}

//座位位置 PACKET_SC_HYXX_SEATS
type SCHundredYXXSeats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerId  int32                   `protobuf:"varint,1,opt,name=BankerId,proto3" json:"BankerId,omitempty"`   //庄的id, 0：系统庄
	PlayerNum int32                   `protobuf:"varint,2,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //玩家数量
	Data      []*HundredYXXPlayerData `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`            //玩家信息
}

func (x *SCHundredYXXSeats) Reset() {
	*x = SCHundredYXXSeats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXSeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXSeats) ProtoMessage() {}

func (x *SCHundredYXXSeats) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXSeats.ProtoReflect.Descriptor instead.
func (*SCHundredYXXSeats) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{5}
}

func (x *SCHundredYXXSeats) GetBankerId() int32 {
	if x != nil {
		return x.BankerId
	}
	return 0
}

func (x *SCHundredYXXSeats) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *SCHundredYXXSeats) GetData() []*HundredYXXPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

//上庄列表 PACKET_SC_HYXX_UPLIST
type SCHundredYXXUpList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32                   `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`     //数量
	IsExist int32                   `protobuf:"varint,2,opt,name=IsExist,proto3" json:"IsExist,omitempty"` //玩家是否已经在上庄列表  0：不在上庄列表   1：在上庄列表
	Data    []*HundredYXXPlayerData `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data,omitempty"`        //上庄列表
}

func (x *SCHundredYXXUpList) Reset() {
	*x = SCHundredYXXUpList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXUpList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXUpList) ProtoMessage() {}

func (x *SCHundredYXXUpList) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXUpList.ProtoReflect.Descriptor instead.
func (*SCHundredYXXUpList) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{6}
}

func (x *SCHundredYXXUpList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SCHundredYXXUpList) GetIsExist() int32 {
	if x != nil {
		return x.IsExist
	}
	return 0
}

func (x *SCHundredYXXUpList) GetData() []*HundredYXXPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

//走势图 PACKET_SC_HYXX_TREND
type SCHundredYXXTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,1,rep,packed,name=Data,proto3" json:"Data,omitempty"` //每个值二进制前4位依次表示 黑红梅方4个位置的输赢情况 1:赢 0:输
}

func (x *SCHundredYXXTrend) Reset() {
	*x = SCHundredYXXTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXTrend) ProtoMessage() {}

func (x *SCHundredYXXTrend) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXTrend.ProtoReflect.Descriptor instead.
func (*SCHundredYXXTrend) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{7}
}

func (x *SCHundredYXXTrend) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

//玩家操作 PACKET_CS_HYXX_PLAYEROP
//	HundredYXXPlayerOpBet           = 0 //下注
//	HundredYXXPlayerOpUpBanker      = 1 //上庄
//	HundredYXXPlayerOpDwonBanker    = 2 //下庄
//	HundredYXXPlayerOpUpList        = 3 //上庄列表
//	HundredYXXTrend                 = 4	//走势
//	HundredYXXPlayerList            = 5 //玩家列表
//	HundredYXXPlayerOpNowDwonBanker = 6 //在庄的下庄
type CSHundredYXXOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSHundredYXXOp) Reset() {
	*x = CSHundredYXXOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHundredYXXOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHundredYXXOp) ProtoMessage() {}

func (x *CSHundredYXXOp) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHundredYXXOp.ProtoReflect.Descriptor instead.
func (*CSHundredYXXOp) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{8}
}

func (x *CSHundredYXXOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSHundredYXXOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回 PACKET_SC_HYXX_PLAYEROP
type SCHundredYXXOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                        //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                    //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                             //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=hundredyxx.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCHundredYXXOp) Reset() {
	*x = SCHundredYXXOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXOp) ProtoMessage() {}

func (x *SCHundredYXXOp) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXOp.ProtoReflect.Descriptor instead.
func (*SCHundredYXXOp) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{9}
}

func (x *SCHundredYXXOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCHundredYXXOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCHundredYXXOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCHundredYXXOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//房间状态 PACKET_SC_HYXX_ROOMSTATE
type SCHundredYXXRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int64 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCHundredYXXRoomState) Reset() {
	*x = SCHundredYXXRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXRoomState) ProtoMessage() {}

func (x *SCHundredYXXRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXRoomState.ProtoReflect.Descriptor instead.
func (*SCHundredYXXRoomState) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{10}
}

func (x *SCHundredYXXRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCHundredYXXRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCHundredYXXRoomState) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家列表 PACKET_SC_HYXX_PLAYERLIST
type SCHundredYXXPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerNum int32                   `protobuf:"varint,1,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //玩家数量
	Data      []*HundredYXXPlayerData `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SCHundredYXXPlayerList) Reset() {
	*x = SCHundredYXXPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXPlayerList) ProtoMessage() {}

func (x *SCHundredYXXPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXPlayerList.ProtoReflect.Descriptor instead.
func (*SCHundredYXXPlayerList) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{11}
}

func (x *SCHundredYXXPlayerList) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *SCHundredYXXPlayerList) GetData() []*HundredYXXPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

//发牌每个位置的牌信息 PACKET_SC_HYXX_OPENDICE
type SCHundredYXXOpenDice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DicePoints []int32 `protobuf:"varint,1,rep,packed,name=DicePoints,proto3" json:"DicePoints,omitempty"` //三个骰子点数 0-5
}

func (x *SCHundredYXXOpenDice) Reset() {
	*x = SCHundredYXXOpenDice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXOpenDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXOpenDice) ProtoMessage() {}

func (x *SCHundredYXXOpenDice) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXOpenDice.ProtoReflect.Descriptor instead.
func (*SCHundredYXXOpenDice) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{12}
}

func (x *SCHundredYXXOpenDice) GetDicePoints() []int32 {
	if x != nil {
		return x.DicePoints
	}
	return nil
}

//玩家区域内的输赢
type HundredYXXWinLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`           //玩家位置
	PlayerID int32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"` //玩家id
	WinCoin  int64 `protobuf:"varint,3,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`   //本区域输赢金币 (税前)
}

func (x *HundredYXXWinLost) Reset() {
	*x = HundredYXXWinLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXWinLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXWinLost) ProtoMessage() {}

func (x *HundredYXXWinLost) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXWinLost.ProtoReflect.Descriptor instead.
func (*HundredYXXWinLost) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{13}
}

func (x *HundredYXXWinLost) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *HundredYXXWinLost) GetPlayerID() int32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *HundredYXXWinLost) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

//下注区域输赢情况
type HundredYXXBetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWin      int32                `protobuf:"varint,1,opt,name=IsWin,proto3" json:"IsWin,omitempty"`          //0表示输  1表示赢
	Coin       int64                `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`            //总金币
	PalyerData []*HundredYXXWinLost `protobuf:"bytes,3,rep,name=PalyerData,proto3" json:"PalyerData,omitempty"` //玩家信息
}

func (x *HundredYXXBetField) Reset() {
	*x = HundredYXXBetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXBetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXBetField) ProtoMessage() {}

func (x *HundredYXXBetField) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXBetField.ProtoReflect.Descriptor instead.
func (*HundredYXXBetField) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{14}
}

func (x *HundredYXXBetField) GetIsWin() int32 {
	if x != nil {
		return x.IsWin
	}
	return 0
}

func (x *HundredYXXBetField) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *HundredYXXBetField) GetPalyerData() []*HundredYXXWinLost {
	if x != nil {
		return x.PalyerData
	}
	return nil
}

//大赢家
type HundredYXXBigWinner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId        int32  `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	Head        int32  `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	HeadOutLine int32  `protobuf:"varint,4,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32  `protobuf:"varint,5,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Sex         int32  `protobuf:"varint,6,opt,name=Sex,proto3" json:"Sex,omitempty"`           //性别
	City        string `protobuf:"bytes,7,opt,name=City,proto3" json:"City,omitempty"`          //城市
	Coin        int64  `protobuf:"varint,8,opt,name=Coin,proto3" json:"Coin,omitempty"`         //金币
	GainCoin    int64  `protobuf:"varint,9,opt,name=GainCoin,proto3" json:"GainCoin,omitempty"` //本局赢的钱
}

func (x *HundredYXXBigWinner) Reset() {
	*x = HundredYXXBigWinner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXBigWinner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXBigWinner) ProtoMessage() {}

func (x *HundredYXXBigWinner) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXBigWinner.ProtoReflect.Descriptor instead.
func (*HundredYXXBigWinner) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{15}
}

func (x *HundredYXXBigWinner) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *HundredYXXBigWinner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HundredYXXBigWinner) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *HundredYXXBigWinner) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *HundredYXXBigWinner) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *HundredYXXBigWinner) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *HundredYXXBigWinner) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HundredYXXBigWinner) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *HundredYXXBigWinner) GetGainCoin() int64 {
	if x != nil {
		return x.GainCoin
	}
	return 0
}

type HundredYXXPlayerFinalWinLost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      int32 `protobuf:"varint,1,opt,name=Pos,proto3" json:"Pos,omitempty"`           //玩家位置
	PlayerID int32 `protobuf:"varint,2,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"` //玩家id
	GainCoin int64 `protobuf:"varint,3,opt,name=GainCoin,proto3" json:"GainCoin,omitempty"` //输赢金币 (税后)
	Coin     int64 `protobuf:"varint,4,opt,name=Coin,proto3" json:"Coin,omitempty"`         //玩家最终身上结余
}

func (x *HundredYXXPlayerFinalWinLost) Reset() {
	*x = HundredYXXPlayerFinalWinLost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HundredYXXPlayerFinalWinLost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HundredYXXPlayerFinalWinLost) ProtoMessage() {}

func (x *HundredYXXPlayerFinalWinLost) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HundredYXXPlayerFinalWinLost.ProtoReflect.Descriptor instead.
func (*HundredYXXPlayerFinalWinLost) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{16}
}

func (x *HundredYXXPlayerFinalWinLost) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *HundredYXXPlayerFinalWinLost) GetPlayerID() int32 {
	if x != nil {
		return x.PlayerID
	}
	return 0
}

func (x *HundredYXXPlayerFinalWinLost) GetGainCoin() int64 {
	if x != nil {
		return x.GainCoin
	}
	return 0
}

func (x *HundredYXXPlayerFinalWinLost) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

//结算 PACKET_SC_HYXX_GAMEBILLED
type SCHundredYXXGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetPosData []*HundredYXXBetField           `protobuf:"bytes,1,rep,name=BetPosData,proto3" json:"BetPosData,omitempty"` //下注区域输赢情况
	Explosion  int32                           `protobuf:"varint,2,opt,name=Explosion,proto3" json:"Explosion,omitempty"`  //是否爆庄
	BigWinner  *HundredYXXBigWinner            `protobuf:"bytes,3,opt,name=BigWinner,proto3" json:"BigWinner,omitempty"`   //大赢家
	NumOfGame  int32                           `protobuf:"varint,4,opt,name=NumOfGame,proto3" json:"NumOfGame,omitempty"`  //第几局
	NewTrend   int32                           `protobuf:"varint,5,opt,name=NewTrend,proto3" json:"NewTrend,omitempty"`    //新的开奖结果
	PlayerData []*HundredYXXPlayerFinalWinLost `protobuf:"bytes,6,rep,name=PlayerData,proto3" json:"PlayerData,omitempty"` //玩家最终汇总后的输赢信息
}

func (x *SCHundredYXXGameBilled) Reset() {
	*x = SCHundredYXXGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hundredyxx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHundredYXXGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHundredYXXGameBilled) ProtoMessage() {}

func (x *SCHundredYXXGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_hundredyxx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHundredYXXGameBilled.ProtoReflect.Descriptor instead.
func (*SCHundredYXXGameBilled) Descriptor() ([]byte, []int) {
	return file_hundredyxx_proto_rawDescGZIP(), []int{17}
}

func (x *SCHundredYXXGameBilled) GetBetPosData() []*HundredYXXBetField {
	if x != nil {
		return x.BetPosData
	}
	return nil
}

func (x *SCHundredYXXGameBilled) GetExplosion() int32 {
	if x != nil {
		return x.Explosion
	}
	return 0
}

func (x *SCHundredYXXGameBilled) GetBigWinner() *HundredYXXBigWinner {
	if x != nil {
		return x.BigWinner
	}
	return nil
}

func (x *SCHundredYXXGameBilled) GetNumOfGame() int32 {
	if x != nil {
		return x.NumOfGame
	}
	return 0
}

func (x *SCHundredYXXGameBilled) GetNewTrend() int32 {
	if x != nil {
		return x.NewTrend
	}
	return 0
}

func (x *SCHundredYXXGameBilled) GetPlayerData() []*HundredYXXPlayerFinalWinLost {
	if x != nil {
		return x.PlayerData
	}
	return nil
}

var File_hundredyxx_proto protoreflect.FileDescriptor

var file_hundredyxx_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x22, 0xf6,
	0x02, 0x0a, 0x14, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4c,
	0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x42, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x42, 0x65, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x56, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4e, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x48, 0x75,
	0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x42, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x42, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x43, 0x68,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x42, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x34, 0x0a, 0x14, 0x53, 0x43, 0x48,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x68, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xa7, 0x01, 0x0a, 0x13, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73,
	0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x14, 0x53, 0x43,
	0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f,
	0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x42, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x79, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x79, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78,
	0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x79,
	0x50, 0x72, 0x65, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x4d, 0x79, 0x50, 0x72, 0x65, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x83, 0x01, 0x0a, 0x11, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58,
	0x58, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64,
	0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x12, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64,
	0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x55, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x49, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x6e,
	0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59,
	0x58, 0x58, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59,
	0x58, 0x58, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e, 0x43,
	0x53, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x4f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x0e, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x4f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65,
	0x64, 0x79, 0x78, 0x78, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x15,
	0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x6c, 0x0a, 0x16, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79,
	0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a,
	0x14, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x59, 0x58, 0x58, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x12, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58,
	0x42, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x50, 0x61, 0x6c, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x79, 0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x57, 0x69,
	0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x50, 0x61, 0x6c, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xdb, 0x01, 0x0a, 0x13, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58,
	0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x22,
	0x7c, 0x0a, 0x1c, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0xb9, 0x02,
	0x0a, 0x16, 0x53, 0x43, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65,
	0x64, 0x59, 0x58, 0x58, 0x42, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x42, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x09, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x75, 0x6e, 0x64,
	0x72, 0x65, 0x64, 0x79, 0x78, 0x78, 0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58,
	0x58, 0x42, 0x69, 0x67, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x42, 0x69, 0x67, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12,
	0x48, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x79, 0x78, 0x78,
	0x2e, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x90, 0x03, 0x0a, 0x12, 0x48, 0x75,
	0x6e, 0x64, 0x72, 0x65, 0x64, 0x59, 0x58, 0x58, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72,
	0x65, 0x64, 0x59, 0x78, 0x78, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8e, 0x2a, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x8f, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x4f, 0x50, 0x10, 0x90, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x4f, 0x50, 0x10, 0x91, 0x2a, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x92, 0x2a, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x93,
	0x2a, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48,
	0x59, 0x58, 0x58, 0x5f, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x10, 0x94, 0x2a, 0x12, 0x19, 0x0a, 0x14,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x53,
	0x45, 0x41, 0x54, 0x53, 0x10, 0x95, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x43, 0x45, 0x10, 0x96, 0x2a, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x97, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x43, 0x48, 0x49, 0x50,
	0x10, 0x98, 0x2a, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x48, 0x59, 0x58, 0x58, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x99, 0x2a, 0x2a, 0xa6, 0x02, 0x0a,
	0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x27,
	0x0a, 0x22, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x43,
	0x6f, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x54, 0x68, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0xdd, 0x36, 0x12, 0x21, 0x0a, 0x1c, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x73, 0x4e, 0x6f,
	0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xde, 0x36, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xdf, 0x36, 0x12, 0x1d, 0x0a, 0x18, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x42, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xe0, 0x36, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xe1, 0x36, 0x12, 0x21,
	0x0a, 0x1c, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x5f, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x74, 0x10, 0xe2,
	0x36, 0x12, 0x22, 0x0a, 0x1d, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65,
	0x64, 0x5f, 0x53, 0x65, 0x6c, 0x66, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x10, 0xe3, 0x36, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x68, 0x75, 0x6e, 0x64, 0x72,
	0x65, 0x64, 0x79, 0x78, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hundredyxx_proto_rawDescOnce sync.Once
	file_hundredyxx_proto_rawDescData = file_hundredyxx_proto_rawDesc
)

func file_hundredyxx_proto_rawDescGZIP() []byte {
	file_hundredyxx_proto_rawDescOnce.Do(func() {
		file_hundredyxx_proto_rawDescData = protoimpl.X.CompressGZIP(file_hundredyxx_proto_rawDescData)
	})
	return file_hundredyxx_proto_rawDescData
}

var file_hundredyxx_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hundredyxx_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_hundredyxx_proto_goTypes = []interface{}{
	(HundredYXXPacketID)(0),              // 0: hundredyxx.HundredYXXPacketID
	(OpResultCode)(0),                    // 1: hundredyxx.OpResultCode
	(*HundredYXXPlayerData)(nil),         // 2: hundredyxx.HundredYXXPlayerData
	(*SCHundredYXXBet)(nil),              // 3: hundredyxx.SCHundredYXXBet
	(*SCHundredYXXSyncChip)(nil),         // 4: hundredyxx.SCHundredYXXSyncChip
	(*HundredYXXCardsInfo)(nil),          // 5: hundredyxx.HundredYXXCardsInfo
	(*SCHundredYXXRoomInfo)(nil),         // 6: hundredyxx.SCHundredYXXRoomInfo
	(*SCHundredYXXSeats)(nil),            // 7: hundredyxx.SCHundredYXXSeats
	(*SCHundredYXXUpList)(nil),           // 8: hundredyxx.SCHundredYXXUpList
	(*SCHundredYXXTrend)(nil),            // 9: hundredyxx.SCHundredYXXTrend
	(*CSHundredYXXOp)(nil),               // 10: hundredyxx.CSHundredYXXOp
	(*SCHundredYXXOp)(nil),               // 11: hundredyxx.SCHundredYXXOp
	(*SCHundredYXXRoomState)(nil),        // 12: hundredyxx.SCHundredYXXRoomState
	(*SCHundredYXXPlayerList)(nil),       // 13: hundredyxx.SCHundredYXXPlayerList
	(*SCHundredYXXOpenDice)(nil),         // 14: hundredyxx.SCHundredYXXOpenDice
	(*HundredYXXWinLost)(nil),            // 15: hundredyxx.HundredYXXWinLost
	(*HundredYXXBetField)(nil),           // 16: hundredyxx.HundredYXXBetField
	(*HundredYXXBigWinner)(nil),          // 17: hundredyxx.HundredYXXBigWinner
	(*HundredYXXPlayerFinalWinLost)(nil), // 18: hundredyxx.HundredYXXPlayerFinalWinLost
	(*SCHundredYXXGameBilled)(nil),       // 19: hundredyxx.SCHundredYXXGameBilled
}
var file_hundredyxx_proto_depIdxs = []int32{
	2,  // 0: hundredyxx.SCHundredYXXRoomInfo.Players:type_name -> hundredyxx.HundredYXXPlayerData
	2,  // 1: hundredyxx.SCHundredYXXSeats.Data:type_name -> hundredyxx.HundredYXXPlayerData
	2,  // 2: hundredyxx.SCHundredYXXUpList.Data:type_name -> hundredyxx.HundredYXXPlayerData
	1,  // 3: hundredyxx.SCHundredYXXOp.OpRetCode:type_name -> hundredyxx.OpResultCode
	2,  // 4: hundredyxx.SCHundredYXXPlayerList.Data:type_name -> hundredyxx.HundredYXXPlayerData
	15, // 5: hundredyxx.HundredYXXBetField.PalyerData:type_name -> hundredyxx.HundredYXXWinLost
	16, // 6: hundredyxx.SCHundredYXXGameBilled.BetPosData:type_name -> hundredyxx.HundredYXXBetField
	17, // 7: hundredyxx.SCHundredYXXGameBilled.BigWinner:type_name -> hundredyxx.HundredYXXBigWinner
	18, // 8: hundredyxx.SCHundredYXXGameBilled.PlayerData:type_name -> hundredyxx.HundredYXXPlayerFinalWinLost
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_hundredyxx_proto_init() }
func file_hundredyxx_proto_init() {
	if File_hundredyxx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hundredyxx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXSyncChip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXCardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXSeats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXUpList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHundredYXXOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXOpenDice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXWinLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXBetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXBigWinner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HundredYXXPlayerFinalWinLost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hundredyxx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHundredYXXGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hundredyxx_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hundredyxx_proto_goTypes,
		DependencyIndexes: file_hundredyxx_proto_depIdxs,
		EnumInfos:         file_hundredyxx_proto_enumTypes,
		MessageInfos:      file_hundredyxx_proto_msgTypes,
	}.Build()
	File_hundredyxx_proto = out.File
	file_hundredyxx_proto_rawDesc = nil
	file_hundredyxx_proto_goTypes = nil
	file_hundredyxx_proto_depIdxs = nil
}
