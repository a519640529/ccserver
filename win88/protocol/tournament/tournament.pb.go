// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: tournament.proto

package tournament

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TOURNAMENTID int32

const (
	TOURNAMENTID_PACKET_TM_ZERO            TOURNAMENTID = 0    //弃用消息号
	TOURNAMENTID_PACKET_TM_CSTMInfo        TOURNAMENTID = 2740 //请求场次信息
	TOURNAMENTID_PACKET_TM_SCTMInfos       TOURNAMENTID = 2741 //返回场次信息
	TOURNAMENTID_PACKET_TM_CSTMRankList    TOURNAMENTID = 2742 //排行榜
	TOURNAMENTID_PACKET_TM_SCTMRankList    TOURNAMENTID = 2743 //排行榜
	TOURNAMENTID_PACKET_TM_CSSignRace      TOURNAMENTID = 2744 //报名请求
	TOURNAMENTID_PACKET_TM_SCSignRace      TOURNAMENTID = 2745 //报名返回
	TOURNAMENTID_PACKET_TM_SCSyncSignNum   TOURNAMENTID = 2746 //报名人数更新
	TOURNAMENTID_PACKET_TM_SCPromotionInfo TOURNAMENTID = 2747 //晋级信息
	TOURNAMENTID_PACKET_TM_SCTMStart       TOURNAMENTID = 2748 //比赛开始
	TOURNAMENTID_PACKET_TM_SCTMStop        TOURNAMENTID = 2750 //比赛结束
	TOURNAMENTID_PACKET_TM_CSTMSeasonInfo  TOURNAMENTID = 2751 //赛季信息
	TOURNAMENTID_PACKET_TM_SCTMSeasonInfo  TOURNAMENTID = 2752 //赛季信息
	TOURNAMENTID_PACKET_TM_CSTMSeasonRank  TOURNAMENTID = 2753 //赛季排行榜
	TOURNAMENTID_PACKET_TM_SCTMSeasonRank  TOURNAMENTID = 2754 //赛季排行榜
	TOURNAMENTID_PACKET_TM_CSTMSeasonAward TOURNAMENTID = 2755 //领取赛季奖励
	TOURNAMENTID_PACKET_TM_SCTMSeasonAward TOURNAMENTID = 2756 //领取赛季奖励
)

// Enum value maps for TOURNAMENTID.
var (
	TOURNAMENTID_name = map[int32]string{
		0:    "PACKET_TM_ZERO",
		2740: "PACKET_TM_CSTMInfo",
		2741: "PACKET_TM_SCTMInfos",
		2742: "PACKET_TM_CSTMRankList",
		2743: "PACKET_TM_SCTMRankList",
		2744: "PACKET_TM_CSSignRace",
		2745: "PACKET_TM_SCSignRace",
		2746: "PACKET_TM_SCSyncSignNum",
		2747: "PACKET_TM_SCPromotionInfo",
		2748: "PACKET_TM_SCTMStart",
		2750: "PACKET_TM_SCTMStop",
		2751: "PACKET_TM_CSTMSeasonInfo",
		2752: "PACKET_TM_SCTMSeasonInfo",
		2753: "PACKET_TM_CSTMSeasonRank",
		2754: "PACKET_TM_SCTMSeasonRank",
		2755: "PACKET_TM_CSTMSeasonAward",
		2756: "PACKET_TM_SCTMSeasonAward",
	}
	TOURNAMENTID_value = map[string]int32{
		"PACKET_TM_ZERO":            0,
		"PACKET_TM_CSTMInfo":        2740,
		"PACKET_TM_SCTMInfos":       2741,
		"PACKET_TM_CSTMRankList":    2742,
		"PACKET_TM_SCTMRankList":    2743,
		"PACKET_TM_CSSignRace":      2744,
		"PACKET_TM_SCSignRace":      2745,
		"PACKET_TM_SCSyncSignNum":   2746,
		"PACKET_TM_SCPromotionInfo": 2747,
		"PACKET_TM_SCTMStart":       2748,
		"PACKET_TM_SCTMStop":        2750,
		"PACKET_TM_CSTMSeasonInfo":  2751,
		"PACKET_TM_SCTMSeasonInfo":  2752,
		"PACKET_TM_CSTMSeasonRank":  2753,
		"PACKET_TM_SCTMSeasonRank":  2754,
		"PACKET_TM_CSTMSeasonAward": 2755,
		"PACKET_TM_SCTMSeasonAward": 2756,
	}
)

func (x TOURNAMENTID) Enum() *TOURNAMENTID {
	p := new(TOURNAMENTID)
	*p = x
	return p
}

func (x TOURNAMENTID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TOURNAMENTID) Descriptor() protoreflect.EnumDescriptor {
	return file_tournament_proto_enumTypes[0].Descriptor()
}

func (TOURNAMENTID) Type() protoreflect.EnumType {
	return &file_tournament_proto_enumTypes[0]
}

func (x TOURNAMENTID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TOURNAMENTID.Descriptor instead.
func (TOURNAMENTID) EnumDescriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

//比赛场场次
//PACKET_TM_CSTMInfo
type CSTMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSTMInfo) Reset() {
	*x = CSTMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTMInfo) ProtoMessage() {}

func (x *CSTMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTMInfo.ProtoReflect.Descriptor instead.
func (*CSTMInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{0}
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  int32  `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`   // 物品ID
	ItemNum int32  `protobuf:"varint,2,opt,name=ItemNum,proto3" json:"ItemNum,omitempty"` // 物品数量
	Name    string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`        // 名称
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{1}
}

func (x *ItemInfo) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemInfo) GetItemNum() int32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *ItemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MatchInfoAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInfo  []*ItemInfo `protobuf:"bytes,1,rep,name=ItemInfo,proto3" json:"ItemInfo,omitempty"`    // 道具
	Coin      int64       `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`           // 金币
	Diamond   int64       `protobuf:"varint,3,opt,name=Diamond,proto3" json:"Diamond,omitempty"`     // 钻石、
	UpLimit   int32       `protobuf:"varint,4,opt,name=UpLimit,proto3" json:"UpLimit,omitempty"`     // 名次上行
	DownLimit int32       `protobuf:"varint,5,opt,name=DownLimit,proto3" json:"DownLimit,omitempty"` // 名次下行 例如 第一名为 UpLimit 1,DownLimit 1 4~10为 UpLimit 4,DownLimit 10
}

func (x *MatchInfoAward) Reset() {
	*x = MatchInfoAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfoAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoAward) ProtoMessage() {}

func (x *MatchInfoAward) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoAward.ProtoReflect.Descriptor instead.
func (*MatchInfoAward) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{2}
}

func (x *MatchInfoAward) GetItemInfo() []*ItemInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *MatchInfoAward) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MatchInfoAward) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *MatchInfoAward) GetUpLimit() int32 {
	if x != nil {
		return x.UpLimit
	}
	return 0
}

func (x *MatchInfoAward) GetDownLimit() int32 {
	if x != nil {
		return x.DownLimit
	}
	return 0
}

type TMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 // 序号
	GameFreeId        int32             `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`                 // 玩法类型 所用的玩法ID
	MatchType         int32             `protobuf:"varint,3,opt,name=MatchType,proto3" json:"MatchType,omitempty"`                   // 比赛类型 1.锦标赛 2.冠军赛
	MatchName         string            `protobuf:"bytes,4,opt,name=MatchName,proto3" json:"MatchName,omitempty"`                    // 场次名字
	MatchNumebr       int32             `protobuf:"varint,5,opt,name=MatchNumebr,proto3" json:"MatchNumebr,omitempty"`               // 报名人数
	MatchPromotion    []int32           `protobuf:"varint,6,rep,packed,name=MatchPromotion,proto3" json:"MatchPromotion,omitempty"`  // 晋级方式
	MatchSwitch       int32             `protobuf:"varint,7,opt,name=MatchSwitch,proto3" json:"MatchSwitch,omitempty"`               // 1.开启 2.关闭
	Award             []*MatchInfoAward `protobuf:"bytes,8,rep,name=Award,proto3" json:"Award,omitempty"`                            // 比赛奖励
	SignupCostCoin    int64             `protobuf:"varint,9,opt,name=SignupCostCoin,proto3" json:"SignupCostCoin,omitempty"`         //报名消耗金币
	SignupCostDiamond int64             `protobuf:"varint,10,opt,name=SignupCostDiamond,proto3" json:"SignupCostDiamond,omitempty"`  //报名消耗钻石
	SignupCostItem    *ItemInfo         `protobuf:"bytes,11,opt,name=SignupCostItem,proto3" json:"SignupCostItem,omitempty"`         //报名消耗道具
	MatchTimeType     int32             `protobuf:"varint,12,opt,name=MatchTimeType,proto3" json:"MatchTimeType,omitempty"`          //冠军赛时效类型 0无时效 1重复时间段 2一次性时间段
	MatchTimeWeek     []int32           `protobuf:"varint,13,rep,packed,name=MatchTimeWeek,proto3" json:"MatchTimeWeek,omitempty"`   //周几
	MatchTimeStartHMS int32             `protobuf:"varint,14,opt,name=MatchTimeStartHMS,proto3" json:"MatchTimeStartHMS,omitempty"`  //几点开始（时*10000 + 分*100 + 秒）
	MatchTimeEndHMS   int32             `protobuf:"varint,15,opt,name=MatchTimeEndHMS,proto3" json:"MatchTimeEndHMS,omitempty"`      //几点结束（时*10000 + 分*100 + 秒）
	MatchTimeStamp    []int64           `protobuf:"varint,16,rep,packed,name=MatchTimeStamp,proto3" json:"MatchTimeStamp,omitempty"` //哪一天（时间戳：开始时间戳-结束时间戳）
	TitleURL          string            `protobuf:"bytes,17,opt,name=TitleURL,proto3" json:"TitleURL,omitempty"`                     //比赛标题后台自定义
	AwardShow         string            `protobuf:"bytes,18,opt,name=AwardShow,proto3" json:"AwardShow,omitempty"`                   //主要奖励展示
	Rule              string            `protobuf:"bytes,19,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *TMInfo) Reset() {
	*x = TMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMInfo) ProtoMessage() {}

func (x *TMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMInfo.ProtoReflect.Descriptor instead.
func (*TMInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{3}
}

func (x *TMInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TMInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *TMInfo) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *TMInfo) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *TMInfo) GetMatchNumebr() int32 {
	if x != nil {
		return x.MatchNumebr
	}
	return 0
}

func (x *TMInfo) GetMatchPromotion() []int32 {
	if x != nil {
		return x.MatchPromotion
	}
	return nil
}

func (x *TMInfo) GetMatchSwitch() int32 {
	if x != nil {
		return x.MatchSwitch
	}
	return 0
}

func (x *TMInfo) GetAward() []*MatchInfoAward {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *TMInfo) GetSignupCostCoin() int64 {
	if x != nil {
		return x.SignupCostCoin
	}
	return 0
}

func (x *TMInfo) GetSignupCostDiamond() int64 {
	if x != nil {
		return x.SignupCostDiamond
	}
	return 0
}

func (x *TMInfo) GetSignupCostItem() *ItemInfo {
	if x != nil {
		return x.SignupCostItem
	}
	return nil
}

func (x *TMInfo) GetMatchTimeType() int32 {
	if x != nil {
		return x.MatchTimeType
	}
	return 0
}

func (x *TMInfo) GetMatchTimeWeek() []int32 {
	if x != nil {
		return x.MatchTimeWeek
	}
	return nil
}

func (x *TMInfo) GetMatchTimeStartHMS() int32 {
	if x != nil {
		return x.MatchTimeStartHMS
	}
	return 0
}

func (x *TMInfo) GetMatchTimeEndHMS() int32 {
	if x != nil {
		return x.MatchTimeEndHMS
	}
	return 0
}

func (x *TMInfo) GetMatchTimeStamp() []int64 {
	if x != nil {
		return x.MatchTimeStamp
	}
	return nil
}

func (x *TMInfo) GetTitleURL() string {
	if x != nil {
		return x.TitleURL
	}
	return ""
}

func (x *TMInfo) GetAwardShow() string {
	if x != nil {
		return x.AwardShow
	}
	return ""
}

func (x *TMInfo) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

//比赛场场次 激战人数刷新也走这个
//PACKET_TM_SCTMInfos
type SCTMInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMInfo []*TMInfo `protobuf:"bytes,1,rep,name=TMInfo,proto3" json:"TMInfo,omitempty"` //比赛场场次信息
}

func (x *SCTMInfos) Reset() {
	*x = SCTMInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMInfos) ProtoMessage() {}

func (x *SCTMInfos) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMInfos.ProtoReflect.Descriptor instead.
func (*SCTMInfos) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{4}
}

func (x *SCTMInfos) GetTMInfo() []*TMInfo {
	if x != nil {
		return x.TMInfo
	}
	return nil
}

//单场次排行榜
//PACKET_TM_CSTMRankList
type CSTMRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMId int32 `protobuf:"varint,1,opt,name=TMId,proto3" json:"TMId,omitempty"` //比赛场次id
}

func (x *CSTMRankList) Reset() {
	*x = CSTMRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTMRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTMRankList) ProtoMessage() {}

func (x *CSTMRankList) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTMRankList.ProtoReflect.Descriptor instead.
func (*CSTMRankList) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{5}
}

func (x *CSTMRankList) GetTMId() int32 {
	if x != nil {
		return x.TMId
	}
	return 0
}

type TMRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankId    int32  `protobuf:"varint,1,opt,name=RankId,proto3" json:"RankId,omitempty"`       //名次
	RankName  string `protobuf:"bytes,2,opt,name=RankName,proto3" json:"RankName,omitempty"`    //名字
	WinnerNum int32  `protobuf:"varint,3,opt,name=WinnerNum,proto3" json:"WinnerNum,omitempty"` //夺冠次数
}

func (x *TMRank) Reset() {
	*x = TMRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMRank) ProtoMessage() {}

func (x *TMRank) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMRank.ProtoReflect.Descriptor instead.
func (*TMRank) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{6}
}

func (x *TMRank) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *TMRank) GetRankName() string {
	if x != nil {
		return x.RankName
	}
	return ""
}

func (x *TMRank) GetWinnerNum() int32 {
	if x != nil {
		return x.WinnerNum
	}
	return 0
}

//PACKET_TM_CSTMRankList
type SCTMRankList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMId      int32     `protobuf:"varint,1,opt,name=TMId,proto3" json:"TMId,omitempty"`          //比赛场次id
	TimeRange string    `protobuf:"bytes,2,opt,name=TimeRange,proto3" json:"TimeRange,omitempty"` //时间周期
	TMRank    []*TMRank `protobuf:"bytes,3,rep,name=TMRank,proto3" json:"TMRank,omitempty"`       //排行榜
}

func (x *SCTMRankList) Reset() {
	*x = SCTMRankList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMRankList) ProtoMessage() {}

func (x *SCTMRankList) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMRankList.ProtoReflect.Descriptor instead.
func (*SCTMRankList) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{7}
}

func (x *SCTMRankList) GetTMId() int32 {
	if x != nil {
		return x.TMId
	}
	return 0
}

func (x *SCTMRankList) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *SCTMRankList) GetTMRank() []*TMRank {
	if x != nil {
		return x.TMRank
	}
	return nil
}

//报名
//PACKET_TM_CSSignRace
type CSSignRace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"` //0.报名 1.取消报名
	TMId   int32 `protobuf:"varint,2,opt,name=TMId,proto3" json:"TMId,omitempty"`     //报名场次 --比赛配置id
}

func (x *CSSignRace) Reset() {
	*x = CSSignRace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSignRace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSignRace) ProtoMessage() {}

func (x *CSSignRace) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSignRace.ProtoReflect.Descriptor instead.
func (*CSSignRace) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{8}
}

func (x *CSSignRace) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSSignRace) GetTMId() int32 {
	if x != nil {
		return x.TMId
	}
	return 0
}

//PACKET_TM_SCSignRace
type SCSignRace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode  int32 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`   //0.报名 1.取消报名
	RetCode int32 `protobuf:"varint,2,opt,name=RetCode,proto3" json:"RetCode,omitempty"` //返回结果
}

func (x *SCSignRace) Reset() {
	*x = SCSignRace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSignRace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSignRace) ProtoMessage() {}

func (x *SCSignRace) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSignRace.ProtoReflect.Descriptor instead.
func (*SCSignRace) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{9}
}

func (x *SCSignRace) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCSignRace) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

//报名人数更新  --报名那个场次通知那个 暂时只能报名一个场次
//PACKET_TM_SCSyncSignNum
type SCSyncSignNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignNum    int32 `protobuf:"varint,1,opt,name=SignNum,proto3" json:"SignNum,omitempty"`       //当前报名人数
	MaxSignNum int32 `protobuf:"varint,2,opt,name=MaxSignNum,proto3" json:"MaxSignNum,omitempty"` //最大报名人数
}

func (x *SCSyncSignNum) Reset() {
	*x = SCSyncSignNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSyncSignNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSyncSignNum) ProtoMessage() {}

func (x *SCSyncSignNum) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSyncSignNum.ProtoReflect.Descriptor instead.
func (*SCSyncSignNum) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{10}
}

func (x *SCSyncSignNum) GetSignNum() int32 {
	if x != nil {
		return x.SignNum
	}
	return 0
}

func (x *SCSyncSignNum) GetMaxSignNum() int32 {
	if x != nil {
		return x.MaxSignNum
	}
	return 0
}

//比赛开始
//PACKET_TM_SCTMStart
type SCTMStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId int32 `protobuf:"varint,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
}

func (x *SCTMStart) Reset() {
	*x = SCTMStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMStart) ProtoMessage() {}

func (x *SCTMStart) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMStart.ProtoReflect.Descriptor instead.
func (*SCTMStart) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{11}
}

func (x *SCTMStart) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

//比赛结束:1.淘汰 2.决赛结束 3.非正常终止
//PACKET_TM_SCTMStop
type SCTMStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId int32 `protobuf:"varint,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
}

func (x *SCTMStop) Reset() {
	*x = SCTMStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMStop) ProtoMessage() {}

func (x *SCTMStop) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMStop.ProtoReflect.Descriptor instead.
func (*SCTMStop) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{12}
}

func (x *SCTMStop) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type RankAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInfo []*ItemInfo `protobuf:"bytes,1,rep,name=ItemInfo,proto3" json:"ItemInfo,omitempty"` // 道具
	Coin     int64       `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`        // 金币
	Diamond  int64       `protobuf:"varint,3,opt,name=Diamond,proto3" json:"Diamond,omitempty"`  // 钻石
}

func (x *RankAward) Reset() {
	*x = RankAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankAward) ProtoMessage() {}

func (x *RankAward) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankAward.ProtoReflect.Descriptor instead.
func (*RankAward) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{13}
}

func (x *RankAward) GetItemInfo() []*ItemInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *RankAward) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RankAward) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

//晋级数据更新
//PACKET_TM_SCPromotionInfo
type SCPromotionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode        int32           `protobuf:"varint,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`                                                                                        //0.晋级等待匹配 1.失败退出 2.等待判断是否晋级
	Round          int32           `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`                                                                                            //当前第几轮
	RoundCoin      int32           `protobuf:"varint,3,opt,name=RoundCoin,proto3" json:"RoundCoin,omitempty"`                                                                                    //晋级奖励金币
	RankId         int32           `protobuf:"varint,4,opt,name=RankId,proto3" json:"RankId,omitempty"`                                                                                          //当前排名
	Record         map[int32]int32 `protobuf:"bytes,5,rep,name=Record,proto3" json:"Record,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //战绩 key：-1输 0 和 1赢 value次数
	MatchId        int32           `protobuf:"varint,6,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	MatchPromotion []int32         `protobuf:"varint,7,rep,packed,name=MatchPromotion,proto3" json:"MatchPromotion,omitempty"` //晋级方式
	RankAward      *RankAward      `protobuf:"bytes,8,opt,name=RankAward,proto3" json:"RankAward,omitempty"`                   //排名奖励
}

func (x *SCPromotionInfo) Reset() {
	*x = SCPromotionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCPromotionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPromotionInfo) ProtoMessage() {}

func (x *SCPromotionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPromotionInfo.ProtoReflect.Descriptor instead.
func (*SCPromotionInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{14}
}

func (x *SCPromotionInfo) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *SCPromotionInfo) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SCPromotionInfo) GetRoundCoin() int32 {
	if x != nil {
		return x.RoundCoin
	}
	return 0
}

func (x *SCPromotionInfo) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *SCPromotionInfo) GetRecord() map[int32]int32 {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *SCPromotionInfo) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SCPromotionInfo) GetMatchPromotion() []int32 {
	if x != nil {
		return x.MatchPromotion
	}
	return nil
}

func (x *SCPromotionInfo) GetRankAward() *RankAward {
	if x != nil {
		return x.RankAward
	}
	return nil
}

//赛季信息
type CSTMSeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSTMSeasonInfo) Reset() {
	*x = CSTMSeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTMSeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTMSeasonInfo) ProtoMessage() {}

func (x *CSTMSeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTMSeasonInfo.ProtoReflect.Descriptor instead.
func (*CSTMSeasonInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{15}
}

type SCTMSeasonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                  //当前赛季
	SeasonTimeStamp []int64 `protobuf:"varint,2,rep,packed,name=SeasonTimeStamp,proto3" json:"SeasonTimeStamp,omitempty"` //（时间戳：开始时间戳-结束时间戳）
	Lv              int32   `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`                                  //段位
	LastLv          int32   `protobuf:"varint,4,opt,name=LastLv,proto3" json:"LastLv,omitempty"`                          //上赛季段位
	IsAward         bool    `protobuf:"varint,5,opt,name=IsAward,proto3" json:"IsAward,omitempty"`                        //上赛季是否领奖
}

func (x *SCTMSeasonInfo) Reset() {
	*x = SCTMSeasonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMSeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMSeasonInfo) ProtoMessage() {}

func (x *SCTMSeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMSeasonInfo.ProtoReflect.Descriptor instead.
func (*SCTMSeasonInfo) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{16}
}

func (x *SCTMSeasonInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SCTMSeasonInfo) GetSeasonTimeStamp() []int64 {
	if x != nil {
		return x.SeasonTimeStamp
	}
	return nil
}

func (x *SCTMSeasonInfo) GetLv() int32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

func (x *SCTMSeasonInfo) GetLastLv() int32 {
	if x != nil {
		return x.LastLv
	}
	return 0
}

func (x *SCTMSeasonInfo) GetIsAward() bool {
	if x != nil {
		return x.IsAward
	}
	return false
}

//赛季排行榜
type SeasonRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid int32  `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Lv   int32  `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`     //段位
	Rank int32  `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank,omitempty"` //段位排名
}

func (x *SeasonRank) Reset() {
	*x = SeasonRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRank) ProtoMessage() {}

func (x *SeasonRank) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRank.ProtoReflect.Descriptor instead.
func (*SeasonRank) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{17}
}

func (x *SeasonRank) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *SeasonRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeasonRank) GetLv() int32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

func (x *SeasonRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type CSTMSeasonRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSTMSeasonRank) Reset() {
	*x = CSTMSeasonRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTMSeasonRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTMSeasonRank) ProtoMessage() {}

func (x *CSTMSeasonRank) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTMSeasonRank.ProtoReflect.Descriptor instead.
func (*CSTMSeasonRank) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{18}
}

type SCTMSeasonRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReasonRanks []*SeasonRank `protobuf:"bytes,6,rep,name=ReasonRanks,proto3" json:"ReasonRanks,omitempty"` //排行榜 前100名 (包含自己)
}

func (x *SCTMSeasonRank) Reset() {
	*x = SCTMSeasonRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMSeasonRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMSeasonRank) ProtoMessage() {}

func (x *SCTMSeasonRank) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMSeasonRank.ProtoReflect.Descriptor instead.
func (*SCTMSeasonRank) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{19}
}

func (x *SCTMSeasonRank) GetReasonRanks() []*SeasonRank {
	if x != nil {
		return x.ReasonRanks
	}
	return nil
}

//领取赛季奖励
type CSTMSeasonAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lv int32 `protobuf:"varint,1,opt,name=Lv,proto3" json:"Lv,omitempty"` //段位
}

func (x *CSTMSeasonAward) Reset() {
	*x = CSTMSeasonAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSTMSeasonAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSTMSeasonAward) ProtoMessage() {}

func (x *CSTMSeasonAward) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSTMSeasonAward.ProtoReflect.Descriptor instead.
func (*CSTMSeasonAward) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{20}
}

func (x *CSTMSeasonAward) GetLv() int32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

type SCTMSeasonAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lv   int32 `protobuf:"varint,1,opt,name=Lv,proto3" json:"Lv,omitempty"`     //段位
	Code int32 `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"` //0成功 1失败
}

func (x *SCTMSeasonAward) Reset() {
	*x = SCTMSeasonAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tournament_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCTMSeasonAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTMSeasonAward) ProtoMessage() {}

func (x *SCTMSeasonAward) ProtoReflect() protoreflect.Message {
	mi := &file_tournament_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTMSeasonAward.ProtoReflect.Descriptor instead.
func (*SCTMSeasonAward) Descriptor() ([]byte, []int) {
	return file_tournament_proto_rawDescGZIP(), []int{21}
}

func (x *SCTMSeasonAward) GetLv() int32 {
	if x != nil {
		return x.Lv
	}
	return 0
}

func (x *SCTMSeasonAward) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_tournament_proto protoreflect.FileDescriptor

var file_tournament_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x0a,
	0x0a, 0x08, 0x43, 0x53, 0x54, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x6f, 0x77,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x6f,
	0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x05, 0x0a, 0x06, 0x54, 0x4d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x62, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x62, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f,
	0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2c, 0x0a, 0x11,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x4d,
	0x53, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x4d, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x48, 0x4d, 0x53, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x48, 0x4d, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x53, 0x43,
	0x54, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x54, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x54, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x53, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x06, 0x54, 0x4d, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x22, 0x6c, 0x0a, 0x0c, 0x53, 0x43, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x54, 0x4d, 0x52, 0x61, 0x6e,
	0x6b, 0x22, 0x38, 0x0a, 0x0a, 0x43, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x4d, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0a, 0x53,
	0x43, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x53,
	0x43, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x69, 0x67, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x69, 0x67, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x67,
	0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x53,
	0x69, 0x67, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x25, 0x0a, 0x09, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x24, 0x0a,
	0x08, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x30, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x22, 0xea, 0x02, 0x0a, 0x0f, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x09, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a,
	0x0e, 0x43, 0x53, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x8c, 0x01, 0x0a, 0x0e, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x4c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4c, 0x76, 0x12, 0x16, 0x0a, 0x06,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x22, 0x58,
	0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x4c, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x53, 0x54, 0x4d,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x43,
	0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0b,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0b, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x43, 0x53, 0x54, 0x4d, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x4c, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4c, 0x76, 0x22, 0x35, 0x0a, 0x0f, 0x53, 0x43, 0x54,
	0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x4c, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4c, 0x76, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x2a, 0xf2, 0x03, 0x0a, 0x0c, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x4d, 0x5f, 0x43, 0x53, 0x54, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb4, 0x15, 0x12, 0x18,
	0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x10, 0xb5, 0x15, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x43, 0x53, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xb6, 0x15, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xb7, 0x15, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f,
	0x43, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x61, 0x63, 0x65, 0x10, 0xb8, 0x15, 0x12, 0x19, 0x0a,
	0x14, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x61, 0x63, 0x65, 0x10, 0xb9, 0x15, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x67, 0x6e,
	0x4e, 0x75, 0x6d, 0x10, 0xba, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0xbb, 0x15, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xbc, 0x15,
	0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43,
	0x54, 0x4d, 0x53, 0x74, 0x6f, 0x70, 0x10, 0xbe, 0x15, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x43, 0x53, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xbf, 0x15, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0xc0, 0x15, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x54, 0x4d, 0x5f, 0x43, 0x53, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x6b, 0x10, 0xc1, 0x15, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x10, 0xc2, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x4d, 0x5f, 0x43, 0x53, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x10, 0xc3, 0x15, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x4d, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x10, 0xc4, 0x15, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x3b, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tournament_proto_rawDescOnce sync.Once
	file_tournament_proto_rawDescData = file_tournament_proto_rawDesc
)

func file_tournament_proto_rawDescGZIP() []byte {
	file_tournament_proto_rawDescOnce.Do(func() {
		file_tournament_proto_rawDescData = protoimpl.X.CompressGZIP(file_tournament_proto_rawDescData)
	})
	return file_tournament_proto_rawDescData
}

var file_tournament_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tournament_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_tournament_proto_goTypes = []interface{}{
	(TOURNAMENTID)(0),       // 0: tournament.TOURNAMENTID
	(*CSTMInfo)(nil),        // 1: tournament.CSTMInfo
	(*ItemInfo)(nil),        // 2: tournament.ItemInfo
	(*MatchInfoAward)(nil),  // 3: tournament.MatchInfoAward
	(*TMInfo)(nil),          // 4: tournament.TMInfo
	(*SCTMInfos)(nil),       // 5: tournament.SCTMInfos
	(*CSTMRankList)(nil),    // 6: tournament.CSTMRankList
	(*TMRank)(nil),          // 7: tournament.TMRank
	(*SCTMRankList)(nil),    // 8: tournament.SCTMRankList
	(*CSSignRace)(nil),      // 9: tournament.CSSignRace
	(*SCSignRace)(nil),      // 10: tournament.SCSignRace
	(*SCSyncSignNum)(nil),   // 11: tournament.SCSyncSignNum
	(*SCTMStart)(nil),       // 12: tournament.SCTMStart
	(*SCTMStop)(nil),        // 13: tournament.SCTMStop
	(*RankAward)(nil),       // 14: tournament.RankAward
	(*SCPromotionInfo)(nil), // 15: tournament.SCPromotionInfo
	(*CSTMSeasonInfo)(nil),  // 16: tournament.CSTMSeasonInfo
	(*SCTMSeasonInfo)(nil),  // 17: tournament.SCTMSeasonInfo
	(*SeasonRank)(nil),      // 18: tournament.SeasonRank
	(*CSTMSeasonRank)(nil),  // 19: tournament.CSTMSeasonRank
	(*SCTMSeasonRank)(nil),  // 20: tournament.SCTMSeasonRank
	(*CSTMSeasonAward)(nil), // 21: tournament.CSTMSeasonAward
	(*SCTMSeasonAward)(nil), // 22: tournament.SCTMSeasonAward
	nil, // 23: tournament.SCPromotionInfo.RecordEntry
}
var file_tournament_proto_depIdxs = []int32{
	2,  // 0: tournament.MatchInfoAward.ItemInfo:type_name -> tournament.ItemInfo
	3,  // 1: tournament.TMInfo.Award:type_name -> tournament.MatchInfoAward
	2,  // 2: tournament.TMInfo.SignupCostItem:type_name -> tournament.ItemInfo
	4,  // 3: tournament.SCTMInfos.TMInfo:type_name -> tournament.TMInfo
	7,  // 4: tournament.SCTMRankList.TMRank:type_name -> tournament.TMRank
	2,  // 5: tournament.RankAward.ItemInfo:type_name -> tournament.ItemInfo
	23, // 6: tournament.SCPromotionInfo.Record:type_name -> tournament.SCPromotionInfo.RecordEntry
	14, // 7: tournament.SCPromotionInfo.RankAward:type_name -> tournament.RankAward
	18, // 8: tournament.SCTMSeasonRank.ReasonRanks:type_name -> tournament.SeasonRank
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tournament_proto_init() }
func file_tournament_proto_init() {
	if File_tournament_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tournament_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfoAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTMRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMRankList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSignRace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSignRace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSyncSignNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCPromotionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTMSeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMSeasonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTMSeasonRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMSeasonRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSTMSeasonAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tournament_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCTMSeasonAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tournament_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tournament_proto_goTypes,
		DependencyIndexes: file_tournament_proto_depIdxs,
		EnumInfos:         file_tournament_proto_enumTypes,
		MessageInfos:      file_tournament_proto_msgTypes,
	}.Build()
	File_tournament_proto = out.File
	file_tournament_proto_rawDesc = nil
	file_tournament_proto_goTypes = nil
	file_tournament_proto_depIdxs = nil
}
