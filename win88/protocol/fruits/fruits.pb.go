// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: fruits.proto

package fruits

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//fruits
//水果拉霸
type FruitsPID int32

const (
	FruitsPID_PACKET_FRUITS_ZERO               FruitsPID = 0    // 弃用消息号
	FruitsPID_PACKET_FRUITS_SCFruitsRoomInfo   FruitsPID = 5490 //房间信息
	FruitsPID_PACKET_FRUITS_CSFruitsOp         FruitsPID = 5491
	FruitsPID_PACKET_FRUITS_SCFruitsOp         FruitsPID = 5492
	FruitsPID_PACKET_FRUITS_SCFruitsRoomState  FruitsPID = 5493
	FruitsPID_PACKET_FRUITS_SCFruitsBilled     FruitsPID = 5494
	FruitsPID_PACKET_FRUITS_SCFruitsMaryBilled FruitsPID = 5495
	FruitsPID_PACKET_FRUITS_SCFruitsPrize      FruitsPID = 5496
)

// Enum value maps for FruitsPID.
var (
	FruitsPID_name = map[int32]string{
		0:    "PACKET_FRUITS_ZERO",
		5490: "PACKET_FRUITS_SCFruitsRoomInfo",
		5491: "PACKET_FRUITS_CSFruitsOp",
		5492: "PACKET_FRUITS_SCFruitsOp",
		5493: "PACKET_FRUITS_SCFruitsRoomState",
		5494: "PACKET_FRUITS_SCFruitsBilled",
		5495: "PACKET_FRUITS_SCFruitsMaryBilled",
		5496: "PACKET_FRUITS_SCFruitsPrize",
	}
	FruitsPID_value = map[string]int32{
		"PACKET_FRUITS_ZERO":               0,
		"PACKET_FRUITS_SCFruitsRoomInfo":   5490,
		"PACKET_FRUITS_CSFruitsOp":         5491,
		"PACKET_FRUITS_SCFruitsOp":         5492,
		"PACKET_FRUITS_SCFruitsRoomState":  5493,
		"PACKET_FRUITS_SCFruitsBilled":     5494,
		"PACKET_FRUITS_SCFruitsMaryBilled": 5495,
		"PACKET_FRUITS_SCFruitsPrize":      5496,
	}
)

func (x FruitsPID) Enum() *FruitsPID {
	p := new(FruitsPID)
	*p = x
	return p
}

func (x FruitsPID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FruitsPID) Descriptor() protoreflect.EnumDescriptor {
	return file_fruits_proto_enumTypes[0].Descriptor()
}

func (FruitsPID) Type() protoreflect.EnumType {
	return &file_fruits_proto_enumTypes[0]
}

func (x FruitsPID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FruitsPID.Descriptor instead.
func (FruitsPID) EnumDescriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{0}
}

type FruitsPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	HeadOutLine int32    `protobuf:"varint,10,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,11,opt,name=VIP,proto3" json:"VIP,omitempty"`
}

func (x *FruitsPlayerData) Reset() {
	*x = FruitsPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FruitsPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FruitsPlayerData) ProtoMessage() {}

func (x *FruitsPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FruitsPlayerData.ProtoReflect.Descriptor instead.
func (*FruitsPlayerData) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{0}
}

func (x *FruitsPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FruitsPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *FruitsPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *FruitsPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *FruitsPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *FruitsPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *FruitsPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *FruitsPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *FruitsPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *FruitsPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *FruitsPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

type FruitsWinLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poss     []int32 `protobuf:"varint,1,rep,packed,name=Poss,proto3" json:"Poss,omitempty"`  //中奖 元素组(0-14)
	WinScore int64   `protobuf:"varint,2,opt,name=WinScore,proto3" json:"WinScore,omitempty"` //单线分数
	LineId   int32   `protobuf:"varint,3,opt,name=LineId,proto3" json:"LineId,omitempty"`     //线号
}

func (x *FruitsWinLine) Reset() {
	*x = FruitsWinLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FruitsWinLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FruitsWinLine) ProtoMessage() {}

func (x *FruitsWinLine) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FruitsWinLine.ProtoReflect.Descriptor instead.
func (*FruitsWinLine) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{1}
}

func (x *FruitsWinLine) GetPoss() []int32 {
	if x != nil {
		return x.Poss
	}
	return nil
}

func (x *FruitsWinLine) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *FruitsWinLine) GetLineId() int32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

//房间信息
//PACKET_FRUITS_SCFruitsRoomInfo
type SCFruitsRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     int32             `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"` //房间id
	GameFreeId int32             `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	GameId     int32             `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`            //游戏id
	RoomMode   int32             `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`        //游戏模式
	Params     []int32           `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`     //规则参数
	NumOfGames int32             `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`    //当前第几局
	State      int32             `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`              //房间当前状态
	ParamsEx   []int32           `protobuf:"varint,8,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"` //其他参数
	SceneType  int32             `protobuf:"varint,9,opt,name=SceneType,proto3" json:"SceneType,omitempty"`      //房间模式
	Player     *FruitsPlayerData `protobuf:"bytes,10,opt,name=Player,proto3" json:"Player,omitempty"`            //房间内的玩家信息
	///
	NowGameState  int32            `protobuf:"varint,11,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`   //当前模式
	BetIdx        int32            `protobuf:"varint,12,opt,name=BetIdx,proto3" json:"BetIdx,omitempty"`               //下注索引
	FreeTimes     int32            `protobuf:"varint,13,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`         //剩余免费次数
	MaryTimes     int32            `protobuf:"varint,14,opt,name=MaryTimes,proto3" json:"MaryTimes,omitempty"`         //剩余玛丽游戏次数
	MaryTotalWin  int64            `protobuf:"varint,15,opt,name=MaryTotalWin,proto3" json:"MaryTotalWin,omitempty"`   //玛丽游戏赢的金额
	Cards         []int32          `protobuf:"varint,16,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          //元素值
	MaryWinId     int32            `protobuf:"varint,17,opt,name=MaryWinId,proto3" json:"MaryWinId,omitempty"`         //玛丽游戏外围索引
	MaryCards     []int32          `protobuf:"varint,18,rep,packed,name=MaryCards,proto3" json:"MaryCards,omitempty"`  //玛丽游戏中间数组
	WinLineCoin   int64            `protobuf:"varint,19,opt,name=WinLineCoin,proto3" json:"WinLineCoin,omitempty"`     //线赢金额
	WinJackpot    int64            `protobuf:"varint,20,opt,name=WinJackpot,proto3" json:"WinJackpot,omitempty"`       //当局奖池爆奖
	WinEle777Coin int64            `protobuf:"varint,21,opt,name=WinEle777Coin,proto3" json:"WinEle777Coin,omitempty"` //Jack线钱
	FreeTotalWin  int64            `protobuf:"varint,22,opt,name=FreeTotalWin,proto3" json:"FreeTotalWin,omitempty"`   //免费赢的金额
	WinRate       int64            `protobuf:"varint,23,opt,name=WinRate,proto3" json:"WinRate,omitempty"`             //赢的倍率
	WinFreeTimes  int32            `protobuf:"varint,24,opt,name=WinFreeTimes,proto3" json:"WinFreeTimes,omitempty"`   //当局赢的免费次数
	WinLines      []*FruitsWinLine `protobuf:"bytes,25,rep,name=WinLines,proto3" json:"WinLines,omitempty"`            //中奖线
}

func (x *SCFruitsRoomInfo) Reset() {
	*x = SCFruitsRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsRoomInfo) ProtoMessage() {}

func (x *SCFruitsRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsRoomInfo.ProtoReflect.Descriptor instead.
func (*SCFruitsRoomInfo) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{2}
}

func (x *SCFruitsRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCFruitsRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCFruitsRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetPlayer() *FruitsPlayerData {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *SCFruitsRoomInfo) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetBetIdx() int32 {
	if x != nil {
		return x.BetIdx
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetMaryTimes() int32 {
	if x != nil {
		return x.MaryTimes
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetMaryTotalWin() int64 {
	if x != nil {
		return x.MaryTotalWin
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCFruitsRoomInfo) GetMaryWinId() int32 {
	if x != nil {
		return x.MaryWinId
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetMaryCards() []int32 {
	if x != nil {
		return x.MaryCards
	}
	return nil
}

func (x *SCFruitsRoomInfo) GetWinLineCoin() int64 {
	if x != nil {
		return x.WinLineCoin
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetWinJackpot() int64 {
	if x != nil {
		return x.WinJackpot
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetWinEle777Coin() int64 {
	if x != nil {
		return x.WinEle777Coin
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetFreeTotalWin() int64 {
	if x != nil {
		return x.FreeTotalWin
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetWinFreeTimes() int32 {
	if x != nil {
		return x.WinFreeTimes
	}
	return 0
}

func (x *SCFruitsRoomInfo) GetWinLines() []*FruitsWinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

//玩家操作
//PACKET_FRUITS_CSFruitsOp
type CSFruitsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0.旋转 1.切换
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数 下注索引编号
}

func (x *CSFruitsOp) Reset() {
	*x = CSFruitsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSFruitsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSFruitsOp) ProtoMessage() {}

func (x *CSFruitsOp) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSFruitsOp.ProtoReflect.Descriptor instead.
func (*CSFruitsOp) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{3}
}

func (x *CSFruitsOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSFruitsOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
//PACKET_FRUITS_SCFruitsOp
type SCFruitsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode    int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	OpRetCode int32   `protobuf:"varint,2,opt,name=OpRetCode,proto3" json:"OpRetCode,omitempty"`  //操作结果 1.金币不足 2.低于该值不能押注
	Params    []int64 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *SCFruitsOp) Reset() {
	*x = SCFruitsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsOp) ProtoMessage() {}

func (x *SCFruitsOp) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsOp.ProtoReflect.Descriptor instead.
func (*SCFruitsOp) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{4}
}

func (x *SCFruitsOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCFruitsOp) GetOpRetCode() int32 {
	if x != nil {
		return x.OpRetCode
	}
	return 0
}

func (x *SCFruitsOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间状态
//PACKET_FRUITS_SCFruitsRoomState
type SCFruitsRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCFruitsRoomState) Reset() {
	*x = SCFruitsRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsRoomState) ProtoMessage() {}

func (x *SCFruitsRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsRoomState.ProtoReflect.Descriptor instead.
func (*SCFruitsRoomState) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{5}
}

func (x *SCFruitsRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCFruitsRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCFruitsRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//PACKET_FRUITS_SCFruitsPrize
type SCFruitsPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizePool int64 `protobuf:"varint,1,opt,name=PrizePool,proto3" json:"PrizePool,omitempty"` //奖池
}

func (x *SCFruitsPrize) Reset() {
	*x = SCFruitsPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsPrize) ProtoMessage() {}

func (x *SCFruitsPrize) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsPrize.ProtoReflect.Descriptor instead.
func (*SCFruitsPrize) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{6}
}

func (x *SCFruitsPrize) GetPrizePool() int64 {
	if x != nil {
		return x.PrizePool
	}
	return 0
}

//PACKET_FRUITS_SCFruitsBilled
type SCFruitsBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowGameState  int32            `protobuf:"varint,1,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`    //当前游戏状态 0.正常 1.免费游戏 2.玛丽游戏
	BetIdx        int32            `protobuf:"varint,2,opt,name=BetIdx,proto3" json:"BetIdx,omitempty"`                //下注索引
	Coin          int64            `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`                    //当前身上的金币
	FreeTotalWin  int64            `protobuf:"varint,4,opt,name=FreeTotalWin,proto3" json:"FreeTotalWin,omitempty"`    //免费游戏获得金额
	Jackpot       int64            `protobuf:"varint,5,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`              //当前奖池金额
	WinJackpot    int64            `protobuf:"varint,6,opt,name=WinJackpot,proto3" json:"WinJackpot,omitempty"`        //当局奖池爆奖
	WinEle777Coin int64            `protobuf:"varint,7,opt,name=WinEle777Coin,proto3" json:"WinEle777Coin,omitempty"`  //线赢的金额
	WinRate       int64            `protobuf:"varint,8,opt,name=WinRate,proto3" json:"WinRate,omitempty"`              //线倍率
	Cards         []int32          `protobuf:"varint,9,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`           //元素
	WinLines      []*FruitsWinLine `protobuf:"bytes,10,rep,name=WinLines,proto3" json:"WinLines,omitempty"`            //中奖线
	FreeTimes     int32            `protobuf:"varint,11,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`         //剩余免费次数
	MaryFreeTimes int32            `protobuf:"varint,12,opt,name=MaryFreeTimes,proto3" json:"MaryFreeTimes,omitempty"` //剩余玛丽游戏次数
	WinFreeTimes  int32            `protobuf:"varint,13,opt,name=WinFreeTimes,proto3" json:"WinFreeTimes,omitempty"`   //当局获得的免费次数
	WinLineCoin   int64            `protobuf:"varint,14,opt,name=WinLineCoin,proto3" json:"WinLineCoin,omitempty"`     //当局获得的线钱
}

func (x *SCFruitsBilled) Reset() {
	*x = SCFruitsBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsBilled) ProtoMessage() {}

func (x *SCFruitsBilled) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsBilled.ProtoReflect.Descriptor instead.
func (*SCFruitsBilled) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{7}
}

func (x *SCFruitsBilled) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCFruitsBilled) GetBetIdx() int32 {
	if x != nil {
		return x.BetIdx
	}
	return 0
}

func (x *SCFruitsBilled) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCFruitsBilled) GetFreeTotalWin() int64 {
	if x != nil {
		return x.FreeTotalWin
	}
	return 0
}

func (x *SCFruitsBilled) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *SCFruitsBilled) GetWinJackpot() int64 {
	if x != nil {
		return x.WinJackpot
	}
	return 0
}

func (x *SCFruitsBilled) GetWinEle777Coin() int64 {
	if x != nil {
		return x.WinEle777Coin
	}
	return 0
}

func (x *SCFruitsBilled) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *SCFruitsBilled) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCFruitsBilled) GetWinLines() []*FruitsWinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *SCFruitsBilled) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCFruitsBilled) GetMaryFreeTimes() int32 {
	if x != nil {
		return x.MaryFreeTimes
	}
	return 0
}

func (x *SCFruitsBilled) GetWinFreeTimes() int32 {
	if x != nil {
		return x.WinFreeTimes
	}
	return 0
}

func (x *SCFruitsBilled) GetWinLineCoin() int64 {
	if x != nil {
		return x.WinLineCoin
	}
	return 0
}

//PACKET_FRUITS_SCFruitsMaryBilled
type SCFruitsMaryBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin          int64   `protobuf:"varint,1,opt,name=Coin,proto3" json:"Coin,omitempty"`                   //当局获得的免费次数
	FreeTotalWin  int64   `protobuf:"varint,2,opt,name=FreeTotalWin,proto3" json:"FreeTotalWin,omitempty"`   //免费游戏获得的金额
	MaryTotalWin  int64   `protobuf:"varint,3,opt,name=MaryTotalWin,proto3" json:"MaryTotalWin,omitempty"`   //玛丽游戏获得的金额
	MaryWinCoin   int64   `protobuf:"varint,4,opt,name=MaryWinCoin,proto3" json:"MaryWinCoin,omitempty"`     //玛丽游戏倍率金额
	MaryWinId     int32   `protobuf:"varint,5,opt,name=MaryWinId,proto3" json:"MaryWinId,omitempty"`         //外围索引
	MaryCards     []int32 `protobuf:"varint,6,rep,packed,name=MaryCards,proto3" json:"MaryCards,omitempty"`  //中间数组
	MaryFreeTimes int32   `protobuf:"varint,7,opt,name=MaryFreeTimes,proto3" json:"MaryFreeTimes,omitempty"` //玛丽游戏剩余次数
}

func (x *SCFruitsMaryBilled) Reset() {
	*x = SCFruitsMaryBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fruits_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCFruitsMaryBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCFruitsMaryBilled) ProtoMessage() {}

func (x *SCFruitsMaryBilled) ProtoReflect() protoreflect.Message {
	mi := &file_fruits_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCFruitsMaryBilled.ProtoReflect.Descriptor instead.
func (*SCFruitsMaryBilled) Descriptor() ([]byte, []int) {
	return file_fruits_proto_rawDescGZIP(), []int{8}
}

func (x *SCFruitsMaryBilled) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCFruitsMaryBilled) GetFreeTotalWin() int64 {
	if x != nil {
		return x.FreeTotalWin
	}
	return 0
}

func (x *SCFruitsMaryBilled) GetMaryTotalWin() int64 {
	if x != nil {
		return x.MaryTotalWin
	}
	return 0
}

func (x *SCFruitsMaryBilled) GetMaryWinCoin() int64 {
	if x != nil {
		return x.MaryWinCoin
	}
	return 0
}

func (x *SCFruitsMaryBilled) GetMaryWinId() int32 {
	if x != nil {
		return x.MaryWinId
	}
	return 0
}

func (x *SCFruitsMaryBilled) GetMaryCards() []int32 {
	if x != nil {
		return x.MaryCards
	}
	return nil
}

func (x *SCFruitsMaryBilled) GetMaryFreeTimes() int32 {
	if x != nil {
		return x.MaryFreeTimes
	}
	return 0
}

var File_fruits_proto protoreflect.FileDescriptor

var file_fruits_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x56, 0x49, 0x50, 0x22, 0x57, 0x0a, 0x0d, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x57, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x06, 0x0a,
	0x10, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x2e, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e,
	0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x65, 0x74, 0x49, 0x64, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x65, 0x74,
	0x49, 0x64, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72,
	0x79, 0x57, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61,
	0x72, 0x79, 0x57, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x79,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x69, 0x6e,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x45, 0x6c,
	0x65, 0x37, 0x37, 0x37, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x57, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x37, 0x37, 0x37, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x57,
	0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x57, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x73, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x43, 0x53, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x4f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x4f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x11,
	0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2d, 0x0a, 0x0d, 0x53,
	0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xd1, 0x03, 0x0a, 0x0e, 0x53,
	0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x42, 0x65, 0x74, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57,
	0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x57,
	0x69, 0x6e, 0x45, 0x6c, 0x65, 0x37, 0x37, 0x37, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x37, 0x37, 0x37, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x75,
	0x69, 0x74, 0x73, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x79, 0x46,
	0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x46,
	0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x57, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0xf4,
	0x01, 0x0a, 0x12, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x4d, 0x61, 0x72, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x57, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x2a, 0x98, 0x02, 0x0a, 0x09, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73,
	0x50, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52,
	0x55, 0x49, 0x54, 0x53, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1e, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xf2, 0x2a,
	0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54,
	0x53, 0x5f, 0x43, 0x53, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x4f, 0x70, 0x10, 0xf3, 0x2a, 0x12,
	0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x53,
	0x5f, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x4f, 0x70, 0x10, 0xf4, 0x2a, 0x12, 0x24,
	0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x53, 0x5f,
	0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0xf5, 0x2a, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46,
	0x52, 0x55, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x10, 0xf6, 0x2a, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x73, 0x4d, 0x61, 0x72, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0xf7, 0x2a, 0x12, 0x20,
	0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x53, 0x5f,
	0x53, 0x43, 0x46, 0x72, 0x75, 0x69, 0x74, 0x73, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x10, 0xf8, 0x2a,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x66, 0x72, 0x75, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fruits_proto_rawDescOnce sync.Once
	file_fruits_proto_rawDescData = file_fruits_proto_rawDesc
)

func file_fruits_proto_rawDescGZIP() []byte {
	file_fruits_proto_rawDescOnce.Do(func() {
		file_fruits_proto_rawDescData = protoimpl.X.CompressGZIP(file_fruits_proto_rawDescData)
	})
	return file_fruits_proto_rawDescData
}

var file_fruits_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fruits_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_fruits_proto_goTypes = []interface{}{
	(FruitsPID)(0),             // 0: fruits.FruitsPID
	(*FruitsPlayerData)(nil),   // 1: fruits.FruitsPlayerData
	(*FruitsWinLine)(nil),      // 2: fruits.FruitsWinLine
	(*SCFruitsRoomInfo)(nil),   // 3: fruits.SCFruitsRoomInfo
	(*CSFruitsOp)(nil),         // 4: fruits.CSFruitsOp
	(*SCFruitsOp)(nil),         // 5: fruits.SCFruitsOp
	(*SCFruitsRoomState)(nil),  // 6: fruits.SCFruitsRoomState
	(*SCFruitsPrize)(nil),      // 7: fruits.SCFruitsPrize
	(*SCFruitsBilled)(nil),     // 8: fruits.SCFruitsBilled
	(*SCFruitsMaryBilled)(nil), // 9: fruits.SCFruitsMaryBilled
}
var file_fruits_proto_depIdxs = []int32{
	1, // 0: fruits.SCFruitsRoomInfo.Player:type_name -> fruits.FruitsPlayerData
	2, // 1: fruits.SCFruitsRoomInfo.WinLines:type_name -> fruits.FruitsWinLine
	2, // 2: fruits.SCFruitsBilled.WinLines:type_name -> fruits.FruitsWinLine
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fruits_proto_init() }
func file_fruits_proto_init() {
	if File_fruits_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fruits_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FruitsPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FruitsWinLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSFruitsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fruits_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCFruitsMaryBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fruits_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fruits_proto_goTypes,
		DependencyIndexes: file_fruits_proto_depIdxs,
		EnumInfos:         file_fruits_proto_enumTypes,
		MessageInfos:      file_fruits_proto_msgTypes,
	}.Build()
	File_fruits_proto = out.File
	file_fruits_proto_rawDesc = nil
	file_fruits_proto_goTypes = nil
	file_fruits_proto_depIdxs = nil
}
