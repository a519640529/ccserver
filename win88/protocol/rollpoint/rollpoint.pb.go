// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: rollpoint.proto

package rollpoint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess OpResultCode = 0 //成功
	OpResultCode_OPRC_Error  OpResultCode = 1 //失败
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess": 0,
		"OPRC_Error":  1,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rollpoint_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_rollpoint_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{0}
}

//骰宝
//协议包ID
type RPPACKETID int32

const (
	RPPACKETID_PACKET_ROLLPOINT_ZERO   RPPACKETID = 0 // 弃用消息号
	RPPACKETID_ROLLPOINT_SC_ROOMINFO   RPPACKETID = 5430
	RPPACKETID_ROLLPOINT_SC_ROOMSTATE  RPPACKETID = 5431
	RPPACKETID_ROLLPOINT_CS_OP         RPPACKETID = 5432
	RPPACKETID_ROLLPOINT_SC_PUSHCOIN   RPPACKETID = 5433
	RPPACKETID_ROLLPOINT_SC_BILL       RPPACKETID = 5434
	RPPACKETID_ROLLPOINT_SC_PLAYERNUM  RPPACKETID = 5435
	RPPACKETID_ROLLPOINT_SC_COINLOG    RPPACKETID = 5436
	RPPACKETID_ROLLPOINT_SC_PLAYERLIST RPPACKETID = 5437 //玩家列表
	RPPACKETID_ROLLPOINT_SC_OP         RPPACKETID = 5438
)

// Enum value maps for RPPACKETID.
var (
	RPPACKETID_name = map[int32]string{
		0:    "PACKET_ROLLPOINT_ZERO",
		5430: "ROLLPOINT_SC_ROOMINFO",
		5431: "ROLLPOINT_SC_ROOMSTATE",
		5432: "ROLLPOINT_CS_OP",
		5433: "ROLLPOINT_SC_PUSHCOIN",
		5434: "ROLLPOINT_SC_BILL",
		5435: "ROLLPOINT_SC_PLAYERNUM",
		5436: "ROLLPOINT_SC_COINLOG",
		5437: "ROLLPOINT_SC_PLAYERLIST",
		5438: "ROLLPOINT_SC_OP",
	}
	RPPACKETID_value = map[string]int32{
		"PACKET_ROLLPOINT_ZERO":   0,
		"ROLLPOINT_SC_ROOMINFO":   5430,
		"ROLLPOINT_SC_ROOMSTATE":  5431,
		"ROLLPOINT_CS_OP":         5432,
		"ROLLPOINT_SC_PUSHCOIN":   5433,
		"ROLLPOINT_SC_BILL":       5434,
		"ROLLPOINT_SC_PLAYERNUM":  5435,
		"ROLLPOINT_SC_COINLOG":    5436,
		"ROLLPOINT_SC_PLAYERLIST": 5437,
		"ROLLPOINT_SC_OP":         5438,
	}
)

func (x RPPACKETID) Enum() *RPPACKETID {
	p := new(RPPACKETID)
	*p = x
	return p
}

func (x RPPACKETID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPPACKETID) Descriptor() protoreflect.EnumDescriptor {
	return file_rollpoint_proto_enumTypes[1].Descriptor()
}

func (RPPACKETID) Type() protoreflect.EnumType {
	return &file_rollpoint_proto_enumTypes[1]
}

func (x RPPACKETID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPPACKETID.Descriptor instead.
func (RPPACKETID) EnumDescriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{1}
}

type RollPointPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId        int32    `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Sex         int32    `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Head        int32    `protobuf:"varint,4,opt,name=Head,proto3" json:"Head,omitempty"`
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Params      []string `protobuf:"bytes,6,rep,name=Params,proto3" json:"Params,omitempty"`
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记 第一位:是否掉线(0:在线 1:掉线) 第二位:是否准备(0:未准备 1:已准备)
	Lately20Win int32    `protobuf:"varint,9,opt,name=Lately20Win,proto3" json:"Lately20Win,omitempty"`  //最近20局输赢 (赢的次数)
	Lately20Bet int32    `protobuf:"varint,10,opt,name=Lately20Bet,proto3" json:"Lately20Bet,omitempty"` //最近20局总下注
	HeadOutLine int32    `protobuf:"varint,11,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,12,opt,name=VIP,proto3" json:"VIP,omitempty"`
	City        string   `protobuf:"bytes,13,opt,name=City,proto3" json:"City,omitempty"` //城市
}

func (x *RollPointPlayer) Reset() {
	*x = RollPointPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollPointPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollPointPlayer) ProtoMessage() {}

func (x *RollPointPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollPointPlayer.ProtoReflect.Descriptor instead.
func (*RollPointPlayer) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{0}
}

func (x *RollPointPlayer) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *RollPointPlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollPointPlayer) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RollPointPlayer) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *RollPointPlayer) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RollPointPlayer) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RollPointPlayer) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RollPointPlayer) GetLately20Win() int32 {
	if x != nil {
		return x.Lately20Win
	}
	return 0
}

func (x *RollPointPlayer) GetLately20Bet() int32 {
	if x != nil {
		return x.Lately20Bet
	}
	return 0
}

func (x *RollPointPlayer) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *RollPointPlayer) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *RollPointPlayer) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type RollPointCoinLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32   `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`        //押注的位置
	Coins []int32 `protobuf:"varint,2,rep,packed,name=Coins,proto3" json:"Coins,omitempty"` //筹码：数量
}

func (x *RollPointCoinLog) Reset() {
	*x = RollPointCoinLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollPointCoinLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollPointCoinLog) ProtoMessage() {}

func (x *RollPointCoinLog) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollPointCoinLog.ProtoReflect.Descriptor instead.
func (*RollPointCoinLog) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{1}
}

func (x *RollPointCoinLog) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RollPointCoinLog) GetCoins() []int32 {
	if x != nil {
		return x.Coins
	}
	return nil
}

//玩家列表
type SCRollPointPlayerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*RollPointPlayer `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
	PlayerNum int32              `protobuf:"varint,2,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //玩家数量
}

func (x *SCRollPointPlayerList) Reset() {
	*x = SCRollPointPlayerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointPlayerList) ProtoMessage() {}

func (x *SCRollPointPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointPlayerList.ProtoReflect.Descriptor instead.
func (*SCRollPointPlayerList) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{2}
}

func (x *SCRollPointPlayerList) GetData() []*RollPointPlayer {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SCRollPointPlayerList) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

//RollPoint_SC_ROOMINFO
type SCRollPointRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneId   int32               `protobuf:"varint,1,opt,name=SceneId,proto3" json:"SceneId,omitempty"`           //场景ID
	GameId    int32               `protobuf:"varint,2,opt,name=GameId,proto3" json:"GameId,omitempty"`             //游戏id
	RoomMode  int32               `protobuf:"varint,3,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`         //游戏模式
	SceneType int32               `protobuf:"varint,4,opt,name=SceneType,proto3" json:"SceneType,omitempty"`       //房间类型
	State     int32               `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`               //房间当前状态
	TimeOut   int32               `protobuf:"varint,6,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`           //等待剩余时间 单位:毫秒
	RollLog   []int64             `protobuf:"varint,7,rep,packed,name=RollLog,proto3" json:"RollLog,omitempty"`    //最近几局的中奖结果
	CoinPool  []*RollPointCoinLog `protobuf:"bytes,8,rep,name=CoinPool,proto3" json:"CoinPool,omitempty"`          //本局已经押注的金币
	Player    *RollPointPlayer    `protobuf:"bytes,9,opt,name=Player,proto3" json:"Player,omitempty"`              //本人的信息
	PushLog   []*RollPointCoinLog `protobuf:"bytes,10,rep,name=PushLog,proto3" json:"PushLog,omitempty"`           //本人的押注详细信息
	ParamsEx  []int32             `protobuf:"varint,11,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"` //dbFreeID
	Params    []int32             `protobuf:"varint,12,rep,packed,name=Params,proto3" json:"Params,omitempty"`     //
}

func (x *SCRollPointRoomInfo) Reset() {
	*x = SCRollPointRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointRoomInfo) ProtoMessage() {}

func (x *SCRollPointRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointRoomInfo.ProtoReflect.Descriptor instead.
func (*SCRollPointRoomInfo) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{3}
}

func (x *SCRollPointRoomInfo) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCRollPointRoomInfo) GetRollLog() []int64 {
	if x != nil {
		return x.RollLog
	}
	return nil
}

func (x *SCRollPointRoomInfo) GetCoinPool() []*RollPointCoinLog {
	if x != nil {
		return x.CoinPool
	}
	return nil
}

func (x *SCRollPointRoomInfo) GetPlayer() *RollPointPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *SCRollPointRoomInfo) GetPushLog() []*RollPointCoinLog {
	if x != nil {
		return x.PushLog
	}
	return nil
}

func (x *SCRollPointRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCRollPointRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//RollPoint_SC_PLAYERNUM
type SCRollPointPlayerNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerNum int32 `protobuf:"varint,1,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //现在的用户数量
}

func (x *SCRollPointPlayerNum) Reset() {
	*x = SCRollPointPlayerNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointPlayerNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointPlayerNum) ProtoMessage() {}

func (x *SCRollPointPlayerNum) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointPlayerNum.ProtoReflect.Descriptor instead.
func (*SCRollPointPlayerNum) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{4}
}

func (x *SCRollPointPlayerNum) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

//RollPoint_SC_ROOMSTATE
//0.RollPointSceneStateWait      params:bankertimes      等待  time.Second * 0
//1.RollPointSceneStateStart     params:                 开始  time.Second * 3
//2.RollPointSceneStateBet      params:                 押注  time.Second * 15
//3.RollPointSceneStateOpen      params:                 押注  time.Second * 3
//4.RollPointSceneStateBilled    params:winPos,runPos    结算  time.Second * 5
type SCRollPointRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	Params []int32 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCRollPointRoomState) Reset() {
	*x = SCRollPointRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointRoomState) ProtoMessage() {}

func (x *SCRollPointRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointRoomState.ProtoReflect.Descriptor instead.
func (*SCRollPointRoomState) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{5}
}

func (x *SCRollPointRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRollPointRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//ROLLPOINT_CS_OP
//0.RollPointPlayerOpPushCoin param:falg-coin 押注
//1.RollPointPlayerOpPlayerList param:玩家列表
type CSRollPointOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`
}

func (x *CSRollPointOp) Reset() {
	*x = CSRollPointOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRollPointOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRollPointOp) ProtoMessage() {}

func (x *CSRollPointOp) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRollPointOp.ProtoReflect.Descriptor instead.
func (*CSRollPointOp) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{6}
}

func (x *CSRollPointOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSRollPointOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//ROLLPOINT_SC_OP
type SCRollPointOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode    int32        `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                   //操作码
	Params    []int64      `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"`                            //操作参数
	OpRetCode OpResultCode `protobuf:"varint,3,opt,name=OpRetCode,proto3,enum=rollpoint.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
	SnId      int32        `protobuf:"varint,4,opt,name=SnId,proto3" json:"SnId,omitempty"`
}

func (x *SCRollPointOp) Reset() {
	*x = SCRollPointOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointOp) ProtoMessage() {}

func (x *SCRollPointOp) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointOp.ProtoReflect.Descriptor instead.
func (*SCRollPointOp) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{7}
}

func (x *SCRollPointOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCRollPointOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCRollPointOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

func (x *SCRollPointOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

//RollPoint_SC_PUSHCOIN
type SCRollPointPushCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpRetCode  OpResultCode `protobuf:"varint,1,opt,name=OpRetCode,proto3,enum=rollpoint.OpResultCode" json:"OpRetCode,omitempty"` //结果
	Coin       int32        `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`                                       //押注金币
	Flag       int32        `protobuf:"varint,3,opt,name=Flag,proto3" json:"Flag,omitempty"`                                       //押注位置
	MeTotle    int64        `protobuf:"varint,4,opt,name=MeTotle,proto3" json:"MeTotle,omitempty"`                                 //总共押注的金币
	PlayerType int32        `protobuf:"varint,5,opt,name=PlayerType,proto3" json:"PlayerType,omitempty"`                           //玩家类型  1:神算子
	SnId       int32        `protobuf:"varint,6,opt,name=SnId,proto3" json:"SnId,omitempty"`
}

func (x *SCRollPointPushCoin) Reset() {
	*x = SCRollPointPushCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointPushCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointPushCoin) ProtoMessage() {}

func (x *SCRollPointPushCoin) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointPushCoin.ProtoReflect.Descriptor instead.
func (*SCRollPointPushCoin) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{8}
}

func (x *SCRollPointPushCoin) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

func (x *SCRollPointPushCoin) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCRollPointPushCoin) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *SCRollPointPushCoin) GetMeTotle() int64 {
	if x != nil {
		return x.MeTotle
	}
	return 0
}

func (x *SCRollPointPushCoin) GetPlayerType() int32 {
	if x != nil {
		return x.PlayerType
	}
	return 0
}

func (x *SCRollPointPushCoin) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

//RollPoint_SC_COINLOG
type SCRollPointCoinLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*RollPointCoinLog `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"` //最近1分钟，1-8位置新加的筹码的大小和数量（位置：筹码：数量）
	Pos   []int32             `protobuf:"varint,2,rep,packed,name=Pos,proto3" json:"Pos,omitempty"`
}

func (x *SCRollPointCoinLog) Reset() {
	*x = SCRollPointCoinLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointCoinLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointCoinLog) ProtoMessage() {}

func (x *SCRollPointCoinLog) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointCoinLog.ProtoReflect.Descriptor instead.
func (*SCRollPointCoinLog) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{9}
}

func (x *SCRollPointCoinLog) GetCoins() []*RollPointCoinLog {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *SCRollPointCoinLog) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

//RollPoint_SC_BILL
type SCRollPointBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point  []int32             `protobuf:"varint,1,rep,packed,name=Point,proto3" json:"Point,omitempty"` //本轮中奖的位置
	Flag   []int32             `protobuf:"varint,2,rep,packed,name=Flag,proto3" json:"Flag,omitempty"`   //本轮中奖的位置
	Coin   int64               `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`          //本轮赢取金币
	Banker int64               `protobuf:"varint,4,opt,name=Banker,proto3" json:"Banker,omitempty"`      //庄家本轮赢取金币
	Coins  []*RollPointCoinLog `protobuf:"bytes,5,rep,name=Coins,proto3" json:"Coins,omitempty"`         //押注列表
}

func (x *SCRollPointBill) Reset() {
	*x = SCRollPointBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollpoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollPointBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollPointBill) ProtoMessage() {}

func (x *SCRollPointBill) ProtoReflect() protoreflect.Message {
	mi := &file_rollpoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollPointBill.ProtoReflect.Descriptor instead.
func (*SCRollPointBill) Descriptor() ([]byte, []int) {
	return file_rollpoint_proto_rawDescGZIP(), []int{10}
}

func (x *SCRollPointBill) GetPoint() []int32 {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *SCRollPointBill) GetFlag() []int32 {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *SCRollPointBill) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCRollPointBill) GetBanker() int64 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *SCRollPointBill) GetCoins() []*RollPointCoinLog {
	if x != nil {
		return x.Coins
	}
	return nil
}

var File_rollpoint_proto protoreflect.FileDescriptor

var file_rollpoint_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xab, 0x02, 0x0a,
	0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x57, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x42, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x32, 0x30, 0x42,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x22, 0x3e, 0x0a, 0x10, 0x52, 0x6f,
	0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x65, 0x0a, 0x15, 0x53, 0x43,
	0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x22, 0xa3, 0x03, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x12,
	0x37, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07,
	0x50, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x50, 0x75, 0x73, 0x68,
	0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x14, 0x53, 0x43, 0x52, 0x6f, 0x6c,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x44, 0x0a,
	0x14, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x53, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49,
	0x64, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72,
	0x6f, 0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x54, 0x6f,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x65, 0x54, 0x6f, 0x74,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x31, 0x0a, 0x05,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f,
	0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6c,
	0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x2a, 0x2f,
	0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x2a,
	0x96, 0x02, 0x0a, 0x0a, 0x52, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x49, 0x44, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c,
	0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0xb6, 0x2a, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0xb7, 0x2a, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x43, 0x53, 0x5f, 0x4f, 0x50, 0x10, 0xb8, 0x2a, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x4c,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0xb9, 0x2a, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0xba, 0x2a, 0x12, 0x1b, 0x0a, 0x16,
	0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x10, 0xbb, 0x2a, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x4f, 0x4c,
	0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x4c, 0x4f,
	0x47, 0x10, 0xbc, 0x2a, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0xbd, 0x2a, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x4f, 0x50, 0x10, 0xbe, 0x2a, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x72, 0x6f,
	0x6c, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rollpoint_proto_rawDescOnce sync.Once
	file_rollpoint_proto_rawDescData = file_rollpoint_proto_rawDesc
)

func file_rollpoint_proto_rawDescGZIP() []byte {
	file_rollpoint_proto_rawDescOnce.Do(func() {
		file_rollpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_rollpoint_proto_rawDescData)
	})
	return file_rollpoint_proto_rawDescData
}

var file_rollpoint_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rollpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rollpoint_proto_goTypes = []interface{}{
	(OpResultCode)(0),             // 0: rollpoint.OpResultCode
	(RPPACKETID)(0),               // 1: rollpoint.RPPACKETID
	(*RollPointPlayer)(nil),       // 2: rollpoint.RollPointPlayer
	(*RollPointCoinLog)(nil),      // 3: rollpoint.RollPointCoinLog
	(*SCRollPointPlayerList)(nil), // 4: rollpoint.SCRollPointPlayerList
	(*SCRollPointRoomInfo)(nil),   // 5: rollpoint.SCRollPointRoomInfo
	(*SCRollPointPlayerNum)(nil),  // 6: rollpoint.SCRollPointPlayerNum
	(*SCRollPointRoomState)(nil),  // 7: rollpoint.SCRollPointRoomState
	(*CSRollPointOp)(nil),         // 8: rollpoint.CSRollPointOp
	(*SCRollPointOp)(nil),         // 9: rollpoint.SCRollPointOp
	(*SCRollPointPushCoin)(nil),   // 10: rollpoint.SCRollPointPushCoin
	(*SCRollPointCoinLog)(nil),    // 11: rollpoint.SCRollPointCoinLog
	(*SCRollPointBill)(nil),       // 12: rollpoint.SCRollPointBill
}
var file_rollpoint_proto_depIdxs = []int32{
	2, // 0: rollpoint.SCRollPointPlayerList.Data:type_name -> rollpoint.RollPointPlayer
	3, // 1: rollpoint.SCRollPointRoomInfo.CoinPool:type_name -> rollpoint.RollPointCoinLog
	2, // 2: rollpoint.SCRollPointRoomInfo.Player:type_name -> rollpoint.RollPointPlayer
	3, // 3: rollpoint.SCRollPointRoomInfo.PushLog:type_name -> rollpoint.RollPointCoinLog
	0, // 4: rollpoint.SCRollPointOp.OpRetCode:type_name -> rollpoint.OpResultCode
	0, // 5: rollpoint.SCRollPointPushCoin.OpRetCode:type_name -> rollpoint.OpResultCode
	3, // 6: rollpoint.SCRollPointCoinLog.Coins:type_name -> rollpoint.RollPointCoinLog
	3, // 7: rollpoint.SCRollPointBill.Coins:type_name -> rollpoint.RollPointCoinLog
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_rollpoint_proto_init() }
func file_rollpoint_proto_init() {
	if File_rollpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rollpoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollPointPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollPointCoinLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointPlayerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointPlayerNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRollPointOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointPushCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointCoinLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollpoint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollPointBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rollpoint_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rollpoint_proto_goTypes,
		DependencyIndexes: file_rollpoint_proto_depIdxs,
		EnumInfos:         file_rollpoint_proto_enumTypes,
		MessageInfos:      file_rollpoint_proto_msgTypes,
	}.Build()
	File_rollpoint_proto = out.File
	file_rollpoint_proto_rawDesc = nil
	file_rollpoint_proto_goTypes = nil
	file_rollpoint_proto_depIdxs = nil
}
