// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: rollteam.proto

package rollteam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess OpResultCode = 0 //成功
	OpResultCode_OPRC_Error  OpResultCode = 1 //失败
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess": 0,
		"OPRC_Error":  1,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rollteam_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_rollteam_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{0}
}

//世界杯
type RTPacketID int32

const (
	RTPacketID_PACKET_RollTeam_ZERO      RTPacketID = 0    // 弃用消息号
	RTPacketID_ROLLTEAM_SC_ROOMINFO      RTPacketID = 4065 //房间信息
	RTPacketID_ROLLTEAM_SC_ROOMSTATE     RTPacketID = 4066 //房间状态
	RTPacketID_ROLLTEAM_CS_OP            RTPacketID = 4067 //玩家操作（客户-》服务）
	RTPacketID_ROLLTEAM_SC_OP            RTPacketID = 4068 //玩家操作（服务-》客户）
	RTPacketID_ROLLTEAM_SC_GAMEBILLED    RTPacketID = 4069 //游戏结算
	RTPacketID_ROLLTEAM_SC_JACKPOTLIST   RTPacketID = 4070 //爆池记录
	RTPacketID_ROLLTEAM_SC_SMALLGAMELIST RTPacketID = 4071 //小游戏记录
	RTPacketID_ROLLTEAM_SC_SEATS         RTPacketID = 4072 //座位变化
	RTPacketID_ROLLTEAM_SC_SENDJACKPOT   RTPacketID = 4073 //奖池变化推送
)

// Enum value maps for RTPacketID.
var (
	RTPacketID_name = map[int32]string{
		0:    "PACKET_RollTeam_ZERO",
		4065: "ROLLTEAM_SC_ROOMINFO",
		4066: "ROLLTEAM_SC_ROOMSTATE",
		4067: "ROLLTEAM_CS_OP",
		4068: "ROLLTEAM_SC_OP",
		4069: "ROLLTEAM_SC_GAMEBILLED",
		4070: "ROLLTEAM_SC_JACKPOTLIST",
		4071: "ROLLTEAM_SC_SMALLGAMELIST",
		4072: "ROLLTEAM_SC_SEATS",
		4073: "ROLLTEAM_SC_SENDJACKPOT",
	}
	RTPacketID_value = map[string]int32{
		"PACKET_RollTeam_ZERO":      0,
		"ROLLTEAM_SC_ROOMINFO":      4065,
		"ROLLTEAM_SC_ROOMSTATE":     4066,
		"ROLLTEAM_CS_OP":            4067,
		"ROLLTEAM_SC_OP":            4068,
		"ROLLTEAM_SC_GAMEBILLED":    4069,
		"ROLLTEAM_SC_JACKPOTLIST":   4070,
		"ROLLTEAM_SC_SMALLGAMELIST": 4071,
		"ROLLTEAM_SC_SEATS":         4072,
		"ROLLTEAM_SC_SENDJACKPOT":   4073,
	}
)

func (x RTPacketID) Enum() *RTPacketID {
	p := new(RTPacketID)
	*p = x
	return p
}

func (x RTPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RTPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_rollteam_proto_enumTypes[1].Descriptor()
}

func (RTPacketID) Type() protoreflect.EnumType {
	return &file_rollteam_proto_enumTypes[1]
}

func (x RTPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RTPacketID.Descriptor instead.
func (RTPacketID) EnumDescriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{1}
}

type RollTeamPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	HeadOutLine int32    `protobuf:"varint,10,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,11,opt,name=VIP,proto3" json:"VIP,omitempty"`
}

func (x *RollTeamPlayerData) Reset() {
	*x = RollTeamPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollTeamPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollTeamPlayerData) ProtoMessage() {}

func (x *RollTeamPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollTeamPlayerData.ProtoReflect.Descriptor instead.
func (*RollTeamPlayerData) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{0}
}

func (x *RollTeamPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollTeamPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *RollTeamPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *RollTeamPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RollTeamPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RollTeamPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *RollTeamPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RollTeamPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RollTeamPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *RollTeamPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *RollTeamPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

//房间信息
type SCRollTeamRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        int32                 `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                   //房间id
	Creator       int32                 `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                 //创建者SnId
	GameId        int32                 `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                   //游戏id
	RoomMode      int32                 `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`               //游戏模式
	Params        []int32               `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`            //规则参数
	NumOfGames    int32                 `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`           //当前第几局
	Cards         []int32               `protobuf:"varint,7,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`              //牌数据 (没开牌之前是两个-1)
	State         int32                 `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                     //房间当前状态
	TimeOut       int32                 `protobuf:"varint,9,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                 //等待剩余时间 单位:毫秒
	DisbandGen    int32                 `protobuf:"varint,10,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`          //解散申请
	AgentId       int32                 `protobuf:"varint,11,opt,name=AgentId,proto3" json:"AgentId,omitempty"`                //代开房者
	ParamsEx      []int32               `protobuf:"varint,12,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`       //其他参数
	SceneType     int32                 `protobuf:"varint,13,opt,name=SceneType,proto3" json:"SceneType,omitempty"`            //房间模式 1:初级模式 3:高级模式
	Players       []*RollTeamPlayerData `protobuf:"bytes,14,rep,name=Players,proto3" json:"Players,omitempty"`                 //房间内的玩家信息
	ChipData      int32                 `protobuf:"varint,15,opt,name=ChipData,proto3" json:"ChipData,omitempty"`              //当前选择的筹码
	FreeTimes     int32                 `protobuf:"varint,16,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`            //免费转动次数
	FreeType      int32                 `protobuf:"varint,17,opt,name=FreeType,proto3" json:"FreeType,omitempty"`              //免费转动类型w
	OtherParams   []int32               `protobuf:"varint,18,rep,packed,name=OtherParams,proto3" json:"OtherParams,omitempty"` //其它参数
	PokerGame     bool                  `protobuf:"varint,19,opt,name=PokerGame,proto3" json:"PokerGame,omitempty"`            //扑克小游戏
	PokerBaseCoin int64                 `protobuf:"varint,20,opt,name=PokerBaseCoin,proto3" json:"PokerBaseCoin,omitempty"`    //基础金币
	PokerRate     int32                 `protobuf:"varint,21,opt,name=PokerRate,proto3" json:"PokerRate,omitempty"`            //扑克倍率
	GameFreeId    int32                 `protobuf:"varint,22,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
}

func (x *SCRollTeamRoomInfo) Reset() {
	*x = SCRollTeamRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamRoomInfo) ProtoMessage() {}

func (x *SCRollTeamRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamRoomInfo.ProtoReflect.Descriptor instead.
func (*SCRollTeamRoomInfo) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{1}
}

func (x *SCRollTeamRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCRollTeamRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCRollTeamRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCRollTeamRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetPlayers() []*RollTeamPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCRollTeamRoomInfo) GetChipData() int32 {
	if x != nil {
		return x.ChipData
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetFreeType() int32 {
	if x != nil {
		return x.FreeType
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetOtherParams() []int32 {
	if x != nil {
		return x.OtherParams
	}
	return nil
}

func (x *SCRollTeamRoomInfo) GetPokerGame() bool {
	if x != nil {
		return x.PokerGame
	}
	return false
}

func (x *SCRollTeamRoomInfo) GetPokerBaseCoin() int64 {
	if x != nil {
		return x.PokerBaseCoin
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetPokerRate() int32 {
	if x != nil {
		return x.PokerRate
	}
	return 0
}

func (x *SCRollTeamRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//玩家操作
//RollTeamPlayerOpStart 0 游戏
//RollTeamPlayerOpJackList 1 查看礼物列表
//RollTeamPlayerOpChangeRoom 2 切换房间
//RollTeamPlayerOpPokerStart 3 开始翻倍
//RollTeamPlayerOpPokerSel 4 扑克选择
//RollTeamPlayerOpPokerOver 5 扑克结算
//RollTeamPlayerOpSyncCoin 6 同步金币
type CSRollTeamOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSRollTeamOp) Reset() {
	*x = CSRollTeamOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRollTeamOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRollTeamOp) ProtoMessage() {}

func (x *CSRollTeamOp) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRollTeamOp.ProtoReflect.Descriptor instead.
func (*CSRollTeamOp) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{2}
}

func (x *CSRollTeamOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSRollTeamOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCRollTeamOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                      //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                  //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                           //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=rollteam.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCRollTeamOp) Reset() {
	*x = SCRollTeamOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamOp) ProtoMessage() {}

func (x *SCRollTeamOp) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamOp.ProtoReflect.Descriptor instead.
func (*SCRollTeamOp) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{3}
}

func (x *SCRollTeamOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCRollTeamOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCRollTeamOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCRollTeamOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//每条线的结算数据
type RollTeamLinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinLine  int32 `protobuf:"varint,1,opt,name=WinLine,proto3" json:"WinLine,omitempty"`   //中奖线路0-29
	WinNum   int32 `protobuf:"varint,2,opt,name=WinNum,proto3" json:"WinNum,omitempty"`     //中奖数量1-5
	WinScore int64 `protobuf:"varint,3,opt,name=WinScore,proto3" json:"WinScore,omitempty"` //中奖分数
	WinItem  int32 `protobuf:"varint,4,opt,name=WinItem,proto3" json:"WinItem,omitempty"`   //中奖的国家
}

func (x *RollTeamLinesInfo) Reset() {
	*x = RollTeamLinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollTeamLinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollTeamLinesInfo) ProtoMessage() {}

func (x *RollTeamLinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollTeamLinesInfo.ProtoReflect.Descriptor instead.
func (*RollTeamLinesInfo) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{4}
}

func (x *RollTeamLinesInfo) GetWinLine() int32 {
	if x != nil {
		return x.WinLine
	}
	return 0
}

func (x *RollTeamLinesInfo) GetWinNum() int32 {
	if x != nil {
		return x.WinNum
	}
	return 0
}

func (x *RollTeamLinesInfo) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *RollTeamLinesInfo) GetWinItem() int32 {
	if x != nil {
		return x.WinItem
	}
	return 0
}

//发送给客户端的数据
type SCRollTeamGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards       []int32              `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`           //需要翻出的牌，数组15个
	AllWinLines int32                `protobuf:"varint,2,opt,name=AllWinLines,proto3" json:"AllWinLines,omitempty"`      //中奖的线数
	AllWinScore int64                `protobuf:"varint,3,opt,name=AllWinScore,proto3" json:"AllWinScore,omitempty"`      //中奖的总分数
	Lines       []*RollTeamLinesInfo `protobuf:"bytes,4,rep,name=Lines,proto3" json:"Lines,omitempty"`                   //中奖的结果数组,存每条线的情况
	FreeTimes   int32                `protobuf:"varint,5,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`          //剩余免费转动次数
	FreeType    int32                `protobuf:"varint,6,opt,name=FreeType,proto3" json:"FreeType,omitempty"`            //免费转动类型
	CoinReward  int64                `protobuf:"varint,7,opt,name=CoinReward,proto3" json:"CoinReward,omitempty"`        //射门奖励
	RewardIndex int64                `protobuf:"varint,8,opt,name=RewardIndex,proto3" json:"RewardIndex,omitempty"`      //爆奖
	RewardPool  []int64              `protobuf:"varint,9,rep,packed,name=RewardPool,proto3" json:"RewardPool,omitempty"` //爆奖
	PokerGame   bool                 `protobuf:"varint,10,opt,name=PokerGame,proto3" json:"PokerGame,omitempty"`         //是否开始扑克小游戏
}

func (x *SCRollTeamGameBilled) Reset() {
	*x = SCRollTeamGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamGameBilled) ProtoMessage() {}

func (x *SCRollTeamGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamGameBilled.ProtoReflect.Descriptor instead.
func (*SCRollTeamGameBilled) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{5}
}

func (x *SCRollTeamGameBilled) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCRollTeamGameBilled) GetAllWinLines() int32 {
	if x != nil {
		return x.AllWinLines
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetAllWinScore() int64 {
	if x != nil {
		return x.AllWinScore
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetLines() []*RollTeamLinesInfo {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *SCRollTeamGameBilled) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetFreeType() int32 {
	if x != nil {
		return x.FreeType
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetCoinReward() int64 {
	if x != nil {
		return x.CoinReward
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetRewardIndex() int64 {
	if x != nil {
		return x.RewardIndex
	}
	return 0
}

func (x *SCRollTeamGameBilled) GetRewardPool() []int64 {
	if x != nil {
		return x.RewardPool
	}
	return nil
}

func (x *SCRollTeamGameBilled) GetPokerGame() bool {
	if x != nil {
		return x.PokerGame
	}
	return false
}

//房间状态
type SCRollTeamRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCRollTeamRoomState) Reset() {
	*x = SCRollTeamRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamRoomState) ProtoMessage() {}

func (x *SCRollTeamRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamRoomState.ProtoReflect.Descriptor instead.
func (*SCRollTeamRoomState) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{6}
}

func (x *SCRollTeamRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRollTeamRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCRollTeamRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type SCRollTeamSendJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Big   int64 `protobuf:"varint,1,opt,name=Big,proto3" json:"Big,omitempty"`     //奖池
	Small int64 `protobuf:"varint,2,opt,name=Small,proto3" json:"Small,omitempty"` //奖池
}

func (x *SCRollTeamSendJackpot) Reset() {
	*x = SCRollTeamSendJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamSendJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamSendJackpot) ProtoMessage() {}

func (x *SCRollTeamSendJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamSendJackpot.ProtoReflect.Descriptor instead.
func (*SCRollTeamSendJackpot) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{7}
}

func (x *SCRollTeamSendJackpot) GetBig() int64 {
	if x != nil {
		return x.Big
	}
	return 0
}

func (x *SCRollTeamSendJackpot) GetSmall() int64 {
	if x != nil {
		return x.Small
	}
	return 0
}

type RollTeamJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jackpottime  int64  `protobuf:"varint,1,opt,name=jackpottime,proto3" json:"jackpottime,omitempty"`   //时间戳
	JackpotName  string `protobuf:"bytes,2,opt,name=jackpotName,proto3" json:"jackpotName,omitempty"`    //昵称
	Jackpotscore int64  `protobuf:"varint,3,opt,name=jackpotscore,proto3" json:"jackpotscore,omitempty"` //奖励
}

func (x *RollTeamJackpot) Reset() {
	*x = RollTeamJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollTeamJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollTeamJackpot) ProtoMessage() {}

func (x *RollTeamJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollTeamJackpot.ProtoReflect.Descriptor instead.
func (*RollTeamJackpot) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{8}
}

func (x *RollTeamJackpot) GetJackpottime() int64 {
	if x != nil {
		return x.Jackpottime
	}
	return 0
}

func (x *RollTeamJackpot) GetJackpotName() string {
	if x != nil {
		return x.JackpotName
	}
	return ""
}

func (x *RollTeamJackpot) GetJackpotscore() int64 {
	if x != nil {
		return x.Jackpotscore
	}
	return 0
}

//奖池记录
type SCRollTeamJackpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RollTeamJackpot `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"` //房间当前状态
}

func (x *SCRollTeamJackpot) Reset() {
	*x = SCRollTeamJackpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamJackpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamJackpot) ProtoMessage() {}

func (x *SCRollTeamJackpot) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamJackpot.ProtoReflect.Descriptor instead.
func (*SCRollTeamJackpot) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{9}
}

func (x *SCRollTeamJackpot) GetData() []*RollTeamJackpot {
	if x != nil {
		return x.Data
	}
	return nil
}

//座位数据
type SCRollTeamSeats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RollTeamPlayerData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"` //房间当前状态
}

func (x *SCRollTeamSeats) Reset() {
	*x = SCRollTeamSeats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rollteam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRollTeamSeats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRollTeamSeats) ProtoMessage() {}

func (x *SCRollTeamSeats) ProtoReflect() protoreflect.Message {
	mi := &file_rollteam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRollTeamSeats.ProtoReflect.Descriptor instead.
func (*SCRollTeamSeats) Descriptor() ([]byte, []int) {
	return file_rollteam_proto_rawDescGZIP(), []int{10}
}

func (x *SCRollTeamSeats) GetData() []*RollTeamPlayerData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_rollteam_proto protoreflect.FileDescriptor

var file_rollteam_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xfc, 0x01, 0x0a, 0x12, 0x52,
	0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x22, 0x9e, 0x05, 0x0a, 0x12, 0x53, 0x43,
	0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e,
	0x64, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x6c, 0x6c,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0c, 0x43, 0x53,
	0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x53,
	0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69,
	0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0xdd, 0x02, 0x0a, 0x14, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x6e, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x42, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x42, 0x69, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x79, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x42, 0x0a, 0x11, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x43, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65, 0x61, 0x6d, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x2f, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0x98, 0x02, 0x0a, 0x0a, 0x52, 0x54,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x5f, 0x5a, 0x45, 0x52, 0x4f,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53,
	0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xe1, 0x1f, 0x12, 0x1a, 0x0a,
	0x15, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xe2, 0x1f, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x4f, 0x4c,
	0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x53, 0x5f, 0x4f, 0x50, 0x10, 0xe3, 0x1f, 0x12, 0x13,
	0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f, 0x4f, 0x50,
	0x10, 0xe4, 0x1f, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x53, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xe5, 0x1f,
	0x12, 0x1c, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f,
	0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xe6, 0x1f, 0x12, 0x1e,
	0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x47, 0x41, 0x4d, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xe7, 0x1f, 0x12, 0x16,
	0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x45,
	0x41, 0x54, 0x53, 0x10, 0xe8, 0x1f, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x4c, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x43, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f,
	0x54, 0x10, 0xe9, 0x1f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x72, 0x6f, 0x6c, 0x6c, 0x74, 0x65,
	0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rollteam_proto_rawDescOnce sync.Once
	file_rollteam_proto_rawDescData = file_rollteam_proto_rawDesc
)

func file_rollteam_proto_rawDescGZIP() []byte {
	file_rollteam_proto_rawDescOnce.Do(func() {
		file_rollteam_proto_rawDescData = protoimpl.X.CompressGZIP(file_rollteam_proto_rawDescData)
	})
	return file_rollteam_proto_rawDescData
}

var file_rollteam_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rollteam_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rollteam_proto_goTypes = []interface{}{
	(OpResultCode)(0),             // 0: rollteam.OpResultCode
	(RTPacketID)(0),               // 1: rollteam.RTPacketID
	(*RollTeamPlayerData)(nil),    // 2: rollteam.RollTeamPlayerData
	(*SCRollTeamRoomInfo)(nil),    // 3: rollteam.SCRollTeamRoomInfo
	(*CSRollTeamOp)(nil),          // 4: rollteam.CSRollTeamOp
	(*SCRollTeamOp)(nil),          // 5: rollteam.SCRollTeamOp
	(*RollTeamLinesInfo)(nil),     // 6: rollteam.RollTeamLinesInfo
	(*SCRollTeamGameBilled)(nil),  // 7: rollteam.SCRollTeamGameBilled
	(*SCRollTeamRoomState)(nil),   // 8: rollteam.SCRollTeamRoomState
	(*SCRollTeamSendJackpot)(nil), // 9: rollteam.SCRollTeamSendJackpot
	(*RollTeamJackpot)(nil),       // 10: rollteam.RollTeamJackpot
	(*SCRollTeamJackpot)(nil),     // 11: rollteam.SCRollTeamJackpot
	(*SCRollTeamSeats)(nil),       // 12: rollteam.SCRollTeamSeats
}
var file_rollteam_proto_depIdxs = []int32{
	2,  // 0: rollteam.SCRollTeamRoomInfo.Players:type_name -> rollteam.RollTeamPlayerData
	0,  // 1: rollteam.SCRollTeamOp.OpRetCode:type_name -> rollteam.OpResultCode
	6,  // 2: rollteam.SCRollTeamGameBilled.Lines:type_name -> rollteam.RollTeamLinesInfo
	10, // 3: rollteam.SCRollTeamJackpot.Data:type_name -> rollteam.RollTeamJackpot
	2,  // 4: rollteam.SCRollTeamSeats.Data:type_name -> rollteam.RollTeamPlayerData
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_rollteam_proto_init() }
func file_rollteam_proto_init() {
	if File_rollteam_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rollteam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollTeamPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRollTeamOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollTeamLinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamSendJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollTeamJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamJackpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rollteam_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRollTeamSeats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rollteam_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rollteam_proto_goTypes,
		DependencyIndexes: file_rollteam_proto_depIdxs,
		EnumInfos:         file_rollteam_proto_enumTypes,
		MessageInfos:      file_rollteam_proto_msgTypes,
	}.Build()
	File_rollteam_proto = out.File
	file_rollteam_proto_rawDesc = nil
	file_rollteam_proto_goTypes = nil
	file_rollteam_proto_depIdxs = nil
}
