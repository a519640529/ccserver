// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: candy.proto

package candy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//糖果
type CandyPacketID int32

const (
	CandyPacketID_PACKET_CANDY_ZERO             CandyPacketID = 0    //弃用消息号
	CandyPacketID_PACKET_SC_CANDY_ROOMINFO      CandyPacketID = 5240 //房间信息
	CandyPacketID_PACKET_CS_CANDY_PLAYEROP      CandyPacketID = 5241 //玩家操作（客户->服务）
	CandyPacketID_PACKET_SC_CANDY_PLAYEROP      CandyPacketID = 5242 //玩家操作（服务->客户）
	CandyPacketID_PACKET_SC_CANDY_ROOMSTATE     CandyPacketID = 5243 //房间状态
	CandyPacketID_PACKET_SC_CANDY_GAMEBILLED    CandyPacketID = 5244 //游戏结算
	CandyPacketID_PACKET_SC_CANDY_GAMEJACKPOT   CandyPacketID = 5245 //奖池
	CandyPacketID_PACKET_SC_CANDY_PLAYERHISTORY CandyPacketID = 5246 //玩家操作记录
)

// Enum value maps for CandyPacketID.
var (
	CandyPacketID_name = map[int32]string{
		0:    "PACKET_CANDY_ZERO",
		5240: "PACKET_SC_CANDY_ROOMINFO",
		5241: "PACKET_CS_CANDY_PLAYEROP",
		5242: "PACKET_SC_CANDY_PLAYEROP",
		5243: "PACKET_SC_CANDY_ROOMSTATE",
		5244: "PACKET_SC_CANDY_GAMEBILLED",
		5245: "PACKET_SC_CANDY_GAMEJACKPOT",
		5246: "PACKET_SC_CANDY_PLAYERHISTORY",
	}
	CandyPacketID_value = map[string]int32{
		"PACKET_CANDY_ZERO":             0,
		"PACKET_SC_CANDY_ROOMINFO":      5240,
		"PACKET_CS_CANDY_PLAYEROP":      5241,
		"PACKET_SC_CANDY_PLAYEROP":      5242,
		"PACKET_SC_CANDY_ROOMSTATE":     5243,
		"PACKET_SC_CANDY_GAMEBILLED":    5244,
		"PACKET_SC_CANDY_GAMEJACKPOT":   5245,
		"PACKET_SC_CANDY_PLAYERHISTORY": 5246,
	}
)

func (x CandyPacketID) Enum() *CandyPacketID {
	p := new(CandyPacketID)
	*p = x
	return p
}

func (x CandyPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandyPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_candy_proto_enumTypes[0].Descriptor()
}

func (CandyPacketID) Type() protoreflect.EnumType {
	return &file_candy_proto_enumTypes[0]
}

func (x CandyPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandyPacketID.Descriptor instead.
func (CandyPacketID) EnumDescriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{0}
}

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess        OpResultCode = 0 //成功
	OpResultCode_OPRC_Error         OpResultCode = 1 //失败
	OpResultCode_OPRC_CoinNotEnough OpResultCode = 2 //钱不够
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
		2: "OPRC_CoinNotEnough",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":        0,
		"OPRC_Error":         1,
		"OPRC_CoinNotEnough": 2,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_candy_proto_enumTypes[1].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_candy_proto_enumTypes[1]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{1}
}

type CandyPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`               //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`               //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                 //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`               //金币
	HeadOutLine int32    `protobuf:"varint,6,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,7,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"` //其他数据 如:ip 等
}

func (x *CandyPlayerData) Reset() {
	*x = CandyPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandyPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandyPlayerData) ProtoMessage() {}

func (x *CandyPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandyPlayerData.ProtoReflect.Descriptor instead.
func (*CandyPlayerData) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{0}
}

func (x *CandyPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CandyPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *CandyPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *CandyPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *CandyPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *CandyPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *CandyPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *CandyPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间信息
type SCCandyRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     int32              `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`             //房间id
	Creator    int32              `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`           //创建者SnId
	GameId     int32              `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`             //游戏id
	RoomMode   int32              `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`         //游戏模式
	Params     []int32            `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`      //规则参数
	Cards      []int32            `protobuf:"varint,6,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`        //牌数据
	State      int32              `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`               //房间当前状态
	BetLines   []int64            `protobuf:"varint,8,rep,packed,name=BetLines,proto3" json:"BetLines,omitempty"`  //玩家下注选线数组
	Chip       int32              `protobuf:"varint,9,opt,name=Chip,proto3" json:"Chip,omitempty"`                 //当前选择的押注
	Players    []*CandyPlayerData `protobuf:"bytes,10,rep,name=Players,proto3" json:"Players,omitempty"`           //房间内的玩家信息
	Jackpot    int64              `protobuf:"varint,11,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`          //奖池金额
	SpinID     int64              `protobuf:"varint,12,opt,name=SpinID,proto3" json:"SpinID,omitempty"`            //操作ID
	ParamsEx   []int32            `protobuf:"varint,13,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"` //其他参数
	GameFreeId int32              `protobuf:"varint,14,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	BilledData *GameBilledData    `protobuf:"bytes,15,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //上一局结算信息，用于断线重连
}

func (x *SCCandyRoomInfo) Reset() {
	*x = SCCandyRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCandyRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCandyRoomInfo) ProtoMessage() {}

func (x *SCCandyRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCandyRoomInfo.ProtoReflect.Descriptor instead.
func (*SCCandyRoomInfo) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{1}
}

func (x *SCCandyRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCCandyRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCCandyRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCCandyRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCCandyRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCCandyRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCCandyRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCCandyRoomInfo) GetBetLines() []int64 {
	if x != nil {
		return x.BetLines
	}
	return nil
}

func (x *SCCandyRoomInfo) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SCCandyRoomInfo) GetPlayers() []*CandyPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCCandyRoomInfo) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *SCCandyRoomInfo) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *SCCandyRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCCandyRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCCandyRoomInfo) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//玩家操作
type CSCandyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0:开始{0押注倍数,1-n选线} 1:玩家记录信息 2:大奖记录
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSCandyOp) Reset() {
	*x = CSCandyOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCandyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCandyOp) ProtoMessage() {}

func (x *CSCandyOp) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCandyOp.ProtoReflect.Descriptor instead.
func (*CSCandyOp) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{2}
}

func (x *CSCandyOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSCandyOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCCandyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                   //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                               //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                        //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=candy.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCCandyOp) Reset() {
	*x = SCCandyOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCandyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCandyOp) ProtoMessage() {}

func (x *SCCandyOp) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCandyOp.ProtoReflect.Descriptor instead.
func (*SCCandyOp) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{3}
}

func (x *SCCandyOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCCandyOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCCandyOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCCandyOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//每条线的结算数据
type CandyLinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineId     int32   `protobuf:"varint,1,opt,name=LineId,proto3" json:"LineId,omitempty"`            //中奖线路，20条线路中的一条[1,20]
	PrizeId    int32   `protobuf:"varint,2,opt,name=PrizeId,proto3" json:"PrizeId,omitempty"`          //中奖Id(暂时忽略)
	Position   []int32 `protobuf:"varint,3,rep,packed,name=Position,proto3" json:"Position,omitempty"` //中奖位置编号
	PrizeValue int64   `protobuf:"varint,4,opt,name=PrizeValue,proto3" json:"PrizeValue,omitempty"`    //线条奖金
}

func (x *CandyLinesInfo) Reset() {
	*x = CandyLinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandyLinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandyLinesInfo) ProtoMessage() {}

func (x *CandyLinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandyLinesInfo.ProtoReflect.Descriptor instead.
func (*CandyLinesInfo) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{4}
}

func (x *CandyLinesInfo) GetLineId() int32 {
	if x != nil {
		return x.LineId
	}
	return 0
}

func (x *CandyLinesInfo) GetPrizeId() int32 {
	if x != nil {
		return x.PrizeId
	}
	return 0
}

func (x *CandyLinesInfo) GetPosition() []int32 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CandyLinesInfo) GetPrizeValue() int64 {
	if x != nil {
		return x.PrizeValue
	}
	return 0
}

type GameBilledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotsData              []int32           `protobuf:"varint,1,rep,packed,name=SlotsData,proto3" json:"SlotsData,omitempty"`                    //需要翻出的牌，数字9个,如：[1, 2, 3, 4, 5, 6, 7, 8, 9,]
	PrizeLines             []*CandyLinesInfo `protobuf:"bytes,2,rep,name=PrizeLines,proto3" json:"PrizeLines,omitempty"`                          //中奖的结果数组,存每条线的情况
	LuckyData              []*CandyLinesInfo `protobuf:"bytes,3,rep,name=LuckyData,proto3" json:"LuckyData,omitempty"`                            //LuckyData中线数组
	TotalPrizeValue        int64             `protobuf:"varint,4,opt,name=TotalPrizeValue,proto3" json:"TotalPrizeValue,omitempty"`               //中奖的总分数
	TotalPaylinePrizeValue int64             `protobuf:"varint,5,opt,name=TotalPaylinePrizeValue,proto3" json:"TotalPaylinePrizeValue,omitempty"` //除了爆奖金额之外的线条奖金
	TotalJackpotValue      int64             `protobuf:"varint,6,opt,name=TotalJackpotValue,proto3" json:"TotalJackpotValue,omitempty"`           //爆奖金额
	Balance                int64             `protobuf:"varint,7,opt,name=Balance,proto3" json:"Balance,omitempty"`                               //玩家余额
	Jackpot                int64             `protobuf:"varint,8,opt,name=Jackpot,proto3" json:"Jackpot,omitempty"`                               //奖池金额
	ResponseStatus         int64             `protobuf:"varint,9,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`                 //状态码
	IsJackpot              bool              `protobuf:"varint,10,opt,name=IsJackpot,proto3" json:"IsJackpot,omitempty"`                          //是否爆奖
}

func (x *GameBilledData) Reset() {
	*x = GameBilledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBilledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBilledData) ProtoMessage() {}

func (x *GameBilledData) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBilledData.ProtoReflect.Descriptor instead.
func (*GameBilledData) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{5}
}

func (x *GameBilledData) GetSlotsData() []int32 {
	if x != nil {
		return x.SlotsData
	}
	return nil
}

func (x *GameBilledData) GetPrizeLines() []*CandyLinesInfo {
	if x != nil {
		return x.PrizeLines
	}
	return nil
}

func (x *GameBilledData) GetLuckyData() []*CandyLinesInfo {
	if x != nil {
		return x.LuckyData
	}
	return nil
}

func (x *GameBilledData) GetTotalPrizeValue() int64 {
	if x != nil {
		return x.TotalPrizeValue
	}
	return 0
}

func (x *GameBilledData) GetTotalPaylinePrizeValue() int64 {
	if x != nil {
		return x.TotalPaylinePrizeValue
	}
	return 0
}

func (x *GameBilledData) GetTotalJackpotValue() int64 {
	if x != nil {
		return x.TotalJackpotValue
	}
	return 0
}

func (x *GameBilledData) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GameBilledData) GetJackpot() int64 {
	if x != nil {
		return x.Jackpot
	}
	return 0
}

func (x *GameBilledData) GetResponseStatus() int64 {
	if x != nil {
		return x.ResponseStatus
	}
	return 0
}

func (x *GameBilledData) GetIsJackpot() bool {
	if x != nil {
		return x.IsJackpot
	}
	return false
}

//发送给客户端的数据 结算
type SCCandyGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID     int64           `protobuf:"varint,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`        //操作ID
	BilledData *GameBilledData `protobuf:"bytes,2,opt,name=BilledData,proto3" json:"BilledData,omitempty"` //结算信息
}

func (x *SCCandyGameBilled) Reset() {
	*x = SCCandyGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCandyGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCandyGameBilled) ProtoMessage() {}

func (x *SCCandyGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCandyGameBilled.ProtoReflect.Descriptor instead.
func (*SCCandyGameBilled) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{6}
}

func (x *SCCandyGameBilled) GetSpinID() int64 {
	if x != nil {
		return x.SpinID
	}
	return 0
}

func (x *SCCandyGameBilled) GetBilledData() *GameBilledData {
	if x != nil {
		return x.BilledData
	}
	return nil
}

//房间状态
type SCCandyRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State int32 `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"` //房间当前状态
}

func (x *SCCandyRoomState) Reset() {
	*x = SCCandyRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCandyRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCandyRoomState) ProtoMessage() {}

func (x *SCCandyRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCandyRoomState.ProtoReflect.Descriptor instead.
func (*SCCandyRoomState) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{7}
}

func (x *SCCandyRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

// 玩家操作记录信息
type CandyPlayerHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinID          string `protobuf:"bytes,1,opt,name=SpinID,proto3" json:"SpinID,omitempty"`                    // 操作id
	CreatedTime     int64  `protobuf:"varint,2,opt,name=CreatedTime,proto3" json:"CreatedTime,omitempty"`         // 时间
	TotalBetValue   int64  `protobuf:"varint,3,opt,name=TotalBetValue,proto3" json:"TotalBetValue,omitempty"`     // 总下注
	TotalPriceValue int64  `protobuf:"varint,4,opt,name=TotalPriceValue,proto3" json:"TotalPriceValue,omitempty"` // 总赢分
}

func (x *CandyPlayerHistoryInfo) Reset() {
	*x = CandyPlayerHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandyPlayerHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandyPlayerHistoryInfo) ProtoMessage() {}

func (x *CandyPlayerHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandyPlayerHistoryInfo.ProtoReflect.Descriptor instead.
func (*CandyPlayerHistoryInfo) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{8}
}

func (x *CandyPlayerHistoryInfo) GetSpinID() string {
	if x != nil {
		return x.SpinID
	}
	return ""
}

func (x *CandyPlayerHistoryInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *CandyPlayerHistoryInfo) GetTotalBetValue() int64 {
	if x != nil {
		return x.TotalBetValue
	}
	return 0
}

func (x *CandyPlayerHistoryInfo) GetTotalPriceValue() int64 {
	if x != nil {
		return x.TotalPriceValue
	}
	return 0
}

// 玩家押注记录
type SCCandyPlayerHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerHistory []*CandyPlayerHistoryInfo `protobuf:"bytes,1,rep,name=PlayerHistory,proto3" json:"PlayerHistory,omitempty"`
}

func (x *SCCandyPlayerHistory) Reset() {
	*x = SCCandyPlayerHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_candy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCandyPlayerHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCandyPlayerHistory) ProtoMessage() {}

func (x *SCCandyPlayerHistory) ProtoReflect() protoreflect.Message {
	mi := &file_candy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCandyPlayerHistory.ProtoReflect.Descriptor instead.
func (*SCCandyPlayerHistory) Descriptor() ([]byte, []int) {
	return file_candy_proto_rawDescGZIP(), []int{9}
}

func (x *SCCandyPlayerHistory) GetPlayerHistory() []*CandyPlayerHistoryInfo {
	if x != nil {
		return x.PlayerHistory
	}
	return nil
}

var File_candy_proto protoreflect.FileDescriptor

var file_candy_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63,
	0x61, 0x6e, 0x64, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x0f, 0x53, 0x43, 0x43, 0x61, 0x6e,
	0x64, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x43, 0x68, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x43, 0x68, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x78, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x09, 0x43,
	0x53, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x53, 0x43, 0x43,
	0x61, 0x6e, 0x64, 0x79, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a,
	0x0e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x03,
	0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x22, 0x62, 0x0a, 0x11, 0x53, 0x43, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x35, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x10, 0x53, 0x43, 0x43, 0x61,
	0x6e, 0x64, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x70, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x53, 0x43, 0x43, 0x61, 0x6e,
	0x64, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x43, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x6e, 0x64, 0x79, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2a, 0x8a, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x64, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xf8, 0x28, 0x12, 0x1d, 0x0a, 0x18,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xf9, 0x28, 0x12, 0x1d, 0x0a, 0x18, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xfa, 0x28, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xfb, 0x28, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xfc, 0x28, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x4a, 0x41, 0x43, 0x4b, 0x50, 0x4f, 0x54, 0x10, 0xfd, 0x28, 0x12, 0x22, 0x0a,
	0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x59,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xfe,
	0x28, 0x2a, 0x47, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e,
	0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x02, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x63, 0x61, 0x6e, 0x64, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_candy_proto_rawDescOnce sync.Once
	file_candy_proto_rawDescData = file_candy_proto_rawDesc
)

func file_candy_proto_rawDescGZIP() []byte {
	file_candy_proto_rawDescOnce.Do(func() {
		file_candy_proto_rawDescData = protoimpl.X.CompressGZIP(file_candy_proto_rawDescData)
	})
	return file_candy_proto_rawDescData
}

var file_candy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_candy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_candy_proto_goTypes = []interface{}{
	(CandyPacketID)(0),             // 0: candy.CandyPacketID
	(OpResultCode)(0),              // 1: candy.OpResultCode
	(*CandyPlayerData)(nil),        // 2: candy.CandyPlayerData
	(*SCCandyRoomInfo)(nil),        // 3: candy.SCCandyRoomInfo
	(*CSCandyOp)(nil),              // 4: candy.CSCandyOp
	(*SCCandyOp)(nil),              // 5: candy.SCCandyOp
	(*CandyLinesInfo)(nil),         // 6: candy.CandyLinesInfo
	(*GameBilledData)(nil),         // 7: candy.GameBilledData
	(*SCCandyGameBilled)(nil),      // 8: candy.SCCandyGameBilled
	(*SCCandyRoomState)(nil),       // 9: candy.SCCandyRoomState
	(*CandyPlayerHistoryInfo)(nil), // 10: candy.CandyPlayerHistoryInfo
	(*SCCandyPlayerHistory)(nil),   // 11: candy.SCCandyPlayerHistory
}
var file_candy_proto_depIdxs = []int32{
	2,  // 0: candy.SCCandyRoomInfo.Players:type_name -> candy.CandyPlayerData
	7,  // 1: candy.SCCandyRoomInfo.BilledData:type_name -> candy.GameBilledData
	1,  // 2: candy.SCCandyOp.OpRetCode:type_name -> candy.OpResultCode
	6,  // 3: candy.GameBilledData.PrizeLines:type_name -> candy.CandyLinesInfo
	6,  // 4: candy.GameBilledData.LuckyData:type_name -> candy.CandyLinesInfo
	7,  // 5: candy.SCCandyGameBilled.BilledData:type_name -> candy.GameBilledData
	10, // 6: candy.SCCandyPlayerHistory.PlayerHistory:type_name -> candy.CandyPlayerHistoryInfo
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_candy_proto_init() }
func file_candy_proto_init() {
	if File_candy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_candy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandyPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCandyRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCandyOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCandyOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandyLinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBilledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCandyGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCandyRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandyPlayerHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_candy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCandyPlayerHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_candy_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_candy_proto_goTypes,
		DependencyIndexes: file_candy_proto_depIdxs,
		EnumInfos:         file_candy_proto_enumTypes,
		MessageInfos:      file_candy_proto_msgTypes,
	}.Build()
	File_candy_proto = out.File
	file_candy_proto_rawDesc = nil
	file_candy_proto_goTypes = nil
	file_candy_proto_depIdxs = nil
}
