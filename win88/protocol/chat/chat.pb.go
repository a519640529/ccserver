// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: chat.proto

package chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess          OpResultCode = 0    //成功
	OpResultCode_OPRC_Error           OpResultCode = 1    //失败
	OpResultCode_OPRC_Chat_NotFriend  OpResultCode = 1001 //不是好友无法操作
	OpResultCode_OPRC_Chat_IsShield   OpResultCode = 1002 //已被对方屏蔽
	OpResultCode_OPRC_Chat_ReShield   OpResultCode = 1003 //重复屏蔽
	OpResultCode_OPRC_Chat_ReUnShield OpResultCode = 1004 //重复解除
	OpResultCode_OPRC_Chat_Shield     OpResultCode = 1005 //已屏蔽对方
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0:    "OPRC_Sucess",
		1:    "OPRC_Error",
		1001: "OPRC_Chat_NotFriend",
		1002: "OPRC_Chat_IsShield",
		1003: "OPRC_Chat_ReShield",
		1004: "OPRC_Chat_ReUnShield",
		1005: "OPRC_Chat_Shield",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess":          0,
		"OPRC_Error":           1,
		"OPRC_Chat_NotFriend":  1001,
		"OPRC_Chat_IsShield":   1002,
		"OPRC_Chat_ReShield":   1003,
		"OPRC_Chat_ReUnShield": 1004,
		"OPRC_Chat_Shield":     1005,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

//聊天消息id
type ChatPacketID int32

const (
	ChatPacketID_PACKET_CHATPACKET_ZERO ChatPacketID = 0    // 弃用消息
	ChatPacketID_PACKET_CSChatMsg       ChatPacketID = 2720 //发消息
	ChatPacketID_PACKET_SCChatMsg       ChatPacketID = 2721
	ChatPacketID_PACKET_CSGetChatLog    ChatPacketID = 2722 //获取聊天记录
	ChatPacketID_PACKET_SCGetChatLog    ChatPacketID = 2723
	ChatPacketID_PACKET_CSReadChatMsg   ChatPacketID = 2724 //读消息
	ChatPacketID_PACKET_CSShieldMsg     ChatPacketID = 2725 //屏蔽
	ChatPacketID_PACKET_SCShieldMsg     ChatPacketID = 2726
)

// Enum value maps for ChatPacketID.
var (
	ChatPacketID_name = map[int32]string{
		0:    "PACKET_CHATPACKET_ZERO",
		2720: "PACKET_CSChatMsg",
		2721: "PACKET_SCChatMsg",
		2722: "PACKET_CSGetChatLog",
		2723: "PACKET_SCGetChatLog",
		2724: "PACKET_CSReadChatMsg",
		2725: "PACKET_CSShieldMsg",
		2726: "PACKET_SCShieldMsg",
	}
	ChatPacketID_value = map[string]int32{
		"PACKET_CHATPACKET_ZERO": 0,
		"PACKET_CSChatMsg":       2720,
		"PACKET_SCChatMsg":       2721,
		"PACKET_CSGetChatLog":    2722,
		"PACKET_SCGetChatLog":    2723,
		"PACKET_CSReadChatMsg":   2724,
		"PACKET_CSShieldMsg":     2725,
		"PACKET_SCShieldMsg":     2726,
	}
)

func (x ChatPacketID) Enum() *ChatPacketID {
	p := new(ChatPacketID)
	*p = x
	return p
}

func (x ChatPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[1].Descriptor()
}

func (ChatPacketID) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[1]
}

func (x ChatPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatPacketID.Descriptor instead.
func (ChatPacketID) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

//PACKET_CSChatMsg
type CSChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg2Snid int32  `protobuf:"varint,1,opt,name=Msg2Snid,proto3" json:"Msg2Snid,omitempty"` //接受者 0.所有人
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Head     int32  `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"` //聊天内容
}

func (x *CSChatMsg) Reset() {
	*x = CSChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSChatMsg) ProtoMessage() {}

func (x *CSChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSChatMsg.ProtoReflect.Descriptor instead.
func (*CSChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *CSChatMsg) GetMsg2Snid() int32 {
	if x != nil {
		return x.Msg2Snid
	}
	return 0
}

func (x *CSChatMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CSChatMsg) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *CSChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

//PACKET_SCChatMsg
type SCChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg2Snid  int32        `protobuf:"varint,1,opt,name=Msg2Snid,proto3" json:"Msg2Snid,omitempty"` //接受者 0.所有人
	Snid      int32        `protobuf:"varint,2,opt,name=Snid,proto3" json:"Snid,omitempty"`         //发送者信息
	Name      string       `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Head      int32        `protobuf:"varint,4,opt,name=Head,proto3" json:"Head,omitempty"`
	Content   string       `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`                             //聊天内容
	Ts        int64        `protobuf:"varint,6,opt,name=Ts,proto3" json:"Ts,omitempty"`                                      //发消息的时间
	OpRetCode OpResultCode `protobuf:"varint,7,opt,name=OpRetCode,proto3,enum=chat.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCChatMsg) Reset() {
	*x = SCChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCChatMsg) ProtoMessage() {}

func (x *SCChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCChatMsg.ProtoReflect.Descriptor instead.
func (*SCChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *SCChatMsg) GetMsg2Snid() int32 {
	if x != nil {
		return x.Msg2Snid
	}
	return 0
}

func (x *SCChatMsg) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *SCChatMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SCChatMsg) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *SCChatMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SCChatMsg) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCChatMsg) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//PACKET_CSGetChatLog
type CSGetChatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid int32 `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
}

func (x *CSGetChatLog) Reset() {
	*x = CSGetChatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGetChatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGetChatLog) ProtoMessage() {}

func (x *CSGetChatLog) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGetChatLog.ProtoReflect.Descriptor instead.
func (*CSGetChatLog) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *CSGetChatLog) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

type ChatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcSnId int32  `protobuf:"varint,1,opt,name=SrcSnId,proto3" json:"SrcSnId,omitempty"`
	SrcName string `protobuf:"bytes,2,opt,name=SrcName,proto3" json:"SrcName,omitempty"`
	SrcHead int32  `protobuf:"varint,3,opt,name=SrcHead,proto3" json:"SrcHead,omitempty"`
	ToSnId  int32  `protobuf:"varint,4,opt,name=ToSnId,proto3" json:"ToSnId,omitempty"`
	ToName  string `protobuf:"bytes,5,opt,name=ToName,proto3" json:"ToName,omitempty"`
	ToHead  int32  `protobuf:"varint,6,opt,name=ToHead,proto3" json:"ToHead,omitempty"`
	Content string `protobuf:"bytes,7,opt,name=Content,proto3" json:"Content,omitempty"` //聊天内容
	Ts      int64  `protobuf:"varint,8,opt,name=Ts,proto3" json:"Ts,omitempty"`          //发消息的时间
}

func (x *ChatLog) Reset() {
	*x = ChatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLog) ProtoMessage() {}

func (x *ChatLog) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLog.ProtoReflect.Descriptor instead.
func (*ChatLog) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ChatLog) GetSrcSnId() int32 {
	if x != nil {
		return x.SrcSnId
	}
	return 0
}

func (x *ChatLog) GetSrcName() string {
	if x != nil {
		return x.SrcName
	}
	return ""
}

func (x *ChatLog) GetSrcHead() int32 {
	if x != nil {
		return x.SrcHead
	}
	return 0
}

func (x *ChatLog) GetToSnId() int32 {
	if x != nil {
		return x.ToSnId
	}
	return 0
}

func (x *ChatLog) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *ChatLog) GetToHead() int32 {
	if x != nil {
		return x.ToHead
	}
	return 0
}

func (x *ChatLog) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatLog) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

//PACKET_SCGetChatLog
type SCGetChatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid     int32      `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
	ChatLogs []*ChatLog `protobuf:"bytes,2,rep,name=ChatLogs,proto3" json:"ChatLogs,omitempty"`
}

func (x *SCGetChatLog) Reset() {
	*x = SCGetChatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCGetChatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGetChatLog) ProtoMessage() {}

func (x *SCGetChatLog) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGetChatLog.ProtoReflect.Descriptor instead.
func (*SCGetChatLog) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *SCGetChatLog) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *SCGetChatLog) GetChatLogs() []*ChatLog {
	if x != nil {
		return x.ChatLogs
	}
	return nil
}

//PACKET_CSReadChatMsg
type CSReadChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid int32 `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`
}

func (x *CSReadChatMsg) Reset() {
	*x = CSReadChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSReadChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSReadChatMsg) ProtoMessage() {}

func (x *CSReadChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSReadChatMsg.ProtoReflect.Descriptor instead.
func (*CSReadChatMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *CSReadChatMsg) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

//PACKET_CSShieldMsg
type CSShieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShieldSnid int32  `protobuf:"varint,1,opt,name=ShieldSnid,proto3" json:"ShieldSnid,omitempty"` //玩家
	ShieldHead int32  `protobuf:"varint,2,opt,name=ShieldHead,proto3" json:"ShieldHead,omitempty"`
	ShieldName string `protobuf:"bytes,3,opt,name=ShieldName,proto3" json:"ShieldName,omitempty"`
	Shield     bool   `protobuf:"varint,4,opt,name=Shield,proto3" json:"Shield,omitempty"` //屏蔽、解除
}

func (x *CSShieldMsg) Reset() {
	*x = CSShieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSShieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSShieldMsg) ProtoMessage() {}

func (x *CSShieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSShieldMsg.ProtoReflect.Descriptor instead.
func (*CSShieldMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *CSShieldMsg) GetShieldSnid() int32 {
	if x != nil {
		return x.ShieldSnid
	}
	return 0
}

func (x *CSShieldMsg) GetShieldHead() int32 {
	if x != nil {
		return x.ShieldHead
	}
	return 0
}

func (x *CSShieldMsg) GetShieldName() string {
	if x != nil {
		return x.ShieldName
	}
	return ""
}

func (x *CSShieldMsg) GetShield() bool {
	if x != nil {
		return x.Shield
	}
	return false
}

//PACKET_SCShieldMsg
type SCShieldMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid       int32        `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`                                  //发送者
	ShieldSnid int32        `protobuf:"varint,2,opt,name=ShieldSnid,proto3" json:"ShieldSnid,omitempty"`                      //屏蔽、解除玩家
	Shield     bool         `protobuf:"varint,3,opt,name=Shield,proto3" json:"Shield,omitempty"`                              //屏蔽、解除
	Ts         int64        `protobuf:"varint,4,opt,name=Ts,proto3" json:"Ts,omitempty"`                                      //时间
	OpRetCode  OpResultCode `protobuf:"varint,5,opt,name=OpRetCode,proto3,enum=chat.OpResultCode" json:"OpRetCode,omitempty"` //获取结果
}

func (x *SCShieldMsg) Reset() {
	*x = SCShieldMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCShieldMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCShieldMsg) ProtoMessage() {}

func (x *SCShieldMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCShieldMsg.ProtoReflect.Descriptor instead.
func (*SCShieldMsg) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *SCShieldMsg) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *SCShieldMsg) GetShieldSnid() int32 {
	if x != nil {
		return x.ShieldSnid
	}
	return 0
}

func (x *SCShieldMsg) GetShield() bool {
	if x != nil {
		return x.Shield
	}
	return false
}

func (x *SCShieldMsg) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SCShieldMsg) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0x69, 0x0a, 0x09, 0x43, 0x53, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x32, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4d, 0x73, 0x67, 0x32, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbf, 0x01,
	0x0a, 0x09, 0x53, 0x43, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x73, 0x67, 0x32, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d,
	0x73, 0x67, 0x32, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x54, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x30, 0x0a,
	0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x22, 0x0a, 0x0c, 0x43, 0x53, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x72, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x63, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x6f, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x6f, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54,
	0x6f, 0x48, 0x65, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x22,
	0x4d, 0x0a, 0x0c, 0x53, 0x43, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x23,
	0x0a, 0x0d, 0x43, 0x53, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53,
	0x6e, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x43, 0x53, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0b,
	0x53, 0x43, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6e, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0xad, 0x01, 0x0a, 0x0c, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x49, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x10, 0xea, 0x07, 0x12, 0x17,
	0x0a, 0x12, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x10, 0xeb, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x4f, 0x50, 0x52, 0x43, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x55, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x10,
	0xec, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x10, 0xed, 0x07, 0x2a, 0xd9, 0x01, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0xa0, 0x15, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x10, 0xa1, 0x15, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43,
	0x53, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0xa2, 0x15, 0x12, 0x18,
	0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x6f, 0x67, 0x10, 0xa3, 0x15, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x53, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x10, 0xa4, 0x15, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x10, 0xa5, 0x15, 0x12, 0x17, 0x0a, 0x12,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x73, 0x67, 0x10, 0xa6, 0x15, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chat_proto_goTypes = []interface{}{
	(OpResultCode)(0),     // 0: chat.OpResultCode
	(ChatPacketID)(0),     // 1: chat.ChatPacketID
	(*CSChatMsg)(nil),     // 2: chat.CSChatMsg
	(*SCChatMsg)(nil),     // 3: chat.SCChatMsg
	(*CSGetChatLog)(nil),  // 4: chat.CSGetChatLog
	(*ChatLog)(nil),       // 5: chat.ChatLog
	(*SCGetChatLog)(nil),  // 6: chat.SCGetChatLog
	(*CSReadChatMsg)(nil), // 7: chat.CSReadChatMsg
	(*CSShieldMsg)(nil),   // 8: chat.CSShieldMsg
	(*SCShieldMsg)(nil),   // 9: chat.SCShieldMsg
}
var file_chat_proto_depIdxs = []int32{
	0, // 0: chat.SCChatMsg.OpRetCode:type_name -> chat.OpResultCode
	5, // 1: chat.SCGetChatLog.ChatLogs:type_name -> chat.ChatLog
	0, // 2: chat.SCShieldMsg.OpRetCode:type_name -> chat.OpResultCode
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGetChatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCGetChatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSReadChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSShieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCShieldMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
