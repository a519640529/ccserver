// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: hallpacket.proto

package gamehall

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode_Hall int32

const (
	OpResultCode_Hall_OPRC_Sucess_Hall                              OpResultCode_Hall = 0 //成功
	OpResultCode_Hall_OPRC_Error_Hall                               OpResultCode_Hall = 1 //失败
	OpResultCode_Hall_OPRC_OnlineReward_Info_FindPlatform_Fail_Hall OpResultCode_Hall = 10008
)

// Enum value maps for OpResultCode_Hall.
var (
	OpResultCode_Hall_name = map[int32]string{
		0:     "OPRC_Sucess_Hall",
		1:     "OPRC_Error_Hall",
		10008: "OPRC_OnlineReward_Info_FindPlatform_Fail_Hall",
	}
	OpResultCode_Hall_value = map[string]int32{
		"OPRC_Sucess_Hall":                              0,
		"OPRC_Error_Hall":                               1,
		"OPRC_OnlineReward_Info_FindPlatform_Fail_Hall": 10008,
	}
)

func (x OpResultCode_Hall) Enum() *OpResultCode_Hall {
	p := new(OpResultCode_Hall)
	*p = x
	return p
}

func (x OpResultCode_Hall) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode_Hall) Descriptor() protoreflect.EnumDescriptor {
	return file_hallpacket_proto_enumTypes[0].Descriptor()
}

func (OpResultCode_Hall) Type() protoreflect.EnumType {
	return &file_hallpacket_proto_enumTypes[0]
}

func (x OpResultCode_Hall) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode_Hall.Descriptor instead.
func (OpResultCode_Hall) EnumDescriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{0}
}

////大厅协议 2340-2379
type HallPacketID int32

const (
	HallPacketID_PACKET_Hall_ZERO         HallPacketID = 0 // 弃用消息号
	HallPacketID_PACKET_CS_REBATE_LIST    HallPacketID = 2340
	HallPacketID_PACKET_SC_REBATE_LIST    HallPacketID = 2341
	HallPacketID_PACKET_CS_REBATE_RECEIVE HallPacketID = 2342
	HallPacketID_PACKET_SC_REBATE_RECEIVE HallPacketID = 2343
	HallPacketID_PACKET_SC_HALL_REDCTRL   HallPacketID = 2344
	//////新个人中心
	HallPacketID_PACKET_CS_NEWPLAYERINFO     HallPacketID = 2345
	HallPacketID_PACKET_SC_NEWPLAYERINFO     HallPacketID = 2346
	HallPacketID_PACKET_CS_CODETYPERECORD    HallPacketID = 2347
	HallPacketID_PACKET_SC_CODETYPERECORD    HallPacketID = 2348
	HallPacketID_PACKET_CS_BETCOINRECORD     HallPacketID = 2349
	HallPacketID_PACKET_SC_BETCOINRECORD     HallPacketID = 2350
	HallPacketID_PACKET_CS_COINDETAILED      HallPacketID = 2351
	HallPacketID_PACKET_SC_COINDETAILEDTOTAL HallPacketID = 2352
	HallPacketID_PACKET_SC_COINTOTAL         HallPacketID = 2353
	HallPacketID_PACKET_CS_REPORTFORM        HallPacketID = 2354
	HallPacketID_PACKET_SC_REPORTFORM        HallPacketID = 2355
	HallPacketID_PACKET_CS_HISTORYRECORD     HallPacketID = 2356
	HallPacketID_PACKET_SC_HISTORYRECORD     HallPacketID = 2357
	HallPacketID_PACKET_CS_RECEIVECODECOIN   HallPacketID = 2358
	HallPacketID_PACKET_SC_RECEIVECODECOIN   HallPacketID = 2359
	HallPacketID_PACKET_SC_REBATETOTALINFO   HallPacketID = 2360
	//    PACKET_CS_FISHBETCOINRECORD = 2361;
	HallPacketID_PACKET_CS_GETISCANREBATE HallPacketID = 2362
	HallPacketID_PACKET_SC_GETISCANREBATE HallPacketID = 2363
	HallPacketID_PACKET_CS_GETRANKINFO    HallPacketID = 2364
	HallPacketID_PACKET_SC_GETRANKINFO    HallPacketID = 2365
	HallPacketID_PACKET_SC_SHOWRED        HallPacketID = 2366
)

// Enum value maps for HallPacketID.
var (
	HallPacketID_name = map[int32]string{
		0:    "PACKET_Hall_ZERO",
		2340: "PACKET_CS_REBATE_LIST",
		2341: "PACKET_SC_REBATE_LIST",
		2342: "PACKET_CS_REBATE_RECEIVE",
		2343: "PACKET_SC_REBATE_RECEIVE",
		2344: "PACKET_SC_HALL_REDCTRL",
		2345: "PACKET_CS_NEWPLAYERINFO",
		2346: "PACKET_SC_NEWPLAYERINFO",
		2347: "PACKET_CS_CODETYPERECORD",
		2348: "PACKET_SC_CODETYPERECORD",
		2349: "PACKET_CS_BETCOINRECORD",
		2350: "PACKET_SC_BETCOINRECORD",
		2351: "PACKET_CS_COINDETAILED",
		2352: "PACKET_SC_COINDETAILEDTOTAL",
		2353: "PACKET_SC_COINTOTAL",
		2354: "PACKET_CS_REPORTFORM",
		2355: "PACKET_SC_REPORTFORM",
		2356: "PACKET_CS_HISTORYRECORD",
		2357: "PACKET_SC_HISTORYRECORD",
		2358: "PACKET_CS_RECEIVECODECOIN",
		2359: "PACKET_SC_RECEIVECODECOIN",
		2360: "PACKET_SC_REBATETOTALINFO",
		2362: "PACKET_CS_GETISCANREBATE",
		2363: "PACKET_SC_GETISCANREBATE",
		2364: "PACKET_CS_GETRANKINFO",
		2365: "PACKET_SC_GETRANKINFO",
		2366: "PACKET_SC_SHOWRED",
	}
	HallPacketID_value = map[string]int32{
		"PACKET_Hall_ZERO":            0,
		"PACKET_CS_REBATE_LIST":       2340,
		"PACKET_SC_REBATE_LIST":       2341,
		"PACKET_CS_REBATE_RECEIVE":    2342,
		"PACKET_SC_REBATE_RECEIVE":    2343,
		"PACKET_SC_HALL_REDCTRL":      2344,
		"PACKET_CS_NEWPLAYERINFO":     2345,
		"PACKET_SC_NEWPLAYERINFO":     2346,
		"PACKET_CS_CODETYPERECORD":    2347,
		"PACKET_SC_CODETYPERECORD":    2348,
		"PACKET_CS_BETCOINRECORD":     2349,
		"PACKET_SC_BETCOINRECORD":     2350,
		"PACKET_CS_COINDETAILED":      2351,
		"PACKET_SC_COINDETAILEDTOTAL": 2352,
		"PACKET_SC_COINTOTAL":         2353,
		"PACKET_CS_REPORTFORM":        2354,
		"PACKET_SC_REPORTFORM":        2355,
		"PACKET_CS_HISTORYRECORD":     2356,
		"PACKET_SC_HISTORYRECORD":     2357,
		"PACKET_CS_RECEIVECODECOIN":   2358,
		"PACKET_SC_RECEIVECODECOIN":   2359,
		"PACKET_SC_REBATETOTALINFO":   2360,
		"PACKET_CS_GETISCANREBATE":    2362,
		"PACKET_SC_GETISCANREBATE":    2363,
		"PACKET_CS_GETRANKINFO":       2364,
		"PACKET_SC_GETRANKINFO":       2365,
		"PACKET_SC_SHOWRED":           2366,
	}
)

func (x HallPacketID) Enum() *HallPacketID {
	p := new(HallPacketID)
	*p = x
	return p
}

func (x HallPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HallPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_hallpacket_proto_enumTypes[1].Descriptor()
}

func (HallPacketID) Type() protoreflect.EnumType {
	return &file_hallpacket_proto_enumTypes[1]
}

func (x HallPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HallPacketID.Descriptor instead.
func (HallPacketID) EnumDescriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{1}
}

////////////////////////////////////////
type HallOperaCode int32

const (
	HallOperaCode_HallOperaZero      HallOperaCode = 0   //占位
	HallOperaCode_HallChessGame      HallOperaCode = 1   //棋牌游戏
	HallOperaCode_HallElectronicGame HallOperaCode = 2   //电子游艺
	HallOperaCode_HallFishingGame    HallOperaCode = 3   //捕鱼游戏
	HallOperaCode_HallLiveVideo      HallOperaCode = 4   //真人视讯
	HallOperaCode_HallLotteryGame    HallOperaCode = 5   //彩票游戏
	HallOperaCode_HallSportsGame     HallOperaCode = 6   //体育游戏
	HallOperaCode_HallPrivateRoom    HallOperaCode = 7   //个人房间
	HallOperaCode_HallClubRoom       HallOperaCode = 8   //俱乐部房间
	HallOperaCode_HallThirdPlt       HallOperaCode = 101 //三方平台
)

// Enum value maps for HallOperaCode.
var (
	HallOperaCode_name = map[int32]string{
		0:   "HallOperaZero",
		1:   "HallChessGame",
		2:   "HallElectronicGame",
		3:   "HallFishingGame",
		4:   "HallLiveVideo",
		5:   "HallLotteryGame",
		6:   "HallSportsGame",
		7:   "HallPrivateRoom",
		8:   "HallClubRoom",
		101: "HallThirdPlt",
	}
	HallOperaCode_value = map[string]int32{
		"HallOperaZero":      0,
		"HallChessGame":      1,
		"HallElectronicGame": 2,
		"HallFishingGame":    3,
		"HallLiveVideo":      4,
		"HallLotteryGame":    5,
		"HallSportsGame":     6,
		"HallPrivateRoom":    7,
		"HallClubRoom":       8,
		"HallThirdPlt":       101,
	}
)

func (x HallOperaCode) Enum() *HallOperaCode {
	p := new(HallOperaCode)
	*p = x
	return p
}

func (x HallOperaCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HallOperaCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hallpacket_proto_enumTypes[2].Descriptor()
}

func (HallOperaCode) Type() protoreflect.EnumType {
	return &file_hallpacket_proto_enumTypes[2]
}

func (x HallOperaCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HallOperaCode.Descriptor instead.
func (HallOperaCode) EnumDescriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{2}
}

type ShowRedCode int32

const (
	ShowRedCode_Mail ShowRedCode = 0
	ShowRedCode_Shop ShowRedCode = 1
	ShowRedCode_Role ShowRedCode = 2
	ShowRedCode_Pet  ShowRedCode = 3
)

// Enum value maps for ShowRedCode.
var (
	ShowRedCode_name = map[int32]string{
		0: "Mail",
		1: "Shop",
		2: "Role",
		3: "Pet",
	}
	ShowRedCode_value = map[string]int32{
		"Mail": 0,
		"Shop": 1,
		"Role": 2,
		"Pet":  3,
	}
)

func (x ShowRedCode) Enum() *ShowRedCode {
	p := new(ShowRedCode)
	*p = x
	return p
}

func (x ShowRedCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowRedCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hallpacket_proto_enumTypes[3].Descriptor()
}

func (ShowRedCode) Type() protoreflect.EnumType {
	return &file_hallpacket_proto_enumTypes[3]
}

func (x ShowRedCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShowRedCode.Descriptor instead.
func (ShowRedCode) EnumDescriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{3}
}

//////////////////////////////////////rebatetask
type RebateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform      string `protobuf:"bytes,1,opt,name=Platform,proto3" json:"Platform,omitempty"`            //平台名称
	ValidBetTotal int64  `protobuf:"varint,2,opt,name=validBetTotal,proto3" json:"validBetTotal,omitempty"` //返利金额
}

func (x *RebateInfo) Reset() {
	*x = RebateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebateInfo) ProtoMessage() {}

func (x *RebateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebateInfo.ProtoReflect.Descriptor instead.
func (*RebateInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{0}
}

func (x *RebateInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RebateInfo) GetValidBetTotal() int64 {
	if x != nil {
		return x.ValidBetTotal
	}
	return 0
}

//PACKET_CS_REBATE_LIST
type CSRebateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSRebateList) Reset() {
	*x = CSRebateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRebateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRebateList) ProtoMessage() {}

func (x *CSRebateList) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRebateList.ProtoReflect.Descriptor instead.
func (*CSRebateList) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{1}
}

//PACKET_SC_REBATE_LIST
type SCRebateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebateList      []*RebateInfo `protobuf:"bytes,1,rep,name=RebateList,proto3" json:"RebateList,omitempty"`            //各平台返利值
	RebateTotalCoin int64         `protobuf:"varint,2,opt,name=RebateTotalCoin,proto3" json:"RebateTotalCoin,omitempty"` //当前可领取的总值
}

func (x *SCRebateList) Reset() {
	*x = SCRebateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRebateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRebateList) ProtoMessage() {}

func (x *SCRebateList) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRebateList.ProtoReflect.Descriptor instead.
func (*SCRebateList) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{2}
}

func (x *SCRebateList) GetRebateList() []*RebateInfo {
	if x != nil {
		return x.RebateList
	}
	return nil
}

func (x *SCRebateList) GetRebateTotalCoin() int64 {
	if x != nil {
		return x.RebateTotalCoin
	}
	return 0
}

//领取奖励
//PACKET_CS_REBATE_RECEIVE
type CSReceiveRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSReceiveRebate) Reset() {
	*x = CSReceiveRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSReceiveRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSReceiveRebate) ProtoMessage() {}

func (x *CSReceiveRebate) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSReceiveRebate.ProtoReflect.Descriptor instead.
func (*CSReceiveRebate) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{3}
}

//PACKET_SC_REBATE_RECEIVE
type SCReceiveRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpRetCode OpResultCode_Hall `protobuf:"varint,1,opt,name=OpRetCode,proto3,enum=gamehall.OpResultCode_Hall" json:"OpRetCode,omitempty"` //错误码
	Coin      int64             `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`                                           //领取到的金额
}

func (x *SCReceiveRebate) Reset() {
	*x = SCReceiveRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCReceiveRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCReceiveRebate) ProtoMessage() {}

func (x *SCReceiveRebate) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCReceiveRebate.ProtoReflect.Descriptor instead.
func (*SCReceiveRebate) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{4}
}

func (x *SCReceiveRebate) GetOpRetCode() OpResultCode_Hall {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_Hall_OPRC_Sucess_Hall
}

func (x *SCReceiveRebate) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

/////////////////////////////////
//红点是否显示
//PACKET_SC_HALL_REDCTRL
type SCRedCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode  int64 `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`   //0 返利
	IsFShow bool  `protobuf:"varint,2,opt,name=IsFShow,proto3" json:"IsFShow,omitempty"` //是否显示
}

func (x *SCRedCtrl) Reset() {
	*x = SCRedCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRedCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRedCtrl) ProtoMessage() {}

func (x *SCRedCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRedCtrl.ProtoReflect.Descriptor instead.
func (*SCRedCtrl) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{5}
}

func (x *SCRedCtrl) GetOpCode() int64 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCRedCtrl) GetIsFShow() bool {
	if x != nil {
		return x.IsFShow
	}
	return false
}

//是否开启返利
//PACKET_CS_GETISCANREBATE
type CSGetIsCanRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSGetIsCanRebate) Reset() {
	*x = CSGetIsCanRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGetIsCanRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGetIsCanRebate) ProtoMessage() {}

func (x *CSGetIsCanRebate) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGetIsCanRebate.ProtoReflect.Descriptor instead.
func (*CSGetIsCanRebate) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{6}
}

//PACKET_SC_GETISCANREBATE
type SCGetIsCanRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpRetCode OpResultCode_Hall `protobuf:"varint,1,opt,name=OpRetCode,proto3,enum=gamehall.OpResultCode_Hall" json:"OpRetCode,omitempty"` //错误码
	IsCan     int64             `protobuf:"varint,2,opt,name=IsCan,proto3" json:"IsCan,omitempty"`                                         //是否可以领取 0 返利未开启 1返利开启 但是不能领取(二维码)  2返利开启 可以领取
	Url       string            `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`                                              //url
	WX        string            `protobuf:"bytes,4,opt,name=WX,proto3" json:"WX,omitempty"`                                                //wx
}

func (x *SCGetIsCanRebate) Reset() {
	*x = SCGetIsCanRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCGetIsCanRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGetIsCanRebate) ProtoMessage() {}

func (x *SCGetIsCanRebate) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGetIsCanRebate.ProtoReflect.Descriptor instead.
func (*SCGetIsCanRebate) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{7}
}

func (x *SCGetIsCanRebate) GetOpRetCode() OpResultCode_Hall {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_Hall_OPRC_Sucess_Hall
}

func (x *SCGetIsCanRebate) GetIsCan() int64 {
	if x != nil {
		return x.IsCan
	}
	return 0
}

func (x *SCGetIsCanRebate) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SCGetIsCanRebate) GetWX() string {
	if x != nil {
		return x.WX
	}
	return ""
}

//////2019.11.22 新个人中心
/////////////////////////////////个人信息//////////////////////////////////////////////////////////////
type HallGameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`
	GameMode int32 `protobuf:"varint,2,opt,name=GameMode,proto3" json:"GameMode,omitempty"`
}

func (x *HallGameType) Reset() {
	*x = HallGameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallGameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallGameType) ProtoMessage() {}

func (x *HallGameType) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallGameType.ProtoReflect.Descriptor instead.
func (*HallGameType) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{8}
}

func (x *HallGameType) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *HallGameType) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

//请求相关统计
//PACKET_CS_NEWPLAYERINFO
type CSNewPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSNewPlayerInfo) Reset() {
	*x = CSNewPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSNewPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSNewPlayerInfo) ProtoMessage() {}

func (x *CSNewPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSNewPlayerInfo.ProtoReflect.Descriptor instead.
func (*CSNewPlayerInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{9}
}

//相关统计
//PACKET_SC_NEWPLAYERINFO
type SCNewPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTotalNum       int32  `protobuf:"varint,1,opt,name=GameTotalNum,proto3" json:"GameTotalNum,omitempty"`            //游戏总局数
	GameMostPartake    string `protobuf:"bytes,2,opt,name=GameMostPartake,proto3" json:"GameMostPartake,omitempty"`       //参与最多
	GameMostProfit     string `protobuf:"bytes,3,opt,name=GameMostProfit,proto3" json:"GameMostProfit,omitempty"`         //单局最多盈利
	GameMostProfitNum  int32  `protobuf:"varint,4,opt,name=GameMostProfitNum,proto3" json:"GameMostProfitNum,omitempty"`  //单局最多盈利
	CreateRoomNum      int32  `protobuf:"varint,5,opt,name=CreateRoomNum,proto3" json:"CreateRoomNum,omitempty"`          //创建房间总数
	CreateRoomMost     string `protobuf:"bytes,6,opt,name=CreateRoomMost,proto3" json:"CreateRoomMost,omitempty"`         //创建房间最多
	CreateClubNum      int32  `protobuf:"varint,7,opt,name=CreateClubNum,proto3" json:"CreateClubNum,omitempty"`          //创建俱乐部数量
	CreateClubRoomMost string `protobuf:"bytes,8,opt,name=CreateClubRoomMost,proto3" json:"CreateClubRoomMost,omitempty"` //创建包间最多
	TeamNum            int32  `protobuf:"varint,9,opt,name=TeamNum,proto3" json:"TeamNum,omitempty"`                      //团队人数
	AchievementTotal   int32  `protobuf:"varint,10,opt,name=AchievementTotal,proto3" json:"AchievementTotal,omitempty"`   //推广总业绩
	RewardTotal        int32  `protobuf:"varint,11,opt,name=RewardTotal,proto3" json:"RewardTotal,omitempty"`             //推广总奖励
	///以下为 投注记录、账户明细和个人报表用
	TotalCoin       int64   `protobuf:"varint,12,opt,name=TotalCoin,proto3" json:"TotalCoin,omitempty"`             //总计游戏投注
	LastGetCoinTime int64   `protobuf:"varint,13,opt,name=LastGetCoinTime,proto3" json:"LastGetCoinTime,omitempty"` //最后一次结算时间
	Coin            int64   `protobuf:"varint,14,opt,name=Coin,proto3" json:"Coin,omitempty"`                       //可洗码总金额
	CodeType        int32   `protobuf:"varint,15,opt,name=CodeType,proto3" json:"CodeType,omitempty"`               //当前洗码类型  0实时领取  1次日领取
	ClassType       []int32 `protobuf:"varint,16,rep,packed,name=ClassType,proto3" json:"ClassType,omitempty"`      //需要显示的大类 [1.棋牌 2.电子 3.捕鱼 4.真人 5.彩票 6.体育 7.个人中心 8.俱乐部]
}

func (x *SCNewPlayerInfo) Reset() {
	*x = SCNewPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCNewPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCNewPlayerInfo) ProtoMessage() {}

func (x *SCNewPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCNewPlayerInfo.ProtoReflect.Descriptor instead.
func (*SCNewPlayerInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{10}
}

func (x *SCNewPlayerInfo) GetGameTotalNum() int32 {
	if x != nil {
		return x.GameTotalNum
	}
	return 0
}

func (x *SCNewPlayerInfo) GetGameMostPartake() string {
	if x != nil {
		return x.GameMostPartake
	}
	return ""
}

func (x *SCNewPlayerInfo) GetGameMostProfit() string {
	if x != nil {
		return x.GameMostProfit
	}
	return ""
}

func (x *SCNewPlayerInfo) GetGameMostProfitNum() int32 {
	if x != nil {
		return x.GameMostProfitNum
	}
	return 0
}

func (x *SCNewPlayerInfo) GetCreateRoomNum() int32 {
	if x != nil {
		return x.CreateRoomNum
	}
	return 0
}

func (x *SCNewPlayerInfo) GetCreateRoomMost() string {
	if x != nil {
		return x.CreateRoomMost
	}
	return ""
}

func (x *SCNewPlayerInfo) GetCreateClubNum() int32 {
	if x != nil {
		return x.CreateClubNum
	}
	return 0
}

func (x *SCNewPlayerInfo) GetCreateClubRoomMost() string {
	if x != nil {
		return x.CreateClubRoomMost
	}
	return ""
}

func (x *SCNewPlayerInfo) GetTeamNum() int32 {
	if x != nil {
		return x.TeamNum
	}
	return 0
}

func (x *SCNewPlayerInfo) GetAchievementTotal() int32 {
	if x != nil {
		return x.AchievementTotal
	}
	return 0
}

func (x *SCNewPlayerInfo) GetRewardTotal() int32 {
	if x != nil {
		return x.RewardTotal
	}
	return 0
}

func (x *SCNewPlayerInfo) GetTotalCoin() int64 {
	if x != nil {
		return x.TotalCoin
	}
	return 0
}

func (x *SCNewPlayerInfo) GetLastGetCoinTime() int64 {
	if x != nil {
		return x.LastGetCoinTime
	}
	return 0
}

func (x *SCNewPlayerInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCNewPlayerInfo) GetCodeType() int32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

func (x *SCNewPlayerInfo) GetClassType() []int32 {
	if x != nil {
		return x.ClassType
	}
	return nil
}

//更新返利统计信息
//PACKET_SC_REBATETOTALINFO
type SCRebateTotalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCoin       int64 `protobuf:"varint,1,opt,name=TotalCoin,proto3" json:"TotalCoin,omitempty"`             //总计游戏投注
	LastGetCoinTime int64 `protobuf:"varint,2,opt,name=LastGetCoinTime,proto3" json:"LastGetCoinTime,omitempty"` //最后一次结算时间
	Coin            int64 `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`                       //可洗码总金额
	CodeType        int32 `protobuf:"varint,4,opt,name=CodeType,proto3" json:"CodeType,omitempty"`               //当前洗码类型  0实时领取  1次日领取
}

func (x *SCRebateTotalInfo) Reset() {
	*x = SCRebateTotalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRebateTotalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRebateTotalInfo) ProtoMessage() {}

func (x *SCRebateTotalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRebateTotalInfo.ProtoReflect.Descriptor instead.
func (*SCRebateTotalInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{11}
}

func (x *SCRebateTotalInfo) GetTotalCoin() int64 {
	if x != nil {
		return x.TotalCoin
	}
	return 0
}

func (x *SCRebateTotalInfo) GetLastGetCoinTime() int64 {
	if x != nil {
		return x.LastGetCoinTime
	}
	return 0
}

func (x *SCRebateTotalInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCRebateTotalInfo) GetCodeType() int32 {
	if x != nil {
		return x.CodeType
	}
	return 0
}

//请求洗码列表
//PACKET_CS_CODETYPERECORD
type CSCodeTypeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowTypeId HallOperaCode `protobuf:"varint,1,opt,name=ShowTypeId,proto3,enum=gamehall.HallOperaCode" json:"ShowTypeId,omitempty"` //HallOperaCode
}

func (x *CSCodeTypeRecord) Reset() {
	*x = CSCodeTypeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCodeTypeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCodeTypeRecord) ProtoMessage() {}

func (x *CSCodeTypeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCodeTypeRecord.ProtoReflect.Descriptor instead.
func (*CSCodeTypeRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{12}
}

func (x *CSCodeTypeRecord) GetShowTypeId() HallOperaCode {
	if x != nil {
		return x.ShowTypeId
	}
	return HallOperaCode_HallOperaZero
}

///洗码列表
type CodeTypeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameName    string `protobuf:"bytes,1,opt,name=GameName,proto3" json:"GameName,omitempty"`        //游戏名称
	GameBetCoin int64  `protobuf:"varint,2,opt,name=GameBetCoin,proto3" json:"GameBetCoin,omitempty"` //游戏洗码量
	Rate        int32  `protobuf:"varint,3,opt,name=Rate,proto3" json:"Rate,omitempty"`               //比例
	Coin        int32  `protobuf:"varint,4,opt,name=Coin,proto3" json:"Coin,omitempty"`               //洗码金额
	MinCoin     int32  `protobuf:"varint,5,opt,name=MinCoin,proto3" json:"MinCoin,omitempty"`         //最低洗码量
	MaxCoin     int32  `protobuf:"varint,6,opt,name=MaxCoin,proto3" json:"MaxCoin,omitempty"`         //每天最高领取
}

func (x *CodeTypeRecord) Reset() {
	*x = CodeTypeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeTypeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeTypeRecord) ProtoMessage() {}

func (x *CodeTypeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeTypeRecord.ProtoReflect.Descriptor instead.
func (*CodeTypeRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{13}
}

func (x *CodeTypeRecord) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *CodeTypeRecord) GetGameBetCoin() int64 {
	if x != nil {
		return x.GameBetCoin
	}
	return 0
}

func (x *CodeTypeRecord) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *CodeTypeRecord) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *CodeTypeRecord) GetMinCoin() int32 {
	if x != nil {
		return x.MinCoin
	}
	return 0
}

func (x *CodeTypeRecord) GetMaxCoin() int32 {
	if x != nil {
		return x.MaxCoin
	}
	return 0
}

//PACKET_SC_CODETYPERECORD
type SCCodeTypeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowType       HallOperaCode     `protobuf:"varint,1,opt,name=ShowType,proto3,enum=gamehall.HallOperaCode" json:"ShowType,omitempty"` //标签
	CodeTypeRecord []*CodeTypeRecord `protobuf:"bytes,2,rep,name=CodeTypeRecord,proto3" json:"CodeTypeRecord,omitempty"`
}

func (x *SCCodeTypeRecord) Reset() {
	*x = SCCodeTypeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCodeTypeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCodeTypeRecord) ProtoMessage() {}

func (x *SCCodeTypeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCodeTypeRecord.ProtoReflect.Descriptor instead.
func (*SCCodeTypeRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{14}
}

func (x *SCCodeTypeRecord) GetShowType() HallOperaCode {
	if x != nil {
		return x.ShowType
	}
	return HallOperaCode_HallOperaZero
}

func (x *SCCodeTypeRecord) GetCodeTypeRecord() []*CodeTypeRecord {
	if x != nil {
		return x.CodeTypeRecord
	}
	return nil
}

//请求投注记录
//PACKET_CS_BETCOINRECORD
type CSBetCoinRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowTypeId HallOperaCode `protobuf:"varint,1,opt,name=ShowTypeId,proto3,enum=gamehall.HallOperaCode" json:"ShowTypeId,omitempty"` //HallOperaCode
	TimeIndex  int64         `protobuf:"varint,2,opt,name=TimeIndex,proto3" json:"TimeIndex,omitempty"`                               //0.全部 1.今天 2.昨天 3.一个月内
	PageNo     int32         `protobuf:"varint,3,opt,name=PageNo,proto3" json:"PageNo,omitempty"`                                     //当前页
}

func (x *CSBetCoinRecord) Reset() {
	*x = CSBetCoinRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSBetCoinRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSBetCoinRecord) ProtoMessage() {}

func (x *CSBetCoinRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSBetCoinRecord.ProtoReflect.Descriptor instead.
func (*CSBetCoinRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{15}
}

func (x *CSBetCoinRecord) GetShowTypeId() HallOperaCode {
	if x != nil {
		return x.ShowTypeId
	}
	return HallOperaCode_HallOperaZero
}

func (x *CSBetCoinRecord) GetTimeIndex() int64 {
	if x != nil {
		return x.TimeIndex
	}
	return 0
}

func (x *CSBetCoinRecord) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

//请求捕鱼投注记录
//PACKET_CS_FISHBETCOINRECORD
//message CSFishBetCoinRecord {
//    HallOperaCode ShowTypeId = 1;
//    int64 TimeIndex = 2; //0.全部 1.今天 2.昨天 3.一个月内
//    repeated HallGameType GameType = 3; //游戏类型
//    int32 PageNo = 4; //当前页
//}
///投注记录
type BetCoinRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           int64  `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`                     //时间戳
	GameName     string `protobuf:"bytes,2,opt,name=GameName,proto3" json:"GameName,omitempty"`          //游戏名称
	RecordId     string `protobuf:"bytes,3,opt,name=RecordId,proto3" json:"RecordId,omitempty"`          //注单号
	BetCoin      int64  `protobuf:"varint,4,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"`           //投注金额
	ReceivedCoin int64  `protobuf:"varint,5,opt,name=ReceivedCoin,proto3" json:"ReceivedCoin,omitempty"` //已派奖
}

func (x *BetCoinRecord) Reset() {
	*x = BetCoinRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetCoinRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetCoinRecord) ProtoMessage() {}

func (x *BetCoinRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetCoinRecord.ProtoReflect.Descriptor instead.
func (*BetCoinRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{16}
}

func (x *BetCoinRecord) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *BetCoinRecord) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *BetCoinRecord) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *BetCoinRecord) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

func (x *BetCoinRecord) GetReceivedCoin() int64 {
	if x != nil {
		return x.ReceivedCoin
	}
	return 0
}

//PACKET_SC_BETCOINRECORD
type SCBetCoinRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetCoinRecord []*BetCoinRecord `protobuf:"bytes,1,rep,name=BetCoinRecord,proto3" json:"BetCoinRecord,omitempty"`
	PageNo        int32            `protobuf:"varint,2,opt,name=PageNo,proto3" json:"PageNo,omitempty"`     //当前页
	PageSize      int32            `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //每页数量
	PageNum       int32            `protobuf:"varint,4,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //总页数
}

func (x *SCBetCoinRecord) Reset() {
	*x = SCBetCoinRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCBetCoinRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCBetCoinRecord) ProtoMessage() {}

func (x *SCBetCoinRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCBetCoinRecord.ProtoReflect.Descriptor instead.
func (*SCBetCoinRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{17}
}

func (x *SCBetCoinRecord) GetBetCoinRecord() []*BetCoinRecord {
	if x != nil {
		return x.BetCoinRecord
	}
	return nil
}

func (x *SCBetCoinRecord) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SCBetCoinRecord) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SCBetCoinRecord) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

//请求账户明细
//PACKET_CS_COINDETAILED
type CSCoinDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeIndex int64 `protobuf:"varint,1,opt,name=TimeIndex,proto3" json:"TimeIndex,omitempty"` //0.全部 1.今天 2.昨天 3.一个月内
	CoinType  int64 `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`   // 0.全部 1.充值 2.兑换 3.邮件 4.保险箱 5.人工操作 6.活动 7.手动洗码 8.第三方
	//9.余额宝 10.俱乐部 11.VIP奖励 12.私有房间
	PageNo int32 `protobuf:"varint,3,opt,name=PageNo,proto3" json:"PageNo,omitempty"` //当前页
}

func (x *CSCoinDetailed) Reset() {
	*x = CSCoinDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSCoinDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSCoinDetailed) ProtoMessage() {}

func (x *CSCoinDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSCoinDetailed.ProtoReflect.Descriptor instead.
func (*CSCoinDetailed) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{18}
}

func (x *CSCoinDetailed) GetTimeIndex() int64 {
	if x != nil {
		return x.TimeIndex
	}
	return 0
}

func (x *CSCoinDetailed) GetCoinType() int64 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *CSCoinDetailed) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

///账户明细
type CoinDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`             //时间戳
	CoinType int64 `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"` //交易类型
	Income   int64 `protobuf:"varint,3,opt,name=Income,proto3" json:"Income,omitempty"`     //收入
	Disburse int64 `protobuf:"varint,4,opt,name=Disburse,proto3" json:"Disburse,omitempty"` //支出
	Coin     int64 `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`         //金额
}

func (x *CoinDetailed) Reset() {
	*x = CoinDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinDetailed) ProtoMessage() {}

func (x *CoinDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinDetailed.ProtoReflect.Descriptor instead.
func (*CoinDetailed) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{19}
}

func (x *CoinDetailed) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CoinDetailed) GetCoinType() int64 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *CoinDetailed) GetIncome() int64 {
	if x != nil {
		return x.Income
	}
	return 0
}

func (x *CoinDetailed) GetDisburse() int64 {
	if x != nil {
		return x.Disburse
	}
	return 0
}

func (x *CoinDetailed) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

//PACKET_SC_COINDETAILEDTOTAL
type SCCoinDetailedTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinDetailed []*CoinDetailed `protobuf:"bytes,1,rep,name=CoinDetailed,proto3" json:"CoinDetailed,omitempty"`
	PageNo       int32           `protobuf:"varint,2,opt,name=PageNo,proto3" json:"PageNo,omitempty"`     //当前页
	PageSize     int32           `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //每页数量
	PageNum      int32           `protobuf:"varint,4,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //总页数
}

func (x *SCCoinDetailedTotal) Reset() {
	*x = SCCoinDetailedTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinDetailedTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinDetailedTotal) ProtoMessage() {}

func (x *SCCoinDetailedTotal) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinDetailedTotal.ProtoReflect.Descriptor instead.
func (*SCCoinDetailedTotal) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{20}
}

func (x *SCCoinDetailedTotal) GetCoinDetailed() []*CoinDetailed {
	if x != nil {
		return x.CoinDetailed
	}
	return nil
}

func (x *SCCoinDetailedTotal) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SCCoinDetailedTotal) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SCCoinDetailedTotal) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

//明细统计
//PACKET_SC_COINTOTAL
type SCCoinTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RechargeCoin    int64   `protobuf:"varint,1,opt,name=RechargeCoin,proto3" json:"RechargeCoin,omitempty"`              //充值
	ExchangeCoin    int64   `protobuf:"varint,2,opt,name=ExchangeCoin,proto3" json:"ExchangeCoin,omitempty"`              //兑换
	ClubAddCoin     int64   `protobuf:"varint,3,opt,name=ClubAddCoin,proto3" json:"ClubAddCoin,omitempty"`                //俱乐部加币
	RebateCoin      int64   `protobuf:"varint,4,opt,name=RebateCoin,proto3" json:"RebateCoin,omitempty"`                  //返利
	Activity        int64   `protobuf:"varint,5,opt,name=Activity,proto3" json:"Activity,omitempty"`                      //活动获取
	TransactionType []int32 `protobuf:"varint,6,rep,packed,name=TransactionType,proto3" json:"TransactionType,omitempty"` //交易类型个数 0.全部 1.充值 2.兑换 3.邮件 4.保险箱 5.人工操作 6.活动
}

func (x *SCCoinTotal) Reset() {
	*x = SCCoinTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCCoinTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCCoinTotal) ProtoMessage() {}

func (x *SCCoinTotal) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCCoinTotal.ProtoReflect.Descriptor instead.
func (*SCCoinTotal) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{21}
}

func (x *SCCoinTotal) GetRechargeCoin() int64 {
	if x != nil {
		return x.RechargeCoin
	}
	return 0
}

func (x *SCCoinTotal) GetExchangeCoin() int64 {
	if x != nil {
		return x.ExchangeCoin
	}
	return 0
}

func (x *SCCoinTotal) GetClubAddCoin() int64 {
	if x != nil {
		return x.ClubAddCoin
	}
	return 0
}

func (x *SCCoinTotal) GetRebateCoin() int64 {
	if x != nil {
		return x.RebateCoin
	}
	return 0
}

func (x *SCCoinTotal) GetActivity() int64 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *SCCoinTotal) GetTransactionType() []int32 {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

//请求个人报表
//PACKET_CS_REPORTFORM
type CSReportForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowTypeId HallOperaCode `protobuf:"varint,1,opt,name=ShowTypeId,proto3,enum=gamehall.HallOperaCode" json:"ShowTypeId,omitempty"` //HallOperaCode
	TimeIndex  int64         `protobuf:"varint,2,opt,name=TimeIndex,proto3" json:"TimeIndex,omitempty"`                               //0.今天 1.昨天 2.一个月内
}

func (x *CSReportForm) Reset() {
	*x = CSReportForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSReportForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSReportForm) ProtoMessage() {}

func (x *CSReportForm) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSReportForm.ProtoReflect.Descriptor instead.
func (*CSReportForm) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{22}
}

func (x *CSReportForm) GetShowTypeId() HallOperaCode {
	if x != nil {
		return x.ShowTypeId
	}
	return HallOperaCode_HallOperaZero
}

func (x *CSReportForm) GetTimeIndex() int64 {
	if x != nil {
		return x.TimeIndex
	}
	return 0
}

///个人报表
//PACKET_SC_REPORTFORM
type SCReportForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowType   int32 `protobuf:"varint,1,opt,name=ShowType,proto3" json:"ShowType,omitempty"`     //标签 棋牌游戏等等
	ProfitCoin int64 `protobuf:"varint,2,opt,name=ProfitCoin,proto3" json:"ProfitCoin,omitempty"` //盈利总额
	BetCoin    int64 `protobuf:"varint,3,opt,name=BetCoin,proto3" json:"BetCoin,omitempty"`       //有效投注总额
	FlowCoin   int64 `protobuf:"varint,4,opt,name=FlowCoin,proto3" json:"FlowCoin,omitempty"`     //流水总额
}

func (x *SCReportForm) Reset() {
	*x = SCReportForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCReportForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCReportForm) ProtoMessage() {}

func (x *SCReportForm) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCReportForm.ProtoReflect.Descriptor instead.
func (*SCReportForm) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{23}
}

func (x *SCReportForm) GetShowType() int32 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *SCReportForm) GetProfitCoin() int64 {
	if x != nil {
		return x.ProfitCoin
	}
	return 0
}

func (x *SCReportForm) GetBetCoin() int64 {
	if x != nil {
		return x.BetCoin
	}
	return 0
}

func (x *SCReportForm) GetFlowCoin() int64 {
	if x != nil {
		return x.FlowCoin
	}
	return 0
}

//历史洗码记录
//PACKET_CS_HISTORYRECORD
type CSHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNo int32 `protobuf:"varint,1,opt,name=PageNo,proto3" json:"PageNo,omitempty"` //当前页
}

func (x *CSHistoryRecord) Reset() {
	*x = CSHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSHistoryRecord) ProtoMessage() {}

func (x *CSHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSHistoryRecord.ProtoReflect.Descriptor instead.
func (*CSHistoryRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{24}
}

func (x *CSHistoryRecord) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

type HistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`                   //时间
	CodeCoin    int32 `protobuf:"varint,2,opt,name=CodeCoin,proto3" json:"CodeCoin,omitempty"`       //洗码量
	Coin        int32 `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`               //洗码金额
	ReceiveType int32 `protobuf:"varint,4,opt,name=ReceiveType,proto3" json:"ReceiveType,omitempty"` //详情 0.手动 1.邮件
}

func (x *HistoryRecord) Reset() {
	*x = HistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRecord) ProtoMessage() {}

func (x *HistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRecord.ProtoReflect.Descriptor instead.
func (*HistoryRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{25}
}

func (x *HistoryRecord) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *HistoryRecord) GetCodeCoin() int32 {
	if x != nil {
		return x.CodeCoin
	}
	return 0
}

func (x *HistoryRecord) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *HistoryRecord) GetReceiveType() int32 {
	if x != nil {
		return x.ReceiveType
	}
	return 0
}

//PACKET_SC_HISTORYRECORD
type SCHistoryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryRecord []*HistoryRecord `protobuf:"bytes,1,rep,name=HistoryRecord,proto3" json:"HistoryRecord,omitempty"`
	PageNo        int32            `protobuf:"varint,2,opt,name=PageNo,proto3" json:"PageNo,omitempty"`     //当前页
	PageSize      int32            `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //每页数量
	PageNum       int32            `protobuf:"varint,4,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //总页数
}

func (x *SCHistoryRecord) Reset() {
	*x = SCHistoryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHistoryRecord) ProtoMessage() {}

func (x *SCHistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHistoryRecord.ProtoReflect.Descriptor instead.
func (*SCHistoryRecord) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{26}
}

func (x *SCHistoryRecord) GetHistoryRecord() []*HistoryRecord {
	if x != nil {
		return x.HistoryRecord
	}
	return nil
}

func (x *SCHistoryRecord) GetPageNo() int32 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *SCHistoryRecord) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SCHistoryRecord) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

//领取洗码金额
//PACKET_CS_RECEIVECODECOIN
type CSReceiveCodeCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSReceiveCodeCoin) Reset() {
	*x = CSReceiveCodeCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSReceiveCodeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSReceiveCodeCoin) ProtoMessage() {}

func (x *CSReceiveCodeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSReceiveCodeCoin.ProtoReflect.Descriptor instead.
func (*CSReceiveCodeCoin) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{27}
}

//PACKET_SC_RECEIVECODECOIN
type SCReceiveCodeCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpRetCode OpResultCode_Hall `protobuf:"varint,1,opt,name=OpRetCode,proto3,enum=gamehall.OpResultCode_Hall" json:"OpRetCode,omitempty"` //操作结果
	Coin      int64             `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`                                           //领取的金额
}

func (x *SCReceiveCodeCoin) Reset() {
	*x = SCReceiveCodeCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCReceiveCodeCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCReceiveCodeCoin) ProtoMessage() {}

func (x *SCReceiveCodeCoin) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCReceiveCodeCoin.ProtoReflect.Descriptor instead.
func (*SCReceiveCodeCoin) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{28}
}

func (x *SCReceiveCodeCoin) GetOpRetCode() OpResultCode_Hall {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_Hall_OPRC_Sucess_Hall
}

func (x *SCReceiveCodeCoin) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

//PACKET_CS_GETRANKINFO
type CSGetRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plt        string `protobuf:"bytes,1,opt,name=Plt,proto3" json:"Plt,omitempty"`                //平台
	GameFreeId int32  `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"` //游戏id
}

func (x *CSGetRankInfo) Reset() {
	*x = CSGetRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSGetRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSGetRankInfo) ProtoMessage() {}

func (x *CSGetRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSGetRankInfo.ProtoReflect.Descriptor instead.
func (*CSGetRankInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{29}
}

func (x *CSGetRankInfo) GetPlt() string {
	if x != nil {
		return x.Plt
	}
	return ""
}

func (x *CSGetRankInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//PACKET_SC_GETRANKINFO
type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snid     int32  `protobuf:"varint,1,opt,name=Snid,proto3" json:"Snid,omitempty"`         //snid
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`          //名字
	TotalIn  int64  `protobuf:"varint,3,opt,name=TotalIn,proto3" json:"TotalIn,omitempty"`   //总投入
	TotalOut int64  `protobuf:"varint,4,opt,name=TotalOut,proto3" json:"TotalOut,omitempty"` //总产出
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{30}
}

func (x *RankInfo) GetSnid() int32 {
	if x != nil {
		return x.Snid
	}
	return 0
}

func (x *RankInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RankInfo) GetTotalIn() int64 {
	if x != nil {
		return x.TotalIn
	}
	return 0
}

func (x *RankInfo) GetTotalOut() int64 {
	if x != nil {
		return x.TotalOut
	}
	return 0
}

type SCGetRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*RankInfo `protobuf:"bytes,1,rep,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SCGetRankInfo) Reset() {
	*x = SCGetRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCGetRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGetRankInfo) ProtoMessage() {}

func (x *SCGetRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGetRankInfo.ProtoReflect.Descriptor instead.
func (*SCGetRankInfo) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{31}
}

func (x *SCGetRankInfo) GetInfo() []*RankInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

//红点 PACKET_SC_SHOWRED
type ShowRed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowType  ShowRedCode `protobuf:"varint,1,opt,name=ShowType,proto3,enum=gamehall.ShowRedCode" json:"ShowType,omitempty"` //0.邮件(showId)  1.商城(0,1,2,3) 2.人物 3.宠物
	ShowChild int32       `protobuf:"varint,2,opt,name=ShowChild,proto3" json:"ShowChild,omitempty"`
	IsShow    int32       `protobuf:"varint,3,opt,name=IsShow,proto3" json:"IsShow,omitempty"` //0.不显示  1.显示
}

func (x *ShowRed) Reset() {
	*x = ShowRed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRed) ProtoMessage() {}

func (x *ShowRed) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRed.ProtoReflect.Descriptor instead.
func (*ShowRed) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{32}
}

func (x *ShowRed) GetShowType() ShowRedCode {
	if x != nil {
		return x.ShowType
	}
	return ShowRedCode_Mail
}

func (x *ShowRed) GetShowChild() int32 {
	if x != nil {
		return x.ShowChild
	}
	return 0
}

func (x *ShowRed) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

type SCShowRed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowRed *ShowRed `protobuf:"bytes,1,opt,name=ShowRed,proto3" json:"ShowRed,omitempty"`
}

func (x *SCShowRed) Reset() {
	*x = SCShowRed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hallpacket_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCShowRed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCShowRed) ProtoMessage() {}

func (x *SCShowRed) ProtoReflect() protoreflect.Message {
	mi := &file_hallpacket_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCShowRed.ProtoReflect.Descriptor instead.
func (*SCShowRed) Descriptor() ([]byte, []int) {
	return file_hallpacket_proto_rawDescGZIP(), []int{33}
}

func (x *SCShowRed) GetShowRed() *ShowRed {
	if x != nil {
		return x.ShowRed
	}
	return nil
}

var File_hallpacket_proto protoreflect.FileDescriptor

var file_hallpacket_proto_rawDesc = []byte{
	0x0a, 0x10, 0x68, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x22, 0x4e, 0x0a, 0x0a,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x0e, 0x0a, 0x0c,
	0x43, 0x53, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0c,
	0x53, 0x43, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x11, 0x0a, 0x0f,
	0x43, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x22,
	0x60, 0x0a, 0x0f, 0x53, 0x43, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c,
	0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x22, 0x3d, 0x0a, 0x09, 0x53, 0x43, 0x52, 0x65, 0x64, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x53, 0x68, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x53, 0x68, 0x6f, 0x77,
	0x22, 0x12, 0x0a, 0x10, 0x43, 0x53, 0x47, 0x65, 0x74, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x53, 0x43, 0x47, 0x65, 0x74, 0x49, 0x73,
	0x43, 0x61, 0x6e, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x57, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x57, 0x58, 0x22, 0x42, 0x0a, 0x0c,
	0x48, 0x61, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x11, 0x0a, 0x0f, 0x43, 0x53, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xd7, 0x04, 0x0a, 0x0f, 0x53, 0x43, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x4e, 0x75, 0x6d, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x11, 0x53, 0x43, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x43,
	0x53, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48,
	0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x43, 0x43, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61,
	0x6c, 0x6c, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x43, 0x53, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x9e, 0x01, 0x0a,
	0x0f, 0x53, 0x43, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61,
	0x6c, 0x6c, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0d, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x62, 0x0a,
	0x0e, 0x43, 0x53, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x6f, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x69, 0x73, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x53, 0x43, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a,
	0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x0c, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x53, 0x43, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x0c, 0x43, 0x53, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x80, 0x01, 0x0a, 0x0c, 0x53, 0x43, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x69, 0x6e, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x53, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x22, 0x71, 0x0a,
	0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x53, 0x43, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x62, 0x0a, 0x11, 0x53, 0x43, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x4f,
	0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x53,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x50,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6c, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x22, 0x37, 0x0a, 0x0d, 0x53, 0x43, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c,
	0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x72, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x22, 0x38, 0x0a, 0x09, 0x53, 0x43, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x52, 0x65, 0x64, 0x52, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x2a, 0x72,
	0x0a, 0x11, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x53, 0x75, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x32,
	0x0a, 0x2d, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x5f, 0x48, 0x61, 0x6c, 0x6c, 0x10,
	0x98, 0x4e, 0x2a, 0xa6, 0x06, 0x0a, 0x0c, 0x48, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x48, 0x61,
	0x6c, 0x6c, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0xa4, 0x12, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x43, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xa5,
	0x12, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x52,
	0x45, 0x42, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0xa6, 0x12,
	0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x45,
	0x42, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0xa7, 0x12, 0x12,
	0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x41, 0x4c,
	0x4c, 0x5f, 0x52, 0x45, 0x44, 0x43, 0x54, 0x52, 0x4c, 0x10, 0xa8, 0x12, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xa9, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x4e, 0x45, 0x57, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xaa, 0x12, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0xab, 0x12, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0xac, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0xad, 0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x42, 0x45, 0x54, 0x43, 0x4f, 0x49, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10,
	0xae, 0x12, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xaf, 0x12, 0x12,
	0x20, 0x0a, 0x1b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43, 0x4f, 0x49,
	0x4e, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xb0,
	0x12, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x43,
	0x4f, 0x49, 0x4e, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xb1, 0x12, 0x12, 0x19, 0x0a, 0x14, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0xb2, 0x12, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0xb3,
	0x12, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xb4, 0x12, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0xb5, 0x12, 0x12, 0x1e, 0x0a,
	0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xb6, 0x12, 0x12, 0x1e, 0x0a,
	0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xb7, 0x12, 0x12, 0x1e, 0x0a,
	0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54,
	0x45, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xb8, 0x12, 0x12, 0x1d, 0x0a,
	0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x49, 0x53,
	0x43, 0x41, 0x4e, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x10, 0xba, 0x12, 0x12, 0x1d, 0x0a, 0x18,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x49, 0x53, 0x43,
	0x41, 0x4e, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x10, 0xbb, 0x12, 0x12, 0x1a, 0x0a, 0x15, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x4b,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0xbc, 0x12, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0xbd, 0x12, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x45, 0x44, 0x10, 0xbe, 0x12, 0x2a, 0xd7, 0x01, 0x0a, 0x0d,
	0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x48, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48,
	0x61, 0x6c, 0x6c, 0x46, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61, 0x6c, 0x6c,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x6f, 0x6f,
	0x6d, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x61, 0x6c, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x6c, 0x74, 0x10, 0x65, 0x2a, 0x34, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x65, 0x74, 0x10, 0x03, 0x42, 0x0c, 0x5a, 0x0a, 0x2e,
	0x3b, 0x67, 0x61, 0x6d, 0x65, 0x68, 0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_hallpacket_proto_rawDescOnce sync.Once
	file_hallpacket_proto_rawDescData = file_hallpacket_proto_rawDesc
)

func file_hallpacket_proto_rawDescGZIP() []byte {
	file_hallpacket_proto_rawDescOnce.Do(func() {
		file_hallpacket_proto_rawDescData = protoimpl.X.CompressGZIP(file_hallpacket_proto_rawDescData)
	})
	return file_hallpacket_proto_rawDescData
}

var file_hallpacket_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hallpacket_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_hallpacket_proto_goTypes = []interface{}{
	(OpResultCode_Hall)(0),      // 0: gamehall.OpResultCode_Hall
	(HallPacketID)(0),           // 1: gamehall.HallPacketID
	(HallOperaCode)(0),          // 2: gamehall.HallOperaCode
	(ShowRedCode)(0),            // 3: gamehall.ShowRedCode
	(*RebateInfo)(nil),          // 4: gamehall.RebateInfo
	(*CSRebateList)(nil),        // 5: gamehall.CSRebateList
	(*SCRebateList)(nil),        // 6: gamehall.SCRebateList
	(*CSReceiveRebate)(nil),     // 7: gamehall.CSReceiveRebate
	(*SCReceiveRebate)(nil),     // 8: gamehall.SCReceiveRebate
	(*SCRedCtrl)(nil),           // 9: gamehall.SCRedCtrl
	(*CSGetIsCanRebate)(nil),    // 10: gamehall.CSGetIsCanRebate
	(*SCGetIsCanRebate)(nil),    // 11: gamehall.SCGetIsCanRebate
	(*HallGameType)(nil),        // 12: gamehall.HallGameType
	(*CSNewPlayerInfo)(nil),     // 13: gamehall.CSNewPlayerInfo
	(*SCNewPlayerInfo)(nil),     // 14: gamehall.SCNewPlayerInfo
	(*SCRebateTotalInfo)(nil),   // 15: gamehall.SCRebateTotalInfo
	(*CSCodeTypeRecord)(nil),    // 16: gamehall.CSCodeTypeRecord
	(*CodeTypeRecord)(nil),      // 17: gamehall.CodeTypeRecord
	(*SCCodeTypeRecord)(nil),    // 18: gamehall.SCCodeTypeRecord
	(*CSBetCoinRecord)(nil),     // 19: gamehall.CSBetCoinRecord
	(*BetCoinRecord)(nil),       // 20: gamehall.BetCoinRecord
	(*SCBetCoinRecord)(nil),     // 21: gamehall.SCBetCoinRecord
	(*CSCoinDetailed)(nil),      // 22: gamehall.CSCoinDetailed
	(*CoinDetailed)(nil),        // 23: gamehall.CoinDetailed
	(*SCCoinDetailedTotal)(nil), // 24: gamehall.SCCoinDetailedTotal
	(*SCCoinTotal)(nil),         // 25: gamehall.SCCoinTotal
	(*CSReportForm)(nil),        // 26: gamehall.CSReportForm
	(*SCReportForm)(nil),        // 27: gamehall.SCReportForm
	(*CSHistoryRecord)(nil),     // 28: gamehall.CSHistoryRecord
	(*HistoryRecord)(nil),       // 29: gamehall.HistoryRecord
	(*SCHistoryRecord)(nil),     // 30: gamehall.SCHistoryRecord
	(*CSReceiveCodeCoin)(nil),   // 31: gamehall.CSReceiveCodeCoin
	(*SCReceiveCodeCoin)(nil),   // 32: gamehall.SCReceiveCodeCoin
	(*CSGetRankInfo)(nil),       // 33: gamehall.CSGetRankInfo
	(*RankInfo)(nil),            // 34: gamehall.RankInfo
	(*SCGetRankInfo)(nil),       // 35: gamehall.SCGetRankInfo
	(*ShowRed)(nil),             // 36: gamehall.ShowRed
	(*SCShowRed)(nil),           // 37: gamehall.SCShowRed
}
var file_hallpacket_proto_depIdxs = []int32{
	4,  // 0: gamehall.SCRebateList.RebateList:type_name -> gamehall.RebateInfo
	0,  // 1: gamehall.SCReceiveRebate.OpRetCode:type_name -> gamehall.OpResultCode_Hall
	0,  // 2: gamehall.SCGetIsCanRebate.OpRetCode:type_name -> gamehall.OpResultCode_Hall
	2,  // 3: gamehall.CSCodeTypeRecord.ShowTypeId:type_name -> gamehall.HallOperaCode
	2,  // 4: gamehall.SCCodeTypeRecord.ShowType:type_name -> gamehall.HallOperaCode
	17, // 5: gamehall.SCCodeTypeRecord.CodeTypeRecord:type_name -> gamehall.CodeTypeRecord
	2,  // 6: gamehall.CSBetCoinRecord.ShowTypeId:type_name -> gamehall.HallOperaCode
	20, // 7: gamehall.SCBetCoinRecord.BetCoinRecord:type_name -> gamehall.BetCoinRecord
	23, // 8: gamehall.SCCoinDetailedTotal.CoinDetailed:type_name -> gamehall.CoinDetailed
	2,  // 9: gamehall.CSReportForm.ShowTypeId:type_name -> gamehall.HallOperaCode
	29, // 10: gamehall.SCHistoryRecord.HistoryRecord:type_name -> gamehall.HistoryRecord
	0,  // 11: gamehall.SCReceiveCodeCoin.OpRetCode:type_name -> gamehall.OpResultCode_Hall
	34, // 12: gamehall.SCGetRankInfo.Info:type_name -> gamehall.RankInfo
	3,  // 13: gamehall.ShowRed.ShowType:type_name -> gamehall.ShowRedCode
	36, // 14: gamehall.SCShowRed.ShowRed:type_name -> gamehall.ShowRed
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_hallpacket_proto_init() }
func file_hallpacket_proto_init() {
	if File_hallpacket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hallpacket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRebateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRebateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSReceiveRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCReceiveRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRedCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGetIsCanRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCGetIsCanRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallGameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSNewPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCNewPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRebateTotalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCodeTypeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeTypeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCodeTypeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSBetCoinRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetCoinRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCBetCoinRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSCoinDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinDetailedTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCCoinTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSReportForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCReportForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHistoryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSReceiveCodeCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCReceiveCodeCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSGetRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCGetRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hallpacket_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCShowRed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hallpacket_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hallpacket_proto_goTypes,
		DependencyIndexes: file_hallpacket_proto_depIdxs,
		EnumInfos:         file_hallpacket_proto_enumTypes,
		MessageInfos:      file_hallpacket_proto_msgTypes,
	}.Build()
	File_hallpacket_proto = out.File
	file_hallpacket_proto_rawDesc = nil
	file_hallpacket_proto_goTypes = nil
	file_hallpacket_proto_depIdxs = nil
}
