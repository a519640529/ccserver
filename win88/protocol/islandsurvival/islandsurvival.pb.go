// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: islandsurvival.proto

package islandsurvival

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode int32

const (
	OpResultCode_OPRC_Sucess OpResultCode = 0 //成功
	OpResultCode_OPRC_Error  OpResultCode = 1 //失败
)

// Enum value maps for OpResultCode.
var (
	OpResultCode_name = map[int32]string{
		0: "OPRC_Sucess",
		1: "OPRC_Error",
	}
	OpResultCode_value = map[string]int32{
		"OPRC_Sucess": 0,
		"OPRC_Error":  1,
	}
)

func (x OpResultCode) Enum() *OpResultCode {
	p := new(OpResultCode)
	*p = x
	return p
}

func (x OpResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_islandsurvival_proto_enumTypes[0].Descriptor()
}

func (OpResultCode) Type() protoreflect.EnumType {
	return &file_islandsurvival_proto_enumTypes[0]
}

func (x OpResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode.Descriptor instead.
func (OpResultCode) EnumDescriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{0}
}

//绝地求生 4800-4899
type IslandSurvivalPacketID int32

const (
	IslandSurvivalPacketID_PACKET_IslandSurvival_ZERO          IslandSurvivalPacketID = 0    // 弃用消息号
	IslandSurvivalPacketID_PACKET_SC_ISLANDSURVIVAL_ROOMINFO   IslandSurvivalPacketID = 4800 //房间信息
	IslandSurvivalPacketID_PACKET_CS_ISLANDSURVIVAL_PLAYEROP   IslandSurvivalPacketID = 4801 //玩家操作（客户-》服务）
	IslandSurvivalPacketID_PACKET_SC_ISLANDSURVIVAL_PLAYEROP   IslandSurvivalPacketID = 4802 //玩家操作（服务-》客户）
	IslandSurvivalPacketID_PACKET_SC_ISLANDSURVIVAL_GAMEBILLED IslandSurvivalPacketID = 4803 //游戏结算
)

// Enum value maps for IslandSurvivalPacketID.
var (
	IslandSurvivalPacketID_name = map[int32]string{
		0:    "PACKET_IslandSurvival_ZERO",
		4800: "PACKET_SC_ISLANDSURVIVAL_ROOMINFO",
		4801: "PACKET_CS_ISLANDSURVIVAL_PLAYEROP",
		4802: "PACKET_SC_ISLANDSURVIVAL_PLAYEROP",
		4803: "PACKET_SC_ISLANDSURVIVAL_GAMEBILLED",
	}
	IslandSurvivalPacketID_value = map[string]int32{
		"PACKET_IslandSurvival_ZERO":          0,
		"PACKET_SC_ISLANDSURVIVAL_ROOMINFO":   4800,
		"PACKET_CS_ISLANDSURVIVAL_PLAYEROP":   4801,
		"PACKET_SC_ISLANDSURVIVAL_PLAYEROP":   4802,
		"PACKET_SC_ISLANDSURVIVAL_GAMEBILLED": 4803,
	}
)

func (x IslandSurvivalPacketID) Enum() *IslandSurvivalPacketID {
	p := new(IslandSurvivalPacketID)
	*p = x
	return p
}

func (x IslandSurvivalPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IslandSurvivalPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_islandsurvival_proto_enumTypes[1].Descriptor()
}

func (IslandSurvivalPacketID) Type() protoreflect.EnumType {
	return &file_islandsurvival_proto_enumTypes[1]
}

func (x IslandSurvivalPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IslandSurvivalPacketID.Descriptor instead.
func (IslandSurvivalPacketID) EnumDescriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{1}
}

type IslandSurvivalPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	HeadOutLine int32    `protobuf:"varint,10,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,11,opt,name=VIP,proto3" json:"VIP,omitempty"`
	LeftEnemy   int32    `protobuf:"varint,12,opt,name=LeftEnemy,proto3" json:"LeftEnemy,omitempty"` //剩余敌人
	Killed      int32    `protobuf:"varint,13,opt,name=Killed,proto3" json:"Killed,omitempty"`       //击杀敌人
	IsGaming    bool     `protobuf:"varint,14,opt,name=IsGaming,proto3" json:"IsGaming,omitempty"`   //是否开始游戏
	Step        int32    `protobuf:"varint,15,opt,name=Step,proto3" json:"Step,omitempty"`           //当前处于的阶段  0准备阶段 1开始阶段 2小游戏阶段
	Deadline    int32    `protobuf:"varint,16,opt,name=Deadline,proto3" json:"Deadline,omitempty"`   //阶段截止时间戳 (只在小游戏阶段有用)
}

func (x *IslandSurvivalPlayerData) Reset() {
	*x = IslandSurvivalPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandSurvivalPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandSurvivalPlayerData) ProtoMessage() {}

func (x *IslandSurvivalPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandSurvivalPlayerData.ProtoReflect.Descriptor instead.
func (*IslandSurvivalPlayerData) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{0}
}

func (x *IslandSurvivalPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IslandSurvivalPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *IslandSurvivalPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *IslandSurvivalPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetLeftEnemy() int32 {
	if x != nil {
		return x.LeftEnemy
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetKilled() int32 {
	if x != nil {
		return x.Killed
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetIsGaming() bool {
	if x != nil {
		return x.IsGaming
	}
	return false
}

func (x *IslandSurvivalPlayerData) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *IslandSurvivalPlayerData) GetDeadline() int32 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

//房间信息
type SCIslandSurvivalRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      int32                       `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"`                   //房间id
	Creator     int32                       `protobuf:"varint,2,opt,name=Creator,proto3" json:"Creator,omitempty"`                 //创建者SnId
	GameId      int32                       `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                   //游戏id
	RoomMode    int32                       `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`               //游戏模式
	Params      []int32                     `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`            //规则参数
	NumOfGames  int32                       `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`           //当前第几局
	Cards       []int32                     `protobuf:"varint,7,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`              //牌数据 (没开牌之前是两个-1)
	State       int32                       `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                     //房间当前状态
	TimeOut     int32                       `protobuf:"varint,9,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`                 //等待剩余时间 单位:毫秒
	DisbandGen  int32                       `protobuf:"varint,10,opt,name=DisbandGen,proto3" json:"DisbandGen,omitempty"`          //解散申请
	AgentId     int32                       `protobuf:"varint,11,opt,name=AgentId,proto3" json:"AgentId,omitempty"`                //代开房者
	ParamsEx    []int32                     `protobuf:"varint,12,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`       //其他参数
	SceneType   int32                       `protobuf:"varint,13,opt,name=SceneType,proto3" json:"SceneType,omitempty"`            //房间模式 1:初级模式 3:高级模式
	Players     []*IslandSurvivalPlayerData `protobuf:"bytes,14,rep,name=Players,proto3" json:"Players,omitempty"`                 //房间内的玩家信息
	ChipData    int32                       `protobuf:"varint,15,opt,name=ChipData,proto3" json:"ChipData,omitempty"`              //当前选择的筹码
	FreeTimes   int32                       `protobuf:"varint,16,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`            //免费转动次数
	OtherParams []int32                     `protobuf:"varint,17,rep,packed,name=OtherParams,proto3" json:"OtherParams,omitempty"` //其它参数
	FreeWinCoin int64                       `protobuf:"varint,18,opt,name=FreeWinCoin,proto3" json:"FreeWinCoin,omitempty"`        //免费转动获得金币
	GameFreeId  int32                       `protobuf:"varint,19,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
}

func (x *SCIslandSurvivalRoomInfo) Reset() {
	*x = SCIslandSurvivalRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIslandSurvivalRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIslandSurvivalRoomInfo) ProtoMessage() {}

func (x *SCIslandSurvivalRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIslandSurvivalRoomInfo.ProtoReflect.Descriptor instead.
func (*SCIslandSurvivalRoomInfo) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{1}
}

func (x *SCIslandSurvivalRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCIslandSurvivalRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCIslandSurvivalRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetDisbandGen() int32 {
	if x != nil {
		return x.DisbandGen
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCIslandSurvivalRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetPlayers() []*IslandSurvivalPlayerData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SCIslandSurvivalRoomInfo) GetChipData() int32 {
	if x != nil {
		return x.ChipData
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetOtherParams() []int32 {
	if x != nil {
		return x.OtherParams
	}
	return nil
}

func (x *SCIslandSurvivalRoomInfo) GetFreeWinCoin() int64 {
	if x != nil {
		return x.FreeWinCoin
	}
	return 0
}

func (x *SCIslandSurvivalRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

//玩家操作
//IslandSurvivalPlayerOpStart 0 游戏
//IslandSurvivalPlayerOpSmallGame 1 选择吃鸡
type CSIslandSurvivalOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *CSIslandSurvivalOp) Reset() {
	*x = CSIslandSurvivalOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSIslandSurvivalOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSIslandSurvivalOp) ProtoMessage() {}

func (x *CSIslandSurvivalOp) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSIslandSurvivalOp.ProtoReflect.Descriptor instead.
func (*CSIslandSurvivalOp) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{2}
}

func (x *CSIslandSurvivalOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSIslandSurvivalOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
type SCIslandSurvivalOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId      int32        `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`                                            //玩家ID
	OpCode    int32        `protobuf:"varint,2,opt,name=OpCode,proto3" json:"OpCode,omitempty"`                                        //操作码
	Params    []int64      `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"`                                 //操作参数
	OpRetCode OpResultCode `protobuf:"varint,4,opt,name=OpRetCode,proto3,enum=islandsurvival.OpResultCode" json:"OpRetCode,omitempty"` //操作结果
}

func (x *SCIslandSurvivalOp) Reset() {
	*x = SCIslandSurvivalOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIslandSurvivalOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIslandSurvivalOp) ProtoMessage() {}

func (x *SCIslandSurvivalOp) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIslandSurvivalOp.ProtoReflect.Descriptor instead.
func (*SCIslandSurvivalOp) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{3}
}

func (x *SCIslandSurvivalOp) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *SCIslandSurvivalOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCIslandSurvivalOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCIslandSurvivalOp) GetOpRetCode() OpResultCode {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_OPRC_Sucess
}

//每条线的结算数据
type IslandSurvivalLinesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos      []int32 `protobuf:"varint,1,rep,packed,name=Pos,proto3" json:"Pos,omitempty"`    //中奖位置 索引从0开始
	WinScore int32   `protobuf:"varint,2,opt,name=WinScore,proto3" json:"WinScore,omitempty"` //中奖分数
	WinItem  int32   `protobuf:"varint,3,opt,name=WinItem,proto3" json:"WinItem,omitempty"`   //中奖的元素
}

func (x *IslandSurvivalLinesInfo) Reset() {
	*x = IslandSurvivalLinesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IslandSurvivalLinesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IslandSurvivalLinesInfo) ProtoMessage() {}

func (x *IslandSurvivalLinesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IslandSurvivalLinesInfo.ProtoReflect.Descriptor instead.
func (*IslandSurvivalLinesInfo) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{4}
}

func (x *IslandSurvivalLinesInfo) GetPos() []int32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *IslandSurvivalLinesInfo) GetWinScore() int32 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *IslandSurvivalLinesInfo) GetWinItem() int32 {
	if x != nil {
		return x.WinItem
	}
	return 0
}

//发送给客户端的数据
type SCIslandSurvivalGameBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards       []int32                    `protobuf:"varint,1,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`       //需要翻出的牌，数组15个
	AllWinScore int64                      `protobuf:"varint,2,opt,name=AllWinScore,proto3" json:"AllWinScore,omitempty"`  //中奖的总分数
	Lines       []*IslandSurvivalLinesInfo `protobuf:"bytes,3,rep,name=Lines,proto3" json:"Lines,omitempty"`               //中奖的结果数组,存每条线的情况
	FreeTimes   int32                      `protobuf:"varint,4,opt,name=FreeTimes,proto3" json:"FreeTimes,omitempty"`      //剩余免费转动次数
	FreeType    int32                      `protobuf:"varint,5,opt,name=FreeType,proto3" json:"FreeType,omitempty"`        //免费转动类型
	LeftEnemy   int32                      `protobuf:"varint,6,opt,name=LeftEnemy,proto3" json:"LeftEnemy,omitempty"`      //剩余敌人
	Killed      int32                      `protobuf:"varint,7,opt,name=Killed,proto3" json:"Killed,omitempty"`            //击杀敌人
	Identity    []int32                    `protobuf:"varint,8,rep,packed,name=Identity,proto3" json:"Identity,omitempty"` //击杀者身份列表 0 npc 1 自己
	FreeWinCoin int64                      `protobuf:"varint,9,opt,name=FreeWinCoin,proto3" json:"FreeWinCoin,omitempty"`  //免费转动获得金币
}

func (x *SCIslandSurvivalGameBilled) Reset() {
	*x = SCIslandSurvivalGameBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_islandsurvival_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCIslandSurvivalGameBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIslandSurvivalGameBilled) ProtoMessage() {}

func (x *SCIslandSurvivalGameBilled) ProtoReflect() protoreflect.Message {
	mi := &file_islandsurvival_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIslandSurvivalGameBilled.ProtoReflect.Descriptor instead.
func (*SCIslandSurvivalGameBilled) Descriptor() ([]byte, []int) {
	return file_islandsurvival_proto_rawDescGZIP(), []int{5}
}

func (x *SCIslandSurvivalGameBilled) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCIslandSurvivalGameBilled) GetAllWinScore() int64 {
	if x != nil {
		return x.AllWinScore
	}
	return 0
}

func (x *SCIslandSurvivalGameBilled) GetLines() []*IslandSurvivalLinesInfo {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *SCIslandSurvivalGameBilled) GetFreeTimes() int32 {
	if x != nil {
		return x.FreeTimes
	}
	return 0
}

func (x *SCIslandSurvivalGameBilled) GetFreeType() int32 {
	if x != nil {
		return x.FreeType
	}
	return 0
}

func (x *SCIslandSurvivalGameBilled) GetLeftEnemy() int32 {
	if x != nil {
		return x.LeftEnemy
	}
	return 0
}

func (x *SCIslandSurvivalGameBilled) GetKilled() int32 {
	if x != nil {
		return x.Killed
	}
	return 0
}

func (x *SCIslandSurvivalGameBilled) GetIdentity() []int32 {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SCIslandSurvivalGameBilled) GetFreeWinCoin() int64 {
	if x != nil {
		return x.FreeWinCoin
	}
	return 0
}

var File_islandsurvival_proto protoreflect.FileDescriptor

var file_islandsurvival_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x75,
	0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x22, 0x84, 0x03, 0x0a, 0x18, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f,
	0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65,
	0x61, 0x64, 0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x65, 0x66, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd4, 0x04,
	0x0a, 0x18, 0x53, 0x43, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76,
	0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f,
	0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75,
	0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x78, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x72, 0x76,
	0x69, 0x76, 0x61, 0x6c, 0x2e, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69,
	0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x68, 0x69, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x53, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x53,
	0x43, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x61, 0x0a, 0x17, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69,
	0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x53, 0x43, 0x49, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x2e, 0x49, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46,
	0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x65, 0x6d,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x57, 0x69,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x72, 0x65,
	0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x2a, 0x2f, 0x0a, 0x0c, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x52, 0x43,
	0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x52,
	0x43, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0xda, 0x01, 0x0a, 0x16, 0x49, 0x73,
	0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x41, 0x4c,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xc0, 0x25, 0x12, 0x26, 0x0a, 0x21,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44,
	0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f,
	0x50, 0x10, 0xc1, 0x25, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x41, 0x4c,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xc2, 0x25, 0x12, 0x28, 0x0a, 0x23,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44,
	0x53, 0x55, 0x52, 0x56, 0x49, 0x56, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x42, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0xc3, 0x25, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x3b, 0x69, 0x73, 0x6c, 0x61,
	0x6e, 0x64, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_islandsurvival_proto_rawDescOnce sync.Once
	file_islandsurvival_proto_rawDescData = file_islandsurvival_proto_rawDesc
)

func file_islandsurvival_proto_rawDescGZIP() []byte {
	file_islandsurvival_proto_rawDescOnce.Do(func() {
		file_islandsurvival_proto_rawDescData = protoimpl.X.CompressGZIP(file_islandsurvival_proto_rawDescData)
	})
	return file_islandsurvival_proto_rawDescData
}

var file_islandsurvival_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_islandsurvival_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_islandsurvival_proto_goTypes = []interface{}{
	(OpResultCode)(0),                  // 0: islandsurvival.OpResultCode
	(IslandSurvivalPacketID)(0),        // 1: islandsurvival.IslandSurvivalPacketID
	(*IslandSurvivalPlayerData)(nil),   // 2: islandsurvival.IslandSurvivalPlayerData
	(*SCIslandSurvivalRoomInfo)(nil),   // 3: islandsurvival.SCIslandSurvivalRoomInfo
	(*CSIslandSurvivalOp)(nil),         // 4: islandsurvival.CSIslandSurvivalOp
	(*SCIslandSurvivalOp)(nil),         // 5: islandsurvival.SCIslandSurvivalOp
	(*IslandSurvivalLinesInfo)(nil),    // 6: islandsurvival.IslandSurvivalLinesInfo
	(*SCIslandSurvivalGameBilled)(nil), // 7: islandsurvival.SCIslandSurvivalGameBilled
}
var file_islandsurvival_proto_depIdxs = []int32{
	2, // 0: islandsurvival.SCIslandSurvivalRoomInfo.Players:type_name -> islandsurvival.IslandSurvivalPlayerData
	0, // 1: islandsurvival.SCIslandSurvivalOp.OpRetCode:type_name -> islandsurvival.OpResultCode
	6, // 2: islandsurvival.SCIslandSurvivalGameBilled.Lines:type_name -> islandsurvival.IslandSurvivalLinesInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_islandsurvival_proto_init() }
func file_islandsurvival_proto_init() {
	if File_islandsurvival_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_islandsurvival_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandSurvivalPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_islandsurvival_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIslandSurvivalRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_islandsurvival_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSIslandSurvivalOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_islandsurvival_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIslandSurvivalOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_islandsurvival_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IslandSurvivalLinesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_islandsurvival_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCIslandSurvivalGameBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_islandsurvival_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_islandsurvival_proto_goTypes,
		DependencyIndexes: file_islandsurvival_proto_depIdxs,
		EnumInfos:         file_islandsurvival_proto_enumTypes,
		MessageInfos:      file_islandsurvival_proto_msgTypes,
	}.Build()
	File_islandsurvival_proto = out.File
	file_islandsurvival_proto_rawDesc = nil
	file_islandsurvival_proto_goTypes = nil
	file_islandsurvival_proto_depIdxs = nil
}
