// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: actsign.proto

package activity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//操作结果
type OpResultCode_ActSign int32

const (
	OpResultCode_ActSign_OPRC_Activity_Sign_Sucess           OpResultCode_ActSign = 0    //成功
	OpResultCode_ActSign_OPRC_Activity_Sign_Error            OpResultCode_ActSign = 1    //失败
	OpResultCode_ActSign_OPRC_Activity_Sign_Close            OpResultCode_ActSign = 1001 //活动未开启
	OpResultCode_ActSign_OPRC_Activity_Sign_PayNum_Low       OpResultCode_ActSign = 1002 //未达到最低充值金额
	OpResultCode_ActSign_OPRC_Activity_Sign_Config_Vip_Error OpResultCode_ActSign = 1003 //vip不匹配
	OpResultCode_ActSign_OPRC_Activity_Sign_Config_Day_Error OpResultCode_ActSign = 1004 //签到天数不匹配
	OpResultCode_ActSign_OPRC_Activity_Sign_Repeat           OpResultCode_ActSign = 1005 //重复签到
)

// Enum value maps for OpResultCode_ActSign.
var (
	OpResultCode_ActSign_name = map[int32]string{
		0:    "OPRC_Activity_Sign_Sucess",
		1:    "OPRC_Activity_Sign_Error",
		1001: "OPRC_Activity_Sign_Close",
		1002: "OPRC_Activity_Sign_PayNum_Low",
		1003: "OPRC_Activity_Sign_Config_Vip_Error",
		1004: "OPRC_Activity_Sign_Config_Day_Error",
		1005: "OPRC_Activity_Sign_Repeat",
	}
	OpResultCode_ActSign_value = map[string]int32{
		"OPRC_Activity_Sign_Sucess":           0,
		"OPRC_Activity_Sign_Error":            1,
		"OPRC_Activity_Sign_Close":            1001,
		"OPRC_Activity_Sign_PayNum_Low":       1002,
		"OPRC_Activity_Sign_Config_Vip_Error": 1003,
		"OPRC_Activity_Sign_Config_Day_Error": 1004,
		"OPRC_Activity_Sign_Repeat":           1005,
	}
)

func (x OpResultCode_ActSign) Enum() *OpResultCode_ActSign {
	p := new(OpResultCode_ActSign)
	*p = x
	return p
}

func (x OpResultCode_ActSign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResultCode_ActSign) Descriptor() protoreflect.EnumDescriptor {
	return file_actsign_proto_enumTypes[0].Descriptor()
}

func (OpResultCode_ActSign) Type() protoreflect.EnumType {
	return &file_actsign_proto_enumTypes[0]
}

func (x OpResultCode_ActSign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResultCode_ActSign.Descriptor instead.
func (OpResultCode_ActSign) EnumDescriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{0}
}

// 签到
type ActSignPacketID int32

const (
	ActSignPacketID_PACKET_SignZero   ActSignPacketID = 0    // 弃用消息号
	ActSignPacketID_PACKET_CSSign     ActSignPacketID = 2662 // 签到
	ActSignPacketID_PACKET_SCSign     ActSignPacketID = 2663
	ActSignPacketID_PACKET_CSSignData ActSignPacketID = 2664 // 签到数据
	ActSignPacketID_PACKET_SCSignData ActSignPacketID = 2665
)

// Enum value maps for ActSignPacketID.
var (
	ActSignPacketID_name = map[int32]string{
		0:    "PACKET_SignZero",
		2662: "PACKET_CSSign",
		2663: "PACKET_SCSign",
		2664: "PACKET_CSSignData",
		2665: "PACKET_SCSignData",
	}
	ActSignPacketID_value = map[string]int32{
		"PACKET_SignZero":   0,
		"PACKET_CSSign":     2662,
		"PACKET_SCSign":     2663,
		"PACKET_CSSignData": 2664,
		"PACKET_SCSignData": 2665,
	}
)

func (x ActSignPacketID) Enum() *ActSignPacketID {
	p := new(ActSignPacketID)
	*p = x
	return p
}

func (x ActSignPacketID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActSignPacketID) Descriptor() protoreflect.EnumDescriptor {
	return file_actsign_proto_enumTypes[1].Descriptor()
}

func (ActSignPacketID) Type() protoreflect.EnumType {
	return &file_actsign_proto_enumTypes[1]
}

func (x ActSignPacketID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActSignPacketID.Descriptor instead.
func (ActSignPacketID) EnumDescriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{1}
}

//PACKET_CSSign
type CSSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignIndex int32 `protobuf:"varint,1,opt,name=SignIndex,proto3" json:"SignIndex,omitempty"`
	SignType  int32 `protobuf:"varint,2,opt,name=SignType,proto3" json:"SignType,omitempty"` //0.普通签到 1.双倍签到
}

func (x *CSSign) Reset() {
	*x = CSSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actsign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSign) ProtoMessage() {}

func (x *CSSign) ProtoReflect() protoreflect.Message {
	mi := &file_actsign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSign.ProtoReflect.Descriptor instead.
func (*CSSign) Descriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{0}
}

func (x *CSSign) GetSignIndex() int32 {
	if x != nil {
		return x.SignIndex
	}
	return 0
}

func (x *CSSign) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

//PACKET_SCSign
type SCSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignIndex int32                `protobuf:"varint,1,opt,name=SignIndex,proto3" json:"SignIndex,omitempty"`
	SignType  int32                `protobuf:"varint,2,opt,name=SignType,proto3" json:"SignType,omitempty"` //0.普通签到 1.双倍签到
	OpRetCode OpResultCode_ActSign `protobuf:"varint,3,opt,name=OpRetCode,proto3,enum=activity.OpResultCode_ActSign" json:"OpRetCode,omitempty"`
}

func (x *SCSign) Reset() {
	*x = SCSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actsign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSign) ProtoMessage() {}

func (x *SCSign) ProtoReflect() protoreflect.Message {
	mi := &file_actsign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSign.ProtoReflect.Descriptor instead.
func (*SCSign) Descriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{1}
}

func (x *SCSign) GetSignIndex() int32 {
	if x != nil {
		return x.SignIndex
	}
	return 0
}

func (x *SCSign) GetSignType() int32 {
	if x != nil {
		return x.SignType
	}
	return 0
}

func (x *SCSign) GetOpRetCode() OpResultCode_ActSign {
	if x != nil {
		return x.OpRetCode
	}
	return OpResultCode_ActSign_OPRC_Activity_Sign_Sucess
}

//PACKET_CSSignData
type CSSignData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSSignData) Reset() {
	*x = CSSignData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actsign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSSignData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSSignData) ProtoMessage() {}

func (x *CSSignData) ProtoReflect() protoreflect.Message {
	mi := &file_actsign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSSignData.ProtoReflect.Descriptor instead.
func (*CSSignData) Descriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{2}
}

//PACKET_SCSignData
type SCSignData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignCount int32 `protobuf:"varint,1,opt,name=SignCount,proto3" json:"SignCount,omitempty"`
	TodaySign int32 `protobuf:"varint,2,opt,name=TodaySign,proto3" json:"TodaySign,omitempty"` //0.未签到 1.已签到
}

func (x *SCSignData) Reset() {
	*x = SCSignData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actsign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCSignData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCSignData) ProtoMessage() {}

func (x *SCSignData) ProtoReflect() protoreflect.Message {
	mi := &file_actsign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCSignData.ProtoReflect.Descriptor instead.
func (*SCSignData) Descriptor() ([]byte, []int) {
	return file_actsign_proto_rawDescGZIP(), []int{3}
}

func (x *SCSignData) GetSignCount() int32 {
	if x != nil {
		return x.SignCount
	}
	return 0
}

func (x *SCSignData) GetTodaySign() int32 {
	if x != nil {
		return x.TodaySign
	}
	return 0
}

var File_actsign_proto protoreflect.FileDescriptor

var file_actsign_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x42, 0x0a, 0x06, 0x43, 0x53, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01,
	0x0a, 0x06, 0x53, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x63,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x09, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48,
	0x0a, 0x0a, 0x53, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x2a, 0x8a, 0x02, 0x0a, 0x14, 0x4f, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x53, 0x69, 0x67, 0x6e, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0xe9, 0x07, 0x12, 0x22, 0x0a,
	0x1d, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x69, 0x67, 0x6e, 0x5f, 0x50, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0xea,
	0x07, 0x12, 0x28, 0x0a, 0x23, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x56,
	0x69, 0x70, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xeb, 0x07, 0x12, 0x28, 0x0a, 0x23, 0x4f,
	0x50, 0x52, 0x43, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x69, 0x67,
	0x6e, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x44, 0x61, 0x79, 0x5f, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xec, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x4f, 0x50, 0x52, 0x43, 0x5f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x5f, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x10, 0xed, 0x07, 0x2a, 0x7e, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x10, 0xe6,
	0x14, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x53, 0x69,
	0x67, 0x6e, 0x10, 0xe7, 0x14, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x53, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x10, 0xe8, 0x14, 0x12, 0x16, 0x0a,
	0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x10, 0xe9, 0x14, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_actsign_proto_rawDescOnce sync.Once
	file_actsign_proto_rawDescData = file_actsign_proto_rawDesc
)

func file_actsign_proto_rawDescGZIP() []byte {
	file_actsign_proto_rawDescOnce.Do(func() {
		file_actsign_proto_rawDescData = protoimpl.X.CompressGZIP(file_actsign_proto_rawDescData)
	})
	return file_actsign_proto_rawDescData
}

var file_actsign_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_actsign_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_actsign_proto_goTypes = []interface{}{
	(OpResultCode_ActSign)(0), // 0: activity.OpResultCode_ActSign
	(ActSignPacketID)(0),      // 1: activity.ActSignPacketID
	(*CSSign)(nil),            // 2: activity.CSSign
	(*SCSign)(nil),            // 3: activity.SCSign
	(*CSSignData)(nil),        // 4: activity.CSSignData
	(*SCSignData)(nil),        // 5: activity.SCSignData
}
var file_actsign_proto_depIdxs = []int32{
	0, // 0: activity.SCSign.OpRetCode:type_name -> activity.OpResultCode_ActSign
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_actsign_proto_init() }
func file_actsign_proto_init() {
	if File_actsign_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_actsign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actsign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actsign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSSignData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actsign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCSignData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actsign_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_actsign_proto_goTypes,
		DependencyIndexes: file_actsign_proto_depIdxs,
		EnumInfos:         file_actsign_proto_enumTypes,
		MessageInfos:      file_actsign_proto_msgTypes,
	}.Build()
	File_actsign_proto = out.File
	file_actsign_proto_rawDesc = nil
	file_actsign_proto_goTypes = nil
	file_actsign_proto_depIdxs = nil
}
