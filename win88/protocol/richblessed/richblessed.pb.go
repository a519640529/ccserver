// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: richblessed.proto

package richblessed

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//RichBlessed
//多财多福
type RBPID int32

const (
	RBPID_PACKET_RICHBLESSED_ZERO            RBPID = 0    // 弃用消息号
	RBPID_PACKET_RICHBLESSED_SCRBRoomInfo    RBPID = 5500 //房间信息
	RBPID_PACKET_RICHBLESSED_CSRichBlessedOp RBPID = 5501
	RBPID_PACKET_RICHBLESSED_SCRichBlessedOp RBPID = 5502
	RBPID_PACKET_RICHBLESSED_SCRBRoomState   RBPID = 5503
	RBPID_PACKET_RICHBLESSED_SCRBBilled      RBPID = 5504
	RBPID_PACKET_RICHBLESSED_SCRBPrize       RBPID = 5505
	RBPID_PACKET_RICHBLESSED_SCRBJACKBilled  RBPID = 5506 // 小游戏广播
)

// Enum value maps for RBPID.
var (
	RBPID_name = map[int32]string{
		0:    "PACKET_RICHBLESSED_ZERO",
		5500: "PACKET_RICHBLESSED_SCRBRoomInfo",
		5501: "PACKET_RICHBLESSED_CSRichBlessedOp",
		5502: "PACKET_RICHBLESSED_SCRichBlessedOp",
		5503: "PACKET_RICHBLESSED_SCRBRoomState",
		5504: "PACKET_RICHBLESSED_SCRBBilled",
		5505: "PACKET_RICHBLESSED_SCRBPrize",
		5506: "PACKET_RICHBLESSED_SCRBJACKBilled",
	}
	RBPID_value = map[string]int32{
		"PACKET_RICHBLESSED_ZERO":            0,
		"PACKET_RICHBLESSED_SCRBRoomInfo":    5500,
		"PACKET_RICHBLESSED_CSRichBlessedOp": 5501,
		"PACKET_RICHBLESSED_SCRichBlessedOp": 5502,
		"PACKET_RICHBLESSED_SCRBRoomState":   5503,
		"PACKET_RICHBLESSED_SCRBBilled":      5504,
		"PACKET_RICHBLESSED_SCRBPrize":       5505,
		"PACKET_RICHBLESSED_SCRBJACKBilled":  5506,
	}
)

func (x RBPID) Enum() *RBPID {
	p := new(RBPID)
	*p = x
	return p
}

func (x RBPID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RBPID) Descriptor() protoreflect.EnumDescriptor {
	return file_richblessed_proto_enumTypes[0].Descriptor()
}

func (RBPID) Type() protoreflect.EnumType {
	return &file_richblessed_proto_enumTypes[0]
}

func (x RBPID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RBPID.Descriptor instead.
func (RBPID) EnumDescriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{0}
}

type RBPlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                 //名字
	SnId        int32    `protobuf:"varint,2,opt,name=SnId,proto3" json:"SnId,omitempty"`                //账号
	Head        int32    `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`                //头像
	Sex         int32    `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`                  //性别
	Coin        int64    `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`                //金币
	Pos         int32    `protobuf:"varint,6,opt,name=Pos,proto3" json:"Pos,omitempty"`                  //座位位置
	Flag        int32    `protobuf:"varint,7,opt,name=Flag,proto3" json:"Flag,omitempty"`                //二进制标记
	Params      []string `protobuf:"bytes,8,rep,name=Params,proto3" json:"Params,omitempty"`             //其他数据 如:ip 等
	City        string   `protobuf:"bytes,9,opt,name=City,proto3" json:"City,omitempty"`                 //城市
	HeadOutLine int32    `protobuf:"varint,10,opt,name=HeadOutLine,proto3" json:"HeadOutLine,omitempty"` //头像框
	VIP         int32    `protobuf:"varint,11,opt,name=VIP,proto3" json:"VIP,omitempty"`
}

func (x *RBPlayerData) Reset() {
	*x = RBPlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RBPlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBPlayerData) ProtoMessage() {}

func (x *RBPlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBPlayerData.ProtoReflect.Descriptor instead.
func (*RBPlayerData) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{0}
}

func (x *RBPlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RBPlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *RBPlayerData) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *RBPlayerData) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *RBPlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *RBPlayerData) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *RBPlayerData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *RBPlayerData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RBPlayerData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *RBPlayerData) GetHeadOutLine() int32 {
	if x != nil {
		return x.HeadOutLine
	}
	return 0
}

func (x *RBPlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

type RichWinLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poss     []int32 `protobuf:"varint,1,rep,packed,name=Poss,proto3" json:"Poss,omitempty"`  //中奖 元素组(0-14)
	WinScore int64   `protobuf:"varint,2,opt,name=WinScore,proto3" json:"WinScore,omitempty"` //单线分数
}

func (x *RichWinLine) Reset() {
	*x = RichWinLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichWinLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichWinLine) ProtoMessage() {}

func (x *RichWinLine) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichWinLine.ProtoReflect.Descriptor instead.
func (*RichWinLine) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{1}
}

func (x *RichWinLine) GetPoss() []int32 {
	if x != nil {
		return x.Poss
	}
	return nil
}

func (x *RichWinLine) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

//房间信息
//PACKET_RICHBLESSED_SCRBRoomInfo
type SCRBRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        int32          `protobuf:"varint,1,opt,name=RoomId,proto3" json:"RoomId,omitempty"` //房间id
	GameFreeId    int32          `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	GameId        int32          `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`                //游戏id
	RoomMode      int32          `protobuf:"varint,4,opt,name=RoomMode,proto3" json:"RoomMode,omitempty"`            //游戏模式
	Params        []int32        `protobuf:"varint,5,rep,packed,name=Params,proto3" json:"Params,omitempty"`         //规则参数
	NumOfGames    int32          `protobuf:"varint,6,opt,name=NumOfGames,proto3" json:"NumOfGames,omitempty"`        //当前第几局
	State         int32          `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`                  //房间当前状态
	ParamsEx      []int32        `protobuf:"varint,8,rep,packed,name=ParamsEx,proto3" json:"ParamsEx,omitempty"`     //其他参数
	SceneType     int32          `protobuf:"varint,9,opt,name=SceneType,proto3" json:"SceneType,omitempty"`          //房间模式
	Player        *RBPlayerData  `protobuf:"bytes,10,opt,name=Player,proto3" json:"Player,omitempty"`                //房间内的玩家信息
	Cards         []int32        `protobuf:"varint,11,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`          //元素
	NowGameState  int32          `protobuf:"varint,12,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`   //当前游戏状态 0.正常 1.免费游戏
	BetIdx        int32          `protobuf:"varint,13,opt,name=BetIdx,proto3" json:"BetIdx,omitempty"`               //下注索引
	FreeAllWin    int64          `protobuf:"varint,14,opt,name=FreeAllWin,proto3" json:"FreeAllWin,omitempty"`       //免费游戏获得总金额
	SmallJackpot  int64          `protobuf:"varint,15,opt,name=SmallJackpot,proto3" json:"SmallJackpot,omitempty"`   //当前小奖池金额
	WinJackpot    int64          `protobuf:"varint,16,opt,name=WinJackpot,proto3" json:"WinJackpot,omitempty"`       //当局Jackpot爆奖
	WinEleCoin    int64          `protobuf:"varint,17,opt,name=WinEleCoin,proto3" json:"WinEleCoin,omitempty"`       //线赢的金额
	WinRate       int64          `protobuf:"varint,18,opt,name=WinRate,proto3" json:"WinRate,omitempty"`             //线倍率
	FreeNum       int64          `protobuf:"varint,19,opt,name=FreeNum,proto3" json:"FreeNum,omitempty"`             //当前剩余免费次数
	AddFreeNum    int64          `protobuf:"varint,20,opt,name=AddFreeNum,proto3" json:"AddFreeNum,omitempty"`       //新增免费次数
	JackpotEle    int32          `protobuf:"varint,21,opt,name=JackpotEle,proto3" json:"JackpotEle,omitempty"`       //-1 未中奖 0 金色男孩 1 金色女孩 2 蓝色男孩 3 蓝色女孩
	WinLines      []*RichWinLine `protobuf:"bytes,22,rep,name=WinLines,proto3" json:"WinLines,omitempty"`            //中奖线
	MiddleJackpot int64          `protobuf:"varint,23,opt,name=MiddleJackpot,proto3" json:"MiddleJackpot,omitempty"` //当前中奖池金额
	BigJackpot    int64          `protobuf:"varint,24,opt,name=BigJackpot,proto3" json:"BigJackpot,omitempty"`       //当前大奖池金额
	GrandJackpot  int64          `protobuf:"varint,25,opt,name=GrandJackpot,proto3" json:"GrandJackpot,omitempty"`   //当前巨奖池金额
}

func (x *SCRBRoomInfo) Reset() {
	*x = SCRBRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRBRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRBRoomInfo) ProtoMessage() {}

func (x *SCRBRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRBRoomInfo.ProtoReflect.Descriptor instead.
func (*SCRBRoomInfo) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{2}
}

func (x *SCRBRoomInfo) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *SCRBRoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *SCRBRoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SCRBRoomInfo) GetRoomMode() int32 {
	if x != nil {
		return x.RoomMode
	}
	return 0
}

func (x *SCRBRoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SCRBRoomInfo) GetNumOfGames() int32 {
	if x != nil {
		return x.NumOfGames
	}
	return 0
}

func (x *SCRBRoomInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRBRoomInfo) GetParamsEx() []int32 {
	if x != nil {
		return x.ParamsEx
	}
	return nil
}

func (x *SCRBRoomInfo) GetSceneType() int32 {
	if x != nil {
		return x.SceneType
	}
	return 0
}

func (x *SCRBRoomInfo) GetPlayer() *RBPlayerData {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *SCRBRoomInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCRBRoomInfo) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCRBRoomInfo) GetBetIdx() int32 {
	if x != nil {
		return x.BetIdx
	}
	return 0
}

func (x *SCRBRoomInfo) GetFreeAllWin() int64 {
	if x != nil {
		return x.FreeAllWin
	}
	return 0
}

func (x *SCRBRoomInfo) GetSmallJackpot() int64 {
	if x != nil {
		return x.SmallJackpot
	}
	return 0
}

func (x *SCRBRoomInfo) GetWinJackpot() int64 {
	if x != nil {
		return x.WinJackpot
	}
	return 0
}

func (x *SCRBRoomInfo) GetWinEleCoin() int64 {
	if x != nil {
		return x.WinEleCoin
	}
	return 0
}

func (x *SCRBRoomInfo) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *SCRBRoomInfo) GetFreeNum() int64 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *SCRBRoomInfo) GetAddFreeNum() int64 {
	if x != nil {
		return x.AddFreeNum
	}
	return 0
}

func (x *SCRBRoomInfo) GetJackpotEle() int32 {
	if x != nil {
		return x.JackpotEle
	}
	return 0
}

func (x *SCRBRoomInfo) GetWinLines() []*RichWinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *SCRBRoomInfo) GetMiddleJackpot() int64 {
	if x != nil {
		return x.MiddleJackpot
	}
	return 0
}

func (x *SCRBRoomInfo) GetBigJackpot() int64 {
	if x != nil {
		return x.BigJackpot
	}
	return 0
}

func (x *SCRBRoomInfo) GetGrandJackpot() int64 {
	if x != nil {
		return x.GrandJackpot
	}
	return 0
}

//玩家操作
//PACKET_RICHBLESSED_CSRichBlessedOp
type CSRichBlessedOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码 0.旋转 1.切换 2 jack领奖
	Params []int64 `protobuf:"varint,2,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数 下注索引编号
}

func (x *CSRichBlessedOp) Reset() {
	*x = CSRichBlessedOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRichBlessedOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRichBlessedOp) ProtoMessage() {}

func (x *CSRichBlessedOp) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRichBlessedOp.ProtoReflect.Descriptor instead.
func (*CSRichBlessedOp) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{3}
}

func (x *CSRichBlessedOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *CSRichBlessedOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//玩家操作返回
//PACKET_RICHBLESSED_SCRichBlessedOp
type SCRichBlessedOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode    int32   `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`        //操作码
	OpRetCode int32   `protobuf:"varint,2,opt,name=OpRetCode,proto3" json:"OpRetCode,omitempty"`  //操作结果 1.金币不足 2.低于该值不能押注
	Params    []int64 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //操作参数
}

func (x *SCRichBlessedOp) Reset() {
	*x = SCRichBlessedOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRichBlessedOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRichBlessedOp) ProtoMessage() {}

func (x *SCRichBlessedOp) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRichBlessedOp.ProtoReflect.Descriptor instead.
func (*SCRichBlessedOp) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{4}
}

func (x *SCRichBlessedOp) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *SCRichBlessedOp) GetOpRetCode() int32 {
	if x != nil {
		return x.OpRetCode
	}
	return 0
}

func (x *SCRichBlessedOp) GetParams() []int64 {
	if x != nil {
		return x.Params
	}
	return nil
}

//房间状态
//PACKET_RICHBLESSED_SCRBRoomState
type SCRBRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    int32   `protobuf:"varint,1,opt,name=State,proto3" json:"State,omitempty"`          //房间当前状态
	SubState int32   `protobuf:"varint,2,opt,name=SubState,proto3" json:"SubState,omitempty"`    //房间当前子状态
	Params   []int32 `protobuf:"varint,3,rep,packed,name=Params,proto3" json:"Params,omitempty"` //状态参数
}

func (x *SCRBRoomState) Reset() {
	*x = SCRBRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRBRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRBRoomState) ProtoMessage() {}

func (x *SCRBRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRBRoomState.ProtoReflect.Descriptor instead.
func (*SCRBRoomState) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{5}
}

func (x *SCRBRoomState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SCRBRoomState) GetSubState() int32 {
	if x != nil {
		return x.SubState
	}
	return 0
}

func (x *SCRBRoomState) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

//PACKET_RICHBLESSED_SCRBPrize
type SCRBPrize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrizePool int64 `protobuf:"varint,1,opt,name=PrizePool,proto3" json:"PrizePool,omitempty"` //奖池
}

func (x *SCRBPrize) Reset() {
	*x = SCRBPrize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRBPrize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRBPrize) ProtoMessage() {}

func (x *SCRBPrize) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRBPrize.ProtoReflect.Descriptor instead.
func (*SCRBPrize) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{6}
}

func (x *SCRBPrize) GetPrizePool() int64 {
	if x != nil {
		return x.PrizePool
	}
	return 0
}

//PACKET_RICHBLESSED_SCRBBilled
type SCRBBilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowGameState  int32          `protobuf:"varint,1,opt,name=NowGameState,proto3" json:"NowGameState,omitempty"`    //当前游戏状态 0.正常 1.免费游戏
	BetIdx        int32          `protobuf:"varint,2,opt,name=BetIdx,proto3" json:"BetIdx,omitempty"`                //下注索引
	Coin          int64          `protobuf:"varint,3,opt,name=Coin,proto3" json:"Coin,omitempty"`                    //当前身上的金币
	Cards         []int32        `protobuf:"varint,4,rep,packed,name=Cards,proto3" json:"Cards,omitempty"`           //元素
	FreeAllWin    int64          `protobuf:"varint,5,opt,name=FreeAllWin,proto3" json:"FreeAllWin,omitempty"`        //免费游戏获得总金额
	SmallJackpot  int64          `protobuf:"varint,6,opt,name=SmallJackpot,proto3" json:"SmallJackpot,omitempty"`    //当前小奖池金额
	WinJackpot    int64          `protobuf:"varint,7,opt,name=WinJackpot,proto3" json:"WinJackpot,omitempty"`        //当局Jackpot爆奖
	WinEleCoin    int64          `protobuf:"varint,8,opt,name=WinEleCoin,proto3" json:"WinEleCoin,omitempty"`        //线赢的金额
	WinRate       int64          `protobuf:"varint,9,opt,name=WinRate,proto3" json:"WinRate,omitempty"`              //线倍率
	FreeNum       int64          `protobuf:"varint,10,opt,name=FreeNum,proto3" json:"FreeNum,omitempty"`             //当前剩余免费次数
	AddFreeNum    int64          `protobuf:"varint,11,opt,name=AddFreeNum,proto3" json:"AddFreeNum,omitempty"`       //新增免费次数
	JackpotEle    int32          `protobuf:"varint,12,opt,name=JackpotEle,proto3" json:"JackpotEle,omitempty"`       //-1 未中奖 0 金色男孩 1 金色女孩 2 蓝色男孩 3 蓝色女孩
	WinLines      []*RichWinLine `protobuf:"bytes,13,rep,name=WinLines,proto3" json:"WinLines,omitempty"`            //中奖线
	MiddleJackpot int64          `protobuf:"varint,14,opt,name=MiddleJackpot,proto3" json:"MiddleJackpot,omitempty"` //当前中奖池金额
	BigJackpot    int64          `protobuf:"varint,15,opt,name=BigJackpot,proto3" json:"BigJackpot,omitempty"`       //当前大奖池金额
	GrandJackpot  int64          `protobuf:"varint,16,opt,name=GrandJackpot,proto3" json:"GrandJackpot,omitempty"`   //当前巨奖池金额
}

func (x *SCRBBilled) Reset() {
	*x = SCRBBilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_richblessed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRBBilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRBBilled) ProtoMessage() {}

func (x *SCRBBilled) ProtoReflect() protoreflect.Message {
	mi := &file_richblessed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRBBilled.ProtoReflect.Descriptor instead.
func (*SCRBBilled) Descriptor() ([]byte, []int) {
	return file_richblessed_proto_rawDescGZIP(), []int{7}
}

func (x *SCRBBilled) GetNowGameState() int32 {
	if x != nil {
		return x.NowGameState
	}
	return 0
}

func (x *SCRBBilled) GetBetIdx() int32 {
	if x != nil {
		return x.BetIdx
	}
	return 0
}

func (x *SCRBBilled) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *SCRBBilled) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SCRBBilled) GetFreeAllWin() int64 {
	if x != nil {
		return x.FreeAllWin
	}
	return 0
}

func (x *SCRBBilled) GetSmallJackpot() int64 {
	if x != nil {
		return x.SmallJackpot
	}
	return 0
}

func (x *SCRBBilled) GetWinJackpot() int64 {
	if x != nil {
		return x.WinJackpot
	}
	return 0
}

func (x *SCRBBilled) GetWinEleCoin() int64 {
	if x != nil {
		return x.WinEleCoin
	}
	return 0
}

func (x *SCRBBilled) GetWinRate() int64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *SCRBBilled) GetFreeNum() int64 {
	if x != nil {
		return x.FreeNum
	}
	return 0
}

func (x *SCRBBilled) GetAddFreeNum() int64 {
	if x != nil {
		return x.AddFreeNum
	}
	return 0
}

func (x *SCRBBilled) GetJackpotEle() int32 {
	if x != nil {
		return x.JackpotEle
	}
	return 0
}

func (x *SCRBBilled) GetWinLines() []*RichWinLine {
	if x != nil {
		return x.WinLines
	}
	return nil
}

func (x *SCRBBilled) GetMiddleJackpot() int64 {
	if x != nil {
		return x.MiddleJackpot
	}
	return 0
}

func (x *SCRBBilled) GetBigJackpot() int64 {
	if x != nil {
		return x.BigJackpot
	}
	return 0
}

func (x *SCRBBilled) GetGrandJackpot() int64 {
	if x != nil {
		return x.GrandJackpot
	}
	return 0
}

var File_richblessed_proto protoreflect.FileDescriptor

var file_richblessed_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x69, 0x63, 0x68, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x69, 0x63, 0x68, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x52, 0x42, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50, 0x22, 0x3d, 0x0a, 0x0b, 0x52, 0x69, 0x63,
	0x68, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x57, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x0c, 0x53, 0x43, 0x52,
	0x42, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x63, 0x68, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x52, 0x42, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x6f,
	0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x65, 0x74, 0x49,
	0x64, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x41, 0x6c, 0x6c, 0x57,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x45, 0x6c, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x45,
	0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x57, 0x69,
	0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x69, 0x63, 0x68, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x57,
	0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x67, 0x4a, 0x61, 0x63,
	0x6b, 0x70, 0x6f, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x69, 0x67, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x53,
	0x52, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5f, 0x0a,
	0x0f, 0x53, 0x43, 0x52, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x59,
	0x0a, 0x0d, 0x53, 0x43, 0x52, 0x42, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x29, 0x0a, 0x09, 0x53, 0x43, 0x52,
	0x42, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x8a, 0x04, 0x0a, 0x0a, 0x53, 0x43, 0x52, 0x42, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x6f, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x49, 0x64,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x42, 0x65, 0x74, 0x49, 0x64, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65,
	0x65, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46,
	0x72, 0x65, 0x65, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x57, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x57, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x45, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x63, 0x68, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x57, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x57,
	0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x69, 0x67, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x42, 0x69, 0x67, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f,
	0x74, 0x2a, 0xb2, 0x02, 0x0a, 0x05, 0x52, 0x42, 0x50, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x53,
	0x43, 0x52, 0x42, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xfc, 0x2a, 0x12, 0x27,
	0x0a, 0x22, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x53, 0x52, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x4f, 0x70, 0x10, 0xfd, 0x2a, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x43,
	0x52, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x70, 0x10, 0xfe, 0x2a,
	0x12, 0x25, 0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42,
	0x4c, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x42, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0xff, 0x2a, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x43,
	0x52, 0x42, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x80, 0x2b, 0x12, 0x21, 0x0a, 0x1c, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x5f, 0x53, 0x43, 0x52, 0x42, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x10, 0x81, 0x2b, 0x12, 0x26,
	0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x42, 0x4c, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x42, 0x4a, 0x41, 0x43, 0x4b, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x82, 0x2b, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b, 0x72, 0x69, 0x63, 0x68,
	0x62, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_richblessed_proto_rawDescOnce sync.Once
	file_richblessed_proto_rawDescData = file_richblessed_proto_rawDesc
)

func file_richblessed_proto_rawDescGZIP() []byte {
	file_richblessed_proto_rawDescOnce.Do(func() {
		file_richblessed_proto_rawDescData = protoimpl.X.CompressGZIP(file_richblessed_proto_rawDescData)
	})
	return file_richblessed_proto_rawDescData
}

var file_richblessed_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_richblessed_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_richblessed_proto_goTypes = []interface{}{
	(RBPID)(0),              // 0: richblessed.RBPID
	(*RBPlayerData)(nil),    // 1: richblessed.RBPlayerData
	(*RichWinLine)(nil),     // 2: richblessed.RichWinLine
	(*SCRBRoomInfo)(nil),    // 3: richblessed.SCRBRoomInfo
	(*CSRichBlessedOp)(nil), // 4: richblessed.CSRichBlessedOp
	(*SCRichBlessedOp)(nil), // 5: richblessed.SCRichBlessedOp
	(*SCRBRoomState)(nil),   // 6: richblessed.SCRBRoomState
	(*SCRBPrize)(nil),       // 7: richblessed.SCRBPrize
	(*SCRBBilled)(nil),      // 8: richblessed.SCRBBilled
}
var file_richblessed_proto_depIdxs = []int32{
	1, // 0: richblessed.SCRBRoomInfo.Player:type_name -> richblessed.RBPlayerData
	2, // 1: richblessed.SCRBRoomInfo.WinLines:type_name -> richblessed.RichWinLine
	2, // 2: richblessed.SCRBBilled.WinLines:type_name -> richblessed.RichWinLine
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_richblessed_proto_init() }
func file_richblessed_proto_init() {
	if File_richblessed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_richblessed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RBPlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichWinLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRBRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRichBlessedOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRichBlessedOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRBRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRBPrize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_richblessed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRBBilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_richblessed_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_richblessed_proto_goTypes,
		DependencyIndexes: file_richblessed_proto_depIdxs,
		EnumInfos:         file_richblessed_proto_enumTypes,
		MessageInfos:      file_richblessed_proto_msgTypes,
	}.Build()
	File_richblessed_proto = out.File
	file_richblessed_proto_rawDesc = nil
	file_richblessed_proto_goTypes = nil
	file_richblessed_proto_depIdxs = nil
}
