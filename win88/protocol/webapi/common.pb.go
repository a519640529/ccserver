// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.19.4
// source: common.proto

package webapi

import (
	"games.yol.com/win88/protocol/server"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 私有化mysql数据库
type MysqlDbSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName,omitempty"`  // ip/域名
	HostPort int32  `protobuf:"varint,2,opt,name=HostPort,proto3" json:"HostPort,omitempty"` // 端口
	Database string `protobuf:"bytes,3,opt,name=Database,proto3" json:"Database,omitempty"`  // 数据库名
	Username string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`  // 用户名
	Password string `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`  // 数据库密码 TODO:加密存储
	Options  string `protobuf:"bytes,6,opt,name=Options,proto3" json:"Options,omitempty"`    // 附加参数
}

func (x *MysqlDbSetting) Reset() {
	*x = MysqlDbSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlDbSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDbSetting) ProtoMessage() {}

func (x *MysqlDbSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDbSetting.ProtoReflect.Descriptor instead.
func (*MysqlDbSetting) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlDbSetting) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *MysqlDbSetting) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *MysqlDbSetting) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MysqlDbSetting) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MysqlDbSetting) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MysqlDbSetting) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

// 私有化mongo数据库
type MongoDbSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName,omitempty"`  // ip/域名
	HostPort int32  `protobuf:"varint,2,opt,name=HostPort,proto3" json:"HostPort,omitempty"` // 端口
	Database string `protobuf:"bytes,3,opt,name=Database,proto3" json:"Database,omitempty"`  // 数据库名
	Username string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`  // 用户名
	Password string `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`  // 数据库密码 TODO:加密存储
	Options  string `protobuf:"bytes,6,opt,name=Options,proto3" json:"Options,omitempty"`    // 附加参数
	CfgSign  string `protobuf:"bytes,7,opt,name=CfgSign,proto3" json:"CfgSign,omitempty"`    // 配置签名,防止来自外部的恶意修改
	CfgVer   int32  `protobuf:"varint,8,opt,name=CfgVer,proto3" json:"CfgVer,omitempty"`     // 配置版本号,版本号提升可以显式的让业务层重建连接池
}

func (x *MongoDbSetting) Reset() {
	*x = MongoDbSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoDbSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDbSetting) ProtoMessage() {}

func (x *MongoDbSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDbSetting.ProtoReflect.Descriptor instead.
func (*MongoDbSetting) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *MongoDbSetting) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *MongoDbSetting) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *MongoDbSetting) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MongoDbSetting) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MongoDbSetting) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MongoDbSetting) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *MongoDbSetting) GetCfgSign() string {
	if x != nil {
		return x.CfgSign
	}
	return ""
}

func (x *MongoDbSetting) GetCfgVer() int32 {
	if x != nil {
		return x.CfgVer
	}
	return 0
}

type RankSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    int32 `protobuf:"varint,1,opt,name=Asset,proto3" json:"Asset,omitempty"`       //财富榜
	Recharge int32 `protobuf:"varint,2,opt,name=Recharge,proto3" json:"Recharge,omitempty"` //充值榜
	Exchange int32 `protobuf:"varint,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"` //兑换榜
	Profit   int32 `protobuf:"varint,4,opt,name=Profit,proto3" json:"Profit,omitempty"`     //盈利榜
}

func (x *RankSwitch) Reset() {
	*x = RankSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankSwitch) ProtoMessage() {}

func (x *RankSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankSwitch.ProtoReflect.Descriptor instead.
func (*RankSwitch) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *RankSwitch) GetAsset() int32 {
	if x != nil {
		return x.Asset
	}
	return 0
}

func (x *RankSwitch) GetRecharge() int32 {
	if x != nil {
		return x.Recharge
	}
	return 0
}

func (x *RankSwitch) GetExchange() int32 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *RankSwitch) GetProfit() int32 {
	if x != nil {
		return x.Profit
	}
	return 0
}

//俱乐部配置
type ClubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationCoin            int64   `protobuf:"varint,1,opt,name=CreationCoin,proto3" json:"CreationCoin,omitempty"`                       //创建俱乐部金额
	IncreaseCoin            int64   `protobuf:"varint,2,opt,name=IncreaseCoin,proto3" json:"IncreaseCoin,omitempty"`                       //升级俱乐部金额
	ClubInitPlayerNum       int32   `protobuf:"varint,3,opt,name=ClubInitPlayerNum,proto3" json:"ClubInitPlayerNum,omitempty"`             //俱乐部初始人数
	IncreasePlayerNum       int32   `protobuf:"varint,4,opt,name=IncreasePlayerNum,proto3" json:"IncreasePlayerNum,omitempty"`             //升级人数增加
	IsOpenClub              bool    `protobuf:"varint,5,opt,name=IsOpenClub,proto3" json:"IsOpenClub,omitempty"`                           //是否开放俱乐部
	CreateClubCheckByManual bool    `protobuf:"varint,6,opt,name=CreateClubCheckByManual,proto3" json:"CreateClubCheckByManual,omitempty"` //创建俱乐部人工审核，true=手动
	EditClubNoticeByManual  bool    `protobuf:"varint,7,opt,name=EditClubNoticeByManual,proto3" json:"EditClubNoticeByManual,omitempty"`   //修改公告人工审核，true=手动
	CreateRoomAmount        int64   `protobuf:"varint,8,opt,name=CreateRoomAmount,proto3" json:"CreateRoomAmount,omitempty"`               //创建房间金额（分/局）
	GiveCoinRate            []int64 `protobuf:"varint,9,rep,packed,name=GiveCoinRate,proto3" json:"GiveCoinRate,omitempty"`                //会长充值额外赠送比例
}

func (x *ClubConfig) Reset() {
	*x = ClubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubConfig) ProtoMessage() {}

func (x *ClubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubConfig.ProtoReflect.Descriptor instead.
func (*ClubConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ClubConfig) GetCreationCoin() int64 {
	if x != nil {
		return x.CreationCoin
	}
	return 0
}

func (x *ClubConfig) GetIncreaseCoin() int64 {
	if x != nil {
		return x.IncreaseCoin
	}
	return 0
}

func (x *ClubConfig) GetClubInitPlayerNum() int32 {
	if x != nil {
		return x.ClubInitPlayerNum
	}
	return 0
}

func (x *ClubConfig) GetIncreasePlayerNum() int32 {
	if x != nil {
		return x.IncreasePlayerNum
	}
	return 0
}

func (x *ClubConfig) GetIsOpenClub() bool {
	if x != nil {
		return x.IsOpenClub
	}
	return false
}

func (x *ClubConfig) GetCreateClubCheckByManual() bool {
	if x != nil {
		return x.CreateClubCheckByManual
	}
	return false
}

func (x *ClubConfig) GetEditClubNoticeByManual() bool {
	if x != nil {
		return x.EditClubNoticeByManual
	}
	return false
}

func (x *ClubConfig) GetCreateRoomAmount() int64 {
	if x != nil {
		return x.CreateRoomAmount
	}
	return 0
}

func (x *ClubConfig) GetGiveCoinRate() []int64 {
	if x != nil {
		return x.GiveCoinRate
	}
	return nil
}

type ThirdGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Merchant int32 `protobuf:"varint,2,opt,name=Merchant,proto3" json:"Merchant,omitempty"` // 状态 0/1
}

func (x *ThirdGame) Reset() {
	*x = ThirdGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdGame) ProtoMessage() {}

func (x *ThirdGame) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdGame.ProtoReflect.Descriptor instead.
func (*ThirdGame) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *ThirdGame) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThirdGame) GetMerchant() int32 {
	if x != nil {
		return x.Merchant
	}
	return 0
}

// 平台结构
type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformName           string       `protobuf:"bytes,1,opt,name=PlatformName,proto3" json:"PlatformName,omitempty"`                      // 平台名称
	Isolated               bool         `protobuf:"varint,2,opt,name=Isolated,proto3" json:"Isolated,omitempty"`                             //是否独立平台
	Disabled               bool         `protobuf:"varint,3,opt,name=Disabled,proto3" json:"Disabled,omitempty"`                             //是否关闭
	Id                     int32        `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`                                         //平台ID
	CustomService          string       `protobuf:"bytes,5,opt,name=CustomService,proto3" json:"CustomService,omitempty"`                    //客服系统链接
	BindOption             int32        `protobuf:"varint,6,opt,name=BindOption,proto3" json:"BindOption,omitempty"`                         //平台用户绑定方式 位运算 微信|支付宝|银行卡
	ServiceFlag            bool         `protobuf:"varint,7,opt,name=ServiceFlag,proto3" json:"ServiceFlag,omitempty"`                       //是否支持浏览器跳转  0=否 1=是
	UpgradeAccountGiveCoin int32        `protobuf:"varint,8,opt,name=UpgradeAccountGiveCoin,proto3" json:"UpgradeAccountGiveCoin,omitempty"` //升级账号奖励金币
	NewAccountGiveCoin     int32        `protobuf:"varint,9,opt,name=NewAccountGiveCoin,proto3" json:"NewAccountGiveCoin,omitempty"`         //新账号奖励金币
	PerBankNoLimitAccount  int32        `protobuf:"varint,10,opt,name=PerBankNoLimitAccount,proto3" json:"PerBankNoLimitAccount,omitempty"`  //同一银行卡号绑定用户数量限制
	ExchangeMin            int32        `protobuf:"varint,11,opt,name=ExchangeMin,proto3" json:"ExchangeMin,omitempty"`                      //最低兑换金额
	ExchangeLimit          int32        `protobuf:"varint,12,opt,name=ExchangeLimit,proto3" json:"ExchangeLimit,omitempty"`                  // 兑换限制（身上携带）
	ExchangeTax            int32        `protobuf:"varint,13,opt,name=ExchangeTax,proto3" json:"ExchangeTax,omitempty"`                      //兑换税收（万分比）
	ExchangeForceTax       int32        `protobuf:"varint,14,opt,name=ExchangeForceTax,proto3" json:"ExchangeForceTax,omitempty"`            //强制兑换税收
	ExchangeFlow           int32        `protobuf:"varint,15,opt,name=ExchangeFlow,proto3" json:"ExchangeFlow,omitempty"`                    // 兑换流水比例
	ExchangeGiveFlow       int32        `protobuf:"varint,16,opt,name=ExchangeGiveFlow,proto3" json:"ExchangeGiveFlow,omitempty"`            //赠送兑换流水比例
	ExchangeFlag           int32        `protobuf:"varint,17,opt,name=ExchangeFlag,proto3" json:"ExchangeFlag,omitempty"`                    //兑换标记 二进制 第一位:兑换税收 第二位:流水比例
	ExchangeVer            int32        `protobuf:"varint,18,opt,name=ExchangeVer,proto3" json:"ExchangeVer,omitempty"`                      //兑换版本
	ExchangeMultiple       int32        `protobuf:"varint,19,opt,name=ExchangeMultiple,proto3" json:"ExchangeMultiple,omitempty"`            //兑换基数
	VipRange               []int32      `protobuf:"varint,20,rep,packed,name=VipRange,proto3" json:"VipRange,omitempty"`                     // VIP充值区间
	SpreadConfig           int32        `protobuf:"varint,21,opt,name=SpreadConfig,proto3" json:"SpreadConfig,omitempty"`                    //0:等级返点 1:保底返佣
	Leaderboard            *RankSwitch  `protobuf:"bytes,22,opt,name=Leaderboard,proto3" json:"Leaderboard,omitempty"`                       //排行榜开关
	ClubConfig             *ClubConfig  `protobuf:"bytes,24,opt,name=ClubConfig,proto3" json:"ClubConfig,omitempty"`                         //俱乐部配置
	VerifyCodeType         int32        `protobuf:"varint,25,opt,name=VerifyCodeType,proto3" json:"VerifyCodeType,omitempty"`                //验证码方式 短信，随机，滑块
	ThirdGameMerchant      []*ThirdGame `protobuf:"bytes,26,rep,name=ThirdGameMerchant,proto3" json:"ThirdGameMerchant,omitempty"`           //三方游戏平台状态
	CustomType             int32        `protobuf:"varint,27,opt,name=CustomType,proto3" json:"CustomType,omitempty"`                        //客服类型 0 live800 1 美洽 2 CC客服
	//bool NeedDeviceInfo = 28; //需要用户设备码
	NeedSameName          bool   `protobuf:"varint,29,opt,name=NeedSameName,proto3" json:"NeedSameName,omitempty"`                   //绑定的银行卡和支付宝用户名字需要相同
	ExchangeBankMax       int32  `protobuf:"varint,30,opt,name=ExchangeBankMax,proto3" json:"ExchangeBankMax,omitempty"`             //银行卡最大兑换金额  0不限制
	ExchangeAlipayMax     int32  `protobuf:"varint,31,opt,name=ExchangeAlipayMax,proto3" json:"ExchangeAlipayMax,omitempty"`         //支付宝最大兑换金额 0不限制
	PerBankNoLimitName    int32  `protobuf:"varint,32,opt,name=PerBankNoLimitName,proto3" json:"PerBankNoLimitName,omitempty"`       //银行卡名字数量限制
	IsCanUserBindPromoter bool   `protobuf:"varint,33,opt,name=IsCanUserBindPromoter,proto3" json:"IsCanUserBindPromoter,omitempty"` //是否允许用户手动绑定推广员
	UserBindPromoterPrize int32  `protobuf:"varint,34,opt,name=UserBindPromoterPrize,proto3" json:"UserBindPromoterPrize,omitempty"` //手动绑定奖励
	MerchantKey           string `protobuf:"bytes,35,opt,name=MerchantKey,proto3" json:"MerchantKey,omitempty"`                      //商户秘钥
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Platform) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *Platform) GetIsolated() bool {
	if x != nil {
		return x.Isolated
	}
	return false
}

func (x *Platform) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Platform) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Platform) GetCustomService() string {
	if x != nil {
		return x.CustomService
	}
	return ""
}

func (x *Platform) GetBindOption() int32 {
	if x != nil {
		return x.BindOption
	}
	return 0
}

func (x *Platform) GetServiceFlag() bool {
	if x != nil {
		return x.ServiceFlag
	}
	return false
}

func (x *Platform) GetUpgradeAccountGiveCoin() int32 {
	if x != nil {
		return x.UpgradeAccountGiveCoin
	}
	return 0
}

func (x *Platform) GetNewAccountGiveCoin() int32 {
	if x != nil {
		return x.NewAccountGiveCoin
	}
	return 0
}

func (x *Platform) GetPerBankNoLimitAccount() int32 {
	if x != nil {
		return x.PerBankNoLimitAccount
	}
	return 0
}

func (x *Platform) GetExchangeMin() int32 {
	if x != nil {
		return x.ExchangeMin
	}
	return 0
}

func (x *Platform) GetExchangeLimit() int32 {
	if x != nil {
		return x.ExchangeLimit
	}
	return 0
}

func (x *Platform) GetExchangeTax() int32 {
	if x != nil {
		return x.ExchangeTax
	}
	return 0
}

func (x *Platform) GetExchangeForceTax() int32 {
	if x != nil {
		return x.ExchangeForceTax
	}
	return 0
}

func (x *Platform) GetExchangeFlow() int32 {
	if x != nil {
		return x.ExchangeFlow
	}
	return 0
}

func (x *Platform) GetExchangeGiveFlow() int32 {
	if x != nil {
		return x.ExchangeGiveFlow
	}
	return 0
}

func (x *Platform) GetExchangeFlag() int32 {
	if x != nil {
		return x.ExchangeFlag
	}
	return 0
}

func (x *Platform) GetExchangeVer() int32 {
	if x != nil {
		return x.ExchangeVer
	}
	return 0
}

func (x *Platform) GetExchangeMultiple() int32 {
	if x != nil {
		return x.ExchangeMultiple
	}
	return 0
}

func (x *Platform) GetVipRange() []int32 {
	if x != nil {
		return x.VipRange
	}
	return nil
}

func (x *Platform) GetSpreadConfig() int32 {
	if x != nil {
		return x.SpreadConfig
	}
	return 0
}

func (x *Platform) GetLeaderboard() *RankSwitch {
	if x != nil {
		return x.Leaderboard
	}
	return nil
}

func (x *Platform) GetClubConfig() *ClubConfig {
	if x != nil {
		return x.ClubConfig
	}
	return nil
}

func (x *Platform) GetVerifyCodeType() int32 {
	if x != nil {
		return x.VerifyCodeType
	}
	return 0
}

func (x *Platform) GetThirdGameMerchant() []*ThirdGame {
	if x != nil {
		return x.ThirdGameMerchant
	}
	return nil
}

func (x *Platform) GetCustomType() int32 {
	if x != nil {
		return x.CustomType
	}
	return 0
}

func (x *Platform) GetNeedSameName() bool {
	if x != nil {
		return x.NeedSameName
	}
	return false
}

func (x *Platform) GetExchangeBankMax() int32 {
	if x != nil {
		return x.ExchangeBankMax
	}
	return 0
}

func (x *Platform) GetExchangeAlipayMax() int32 {
	if x != nil {
		return x.ExchangeAlipayMax
	}
	return 0
}

func (x *Platform) GetPerBankNoLimitName() int32 {
	if x != nil {
		return x.PerBankNoLimitName
	}
	return 0
}

func (x *Platform) GetIsCanUserBindPromoter() bool {
	if x != nil {
		return x.IsCanUserBindPromoter
	}
	return false
}

func (x *Platform) GetUserBindPromoterPrize() int32 {
	if x != nil {
		return x.UserBindPromoterPrize
	}
	return 0
}

func (x *Platform) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

// 游戏状态结构
type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"` // excel 表Id
	Status bool  `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"` // 是否开启
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *GameStatus) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameStatus) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// 全局游戏配置，单独拿出来，方便扩展
type GameConfigGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStatus []*GameStatus `protobuf:"bytes,1,rep,name=GameStatus,proto3" json:"GameStatus,omitempty"`
}

func (x *GameConfigGlobal) Reset() {
	*x = GameConfigGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfigGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfigGlobal) ProtoMessage() {}

func (x *GameConfigGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfigGlobal.ProtoReflect.Descriptor instead.
func (*GameConfigGlobal) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *GameConfigGlobal) GetGameStatus() []*GameStatus {
	if x != nil {
		return x.GameStatus
	}
	return nil
}

// GameFree 需要包一层属性
type GameFree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId    int32        `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`      // 组ID
	Status     bool         `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`        // 开关
	DbGameFree *server.DB_GameFree `protobuf:"bytes,3,opt,name=DbGameFree,proto3" json:"DbGameFree,omitempty"` // excel导出结构
}

func (x *GameFree) Reset() {
	*x = GameFree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameFree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFree) ProtoMessage() {}

func (x *GameFree) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFree.ProtoReflect.Descriptor instead.
func (*GameFree) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *GameFree) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GameFree) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GameFree) GetDbGameFree() *server.DB_GameFree {
	if x != nil {
		return x.DbGameFree
	}
	return nil
}

// 平台级别游戏配置
type PlatformGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId  int32       `protobuf:"varint,1,opt,name=PlatformId,proto3" json:"PlatformId,omitempty"`  // 平台ID
	DbGameFrees []*GameFree `protobuf:"bytes,2,rep,name=DbGameFrees,proto3" json:"DbGameFrees,omitempty"` // 游戏配置
}

func (x *PlatformGameConfig) Reset() {
	*x = PlatformGameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformGameConfig) ProtoMessage() {}

func (x *PlatformGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformGameConfig.ProtoReflect.Descriptor instead.
func (*PlatformGameConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *PlatformGameConfig) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *PlatformGameConfig) GetDbGameFrees() []*GameFree {
	if x != nil {
		return x.DbGameFrees
	}
	return nil
}

// 平台数据库配置
type PlatformDbConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId int32           `protobuf:"varint,1,opt,name=PlatformId,proto3" json:"PlatformId,omitempty"` //平台ID
	Mysql      *MysqlDbSetting `protobuf:"bytes,2,opt,name=Mysql,proto3" json:"Mysql,omitempty"`
	MongoDb    *MongoDbSetting `protobuf:"bytes,3,opt,name=MongoDb,proto3" json:"MongoDb,omitempty"`
	MongoDbLog *MongoDbSetting `protobuf:"bytes,4,opt,name=MongoDbLog,proto3" json:"MongoDbLog,omitempty"`
}

func (x *PlatformDbConfig) Reset() {
	*x = PlatformDbConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformDbConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformDbConfig) ProtoMessage() {}

func (x *PlatformDbConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformDbConfig.ProtoReflect.Descriptor instead.
func (*PlatformDbConfig) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *PlatformDbConfig) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *PlatformDbConfig) GetMysql() *MysqlDbSetting {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *PlatformDbConfig) GetMongoDb() *MongoDbSetting {
	if x != nil {
		return x.MongoDb
	}
	return nil
}

func (x *PlatformDbConfig) GetMongoDbLog() *MongoDbSetting {
	if x != nil {
		return x.MongoDbLog
	}
	return nil
}

//游戏分组配置
type GameConfigGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32        `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                //分组id
	LogicId    int32        `protobuf:"varint,2,opt,name=LogicId,proto3" json:"LogicId,omitempty"`      //游戏id
	DbGameFree *server.DB_GameFree `protobuf:"bytes,3,opt,name=DbGameFree,proto3" json:"DbGameFree,omitempty"` // 游戏分组配置
	GroupName  string       `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`   //分组标题
}

func (x *GameConfigGroup) Reset() {
	*x = GameConfigGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfigGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfigGroup) ProtoMessage() {}

func (x *GameConfigGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfigGroup.ProtoReflect.Descriptor instead.
func (*GameConfigGroup) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *GameConfigGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameConfigGroup) GetLogicId() int32 {
	if x != nil {
		return x.LogicId
	}
	return 0
}

func (x *GameConfigGroup) GetDbGameFree() *server.DB_GameFree {
	if x != nil {
		return x.DbGameFree
	}
	return nil
}

func (x *GameConfigGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

// 包信息
type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PlatformId  int32  `protobuf:"varint,2,opt,name=PlatformId,proto3" json:"PlatformId,omitempty"`  // 平台ID
	Name        string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`               // app名称
	PackageName string `protobuf:"bytes,4,opt,name=PackageName,proto3" json:"PackageName,omitempty"` // android 包标识
	BundleId    string `protobuf:"bytes,5,opt,name=BundleId,proto3" json:"BundleId,omitempty"`       // ios bundleid
	ApkUrl      string `protobuf:"bytes,6,opt,name=ApkUrl,proto3" json:"ApkUrl,omitempty"`           // apk 下载地址
	IpaUrl      string `protobuf:"bytes,7,opt,name=IpaUrl,proto3" json:"IpaUrl,omitempty"`           // ipa 下载地址
	CreateTime  string `protobuf:"bytes,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`   // 创建时间
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *AppInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppInfo) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *AppInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AppInfo) GetBundleId() string {
	if x != nil {
		return x.BundleId
	}
	return ""
}

func (x *AppInfo) GetApkUrl() string {
	if x != nil {
		return x.ApkUrl
	}
	return ""
}

func (x *AppInfo) GetIpaUrl() string {
	if x != nil {
		return x.IpaUrl
	}
	return ""
}

func (x *AppInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type PlayerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnId              int32   `protobuf:"varint,1,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Tel               string  `protobuf:"bytes,2,opt,name=Tel,proto3" json:"Tel,omitempty"`
	VIP               int32   `protobuf:"varint,3,opt,name=VIP,proto3" json:"VIP,omitempty"`
	Name              string  `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Coin              int64   `protobuf:"varint,5,opt,name=Coin,proto3" json:"Coin,omitempty"`
	CoinExchangeTotal int64   `protobuf:"varint,6,opt,name=CoinExchangeTotal,proto3" json:"CoinExchangeTotal,omitempty"` //总提现金额 兑换
	CoinPayTotal      int64   `protobuf:"varint,7,opt,name=CoinPayTotal,proto3" json:"CoinPayTotal,omitempty"`           //在线总充值金额
	CreateTime        int64   `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`               //创建时间
	DeviceId          string  `protobuf:"bytes,9,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`                    //设备id
	DeviceOS          string  `protobuf:"bytes,10,opt,name=DeviceOS,proto3" json:"DeviceOS,omitempty"`                   //设备操作系统
	DrawTimes         int32   `protobuf:"varint,11,opt,name=DrawTimes,proto3" json:"DrawTimes,omitempty"`                //平局次数
	FailCoin          int64   `protobuf:"varint,12,opt,name=FailCoin,proto3" json:"FailCoin,omitempty"`                  //总输钱数量
	FailTimes         int32   `protobuf:"varint,13,opt,name=FailTimes,proto3" json:"FailTimes,omitempty"`                //失败次数
	GameTax           int64   `protobuf:"varint,14,opt,name=GameTax,proto3" json:"GameTax,omitempty"`                    //总游戏税收
	Ip                string  `protobuf:"bytes,15,opt,name=Ip,proto3" json:"Ip,omitempty"`
	IsRob             bool    `protobuf:"varint,16,opt,name=IsRob,proto3" json:"IsRob,omitempty"`
	LastLoginTime     int64   `protobuf:"varint,17,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"` //最后登陆时间
	MarkInfo          string  `protobuf:"bytes,18,opt,name=MarkInfo,proto3" json:"MarkInfo,omitempty"`            //用来备注玩家信息
	Online            bool    `protobuf:"varint,19,opt,name=Online,proto3" json:"Online,omitempty"`
	Package           string  `protobuf:"bytes,20,opt,name=Package,proto3" json:"Package,omitempty"`     //包信息 android:包名 ios:bundleid
	PackageID         string  `protobuf:"bytes,21,opt,name=PackageID,proto3" json:"PackageID,omitempty"` //推广包标识 对应客户端的packagetag
	Platform          string  `protobuf:"bytes,22,opt,name=Platform,proto3" json:"Platform,omitempty"`
	RegIp             string  `protobuf:"bytes,23,opt,name=RegIp,proto3" json:"RegIp,omitempty"`                  //注册ip地址
	SafeBoxCoin       int64   `protobuf:"varint,24,opt,name=SafeBoxCoin,proto3" json:"SafeBoxCoin,omitempty"`     //保险箱金币
	WBLevel           int32   `protobuf:"varint,25,opt,name=WBLevel,proto3" json:"WBLevel,omitempty"`             //黑白名单等级
	WinCoin           int64   `protobuf:"varint,26,opt,name=WinCoin,proto3" json:"WinCoin,omitempty"`             //总赢钱数量
	WinTimes          int32   `protobuf:"varint,27,opt,name=WinTimes,proto3" json:"WinTimes,omitempty"`           //胜利次数
	BlacklistType     int32   `protobuf:"varint,28,opt,name=BlacklistType,proto3" json:"BlacklistType,omitempty"` //黑名单作用域和后台一样都是采用位标记的表示形式
	SceneId           int32   `protobuf:"varint,29,opt,name=SceneId,proto3" json:"SceneId,omitempty"`             //房间号
	GameFreeId        int32   `protobuf:"varint,30,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	Diamond           int64   `protobuf:"varint,31,opt,name=Diamond,proto3" json:"Diamond,omitempty"`          //钻石
	RoleUnlock        int32   `protobuf:"varint,32,opt,name=RoleUnlock,proto3" json:"RoleUnlock,omitempty"`    //角色解锁的个数
	RolesIds          []int32 `protobuf:"varint,33,rep,packed,name=RolesIds,proto3" json:"RolesIds,omitempty"` //角色Id
	PetUnlock         int32   `protobuf:"varint,34,opt,name=PetUnlock,proto3" json:"PetUnlock,omitempty"`      //宠物解锁的个数
	PetsIds           []int32 `protobuf:"varint,35,rep,packed,name=PetsIds,proto3" json:"PetsIds,omitempty"`   //宠物Id
}

func (x *PlayerData) Reset() {
	*x = PlayerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerData) ProtoMessage() {}

func (x *PlayerData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerData.ProtoReflect.Descriptor instead.
func (*PlayerData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerData) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *PlayerData) GetTel() string {
	if x != nil {
		return x.Tel
	}
	return ""
}

func (x *PlayerData) GetVIP() int32 {
	if x != nil {
		return x.VIP
	}
	return 0
}

func (x *PlayerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerData) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *PlayerData) GetCoinExchangeTotal() int64 {
	if x != nil {
		return x.CoinExchangeTotal
	}
	return 0
}

func (x *PlayerData) GetCoinPayTotal() int64 {
	if x != nil {
		return x.CoinPayTotal
	}
	return 0
}

func (x *PlayerData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PlayerData) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PlayerData) GetDeviceOS() string {
	if x != nil {
		return x.DeviceOS
	}
	return ""
}

func (x *PlayerData) GetDrawTimes() int32 {
	if x != nil {
		return x.DrawTimes
	}
	return 0
}

func (x *PlayerData) GetFailCoin() int64 {
	if x != nil {
		return x.FailCoin
	}
	return 0
}

func (x *PlayerData) GetFailTimes() int32 {
	if x != nil {
		return x.FailTimes
	}
	return 0
}

func (x *PlayerData) GetGameTax() int64 {
	if x != nil {
		return x.GameTax
	}
	return 0
}

func (x *PlayerData) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlayerData) GetIsRob() bool {
	if x != nil {
		return x.IsRob
	}
	return false
}

func (x *PlayerData) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerData) GetMarkInfo() string {
	if x != nil {
		return x.MarkInfo
	}
	return ""
}

func (x *PlayerData) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *PlayerData) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *PlayerData) GetPackageID() string {
	if x != nil {
		return x.PackageID
	}
	return ""
}

func (x *PlayerData) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PlayerData) GetRegIp() string {
	if x != nil {
		return x.RegIp
	}
	return ""
}

func (x *PlayerData) GetSafeBoxCoin() int64 {
	if x != nil {
		return x.SafeBoxCoin
	}
	return 0
}

func (x *PlayerData) GetWBLevel() int32 {
	if x != nil {
		return x.WBLevel
	}
	return 0
}

func (x *PlayerData) GetWinCoin() int64 {
	if x != nil {
		return x.WinCoin
	}
	return 0
}

func (x *PlayerData) GetWinTimes() int32 {
	if x != nil {
		return x.WinTimes
	}
	return 0
}

func (x *PlayerData) GetBlacklistType() int32 {
	if x != nil {
		return x.BlacklistType
	}
	return 0
}

func (x *PlayerData) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *PlayerData) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *PlayerData) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *PlayerData) GetRoleUnlock() int32 {
	if x != nil {
		return x.RoleUnlock
	}
	return 0
}

func (x *PlayerData) GetRolesIds() []int32 {
	if x != nil {
		return x.RolesIds
	}
	return nil
}

func (x *PlayerData) GetPetUnlock() int32 {
	if x != nil {
		return x.PetUnlock
	}
	return 0
}

func (x *PlayerData) GetPetsIds() []int32 {
	if x != nil {
		return x.PetsIds
	}
	return nil
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   string  `protobuf:"bytes,1,opt,name=Platform,proto3" json:"Platform,omitempty"`
	SceneId    int32   `protobuf:"varint,2,opt,name=SceneId,proto3" json:"SceneId,omitempty"`     //场景id
	GameId     int32   `protobuf:"varint,3,opt,name=GameId,proto3" json:"GameId,omitempty"`       //游戏id
	GameMode   int32   `protobuf:"varint,4,opt,name=GameMode,proto3" json:"GameMode,omitempty"`   //游戏模式
	SceneMode  int32   `protobuf:"varint,5,opt,name=SceneMode,proto3" json:"SceneMode,omitempty"` //房间模式,参考common.SceneMode_XXX
	GroupId    int32   `protobuf:"varint,6,opt,name=GroupId,proto3" json:"GroupId,omitempty"`     //组id
	GameFreeId int32   `protobuf:"varint,7,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	SrvId      int32   `protobuf:"varint,8,opt,name=SrvId,proto3" json:"SrvId,omitempty"`                 //服务器id
	Creator    int32   `protobuf:"varint,9,opt,name=Creator,proto3" json:"Creator,omitempty"`             //创建者账号id
	Agentor    int32   `protobuf:"varint,10,opt,name=Agentor,proto3" json:"Agentor,omitempty"`            //代理者id
	ReplayCode string  `protobuf:"bytes,11,opt,name=ReplayCode,proto3" json:"ReplayCode,omitempty"`       //回放码
	Params     []int32 `protobuf:"varint,12,rep,packed,name=Params,proto3" json:"Params,omitempty"`       //场景参数
	PlayerIds  []int32 `protobuf:"varint,13,rep,packed,name=PlayerIds,proto3" json:"PlayerIds,omitempty"` //所有玩家id
	PlayerCnt  int32   `protobuf:"varint,14,opt,name=PlayerCnt,proto3" json:"PlayerCnt,omitempty"`        //玩家数量
	RobotCnt   int32   `protobuf:"varint,15,opt,name=RobotCnt,proto3" json:"RobotCnt,omitempty"`          //AI数量
	Start      int32   `protobuf:"varint,16,opt,name=Start,proto3" json:"Start,omitempty"`                //0.等待 1.游戏中
	CreateTime int64   `protobuf:"varint,17,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`      //创建时间
	ClubId     int32   `protobuf:"varint,18,opt,name=ClubId,proto3" json:"ClubId,omitempty"`              //俱乐部id
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *RoomInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RoomInfo) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *RoomInfo) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RoomInfo) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *RoomInfo) GetSceneMode() int32 {
	if x != nil {
		return x.SceneMode
	}
	return 0
}

func (x *RoomInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RoomInfo) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *RoomInfo) GetSrvId() int32 {
	if x != nil {
		return x.SrvId
	}
	return 0
}

func (x *RoomInfo) GetCreator() int32 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *RoomInfo) GetAgentor() int32 {
	if x != nil {
		return x.Agentor
	}
	return 0
}

func (x *RoomInfo) GetReplayCode() string {
	if x != nil {
		return x.ReplayCode
	}
	return ""
}

func (x *RoomInfo) GetParams() []int32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RoomInfo) GetPlayerIds() []int32 {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *RoomInfo) GetPlayerCnt() int32 {
	if x != nil {
		return x.PlayerCnt
	}
	return 0
}

func (x *RoomInfo) GetRobotCnt() int32 {
	if x != nil {
		return x.RobotCnt
	}
	return 0
}

func (x *RoomInfo) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RoomInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RoomInfo) GetClubId() int32 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

type PlayerSingleAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Platform      string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	GameFreeId    int32  `protobuf:"varint,3,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`
	SnId          int32  `protobuf:"varint,4,opt,name=SnId,proto3" json:"SnId,omitempty"`
	Mode          int32  `protobuf:"varint,5,opt,name=Mode,proto3" json:"Mode,omitempty"`                    //调控模式 1赢 2输 tinyint(1)
	TotalTime     int32  `protobuf:"varint,6,opt,name=TotalTime,proto3" json:"TotalTime,omitempty"`          //调控总次数
	CurTime       int32  `protobuf:"varint,7,opt,name=CurTime,proto3" json:"CurTime,omitempty"`              //当前调控次数
	BetMin        int64  `protobuf:"varint,8,opt,name=BetMin,proto3" json:"BetMin,omitempty"`                //下注下限
	BetMax        int64  `protobuf:"varint,9,opt,name=BetMax,proto3" json:"BetMax,omitempty"`                //下注上限
	BankerLoseMin int64  `protobuf:"varint,10,opt,name=BankerLoseMin,proto3" json:"BankerLoseMin,omitempty"` //坐庄被输下限
	BankerWinMin  int64  `protobuf:"varint,11,opt,name=BankerWinMin,proto3" json:"BankerWinMin,omitempty"`   //坐庄被控赢下限
	CardMin       int32  `protobuf:"varint,12,opt,name=CardMin,proto3" json:"CardMin,omitempty"`             //牌型下限
	CardMax       int32  `protobuf:"varint,13,opt,name=CardMax,proto3" json:"CardMax,omitempty"`             //牌型上限
	Priority      int32  `protobuf:"varint,14,opt,name=Priority,proto3" json:"Priority,omitempty"`           //优先级
	WinRate       int32  `protobuf:"varint,15,opt,name=WinRate,proto3" json:"WinRate,omitempty"`             //万分比
	GameId        int32  `protobuf:"varint,16,opt,name=GameId,proto3" json:"GameId,omitempty"`
	GameMode      int32  `protobuf:"varint,17,opt,name=GameMode,proto3" json:"GameMode,omitempty"`
	Operator      string `protobuf:"bytes,18,opt,name=Operator,proto3" json:"Operator,omitempty"`
	CreateTime    int64  `protobuf:"varint,19,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdateTime    int64  `protobuf:"varint,20,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
}

func (x *PlayerSingleAdjust) Reset() {
	*x = PlayerSingleAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSingleAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSingleAdjust) ProtoMessage() {}

func (x *PlayerSingleAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSingleAdjust.ProtoReflect.Descriptor instead.
func (*PlayerSingleAdjust) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerSingleAdjust) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerSingleAdjust) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PlayerSingleAdjust) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *PlayerSingleAdjust) GetSnId() int32 {
	if x != nil {
		return x.SnId
	}
	return 0
}

func (x *PlayerSingleAdjust) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *PlayerSingleAdjust) GetTotalTime() int32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *PlayerSingleAdjust) GetCurTime() int32 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *PlayerSingleAdjust) GetBetMin() int64 {
	if x != nil {
		return x.BetMin
	}
	return 0
}

func (x *PlayerSingleAdjust) GetBetMax() int64 {
	if x != nil {
		return x.BetMax
	}
	return 0
}

func (x *PlayerSingleAdjust) GetBankerLoseMin() int64 {
	if x != nil {
		return x.BankerLoseMin
	}
	return 0
}

func (x *PlayerSingleAdjust) GetBankerWinMin() int64 {
	if x != nil {
		return x.BankerWinMin
	}
	return 0
}

func (x *PlayerSingleAdjust) GetCardMin() int32 {
	if x != nil {
		return x.CardMin
	}
	return 0
}

func (x *PlayerSingleAdjust) GetCardMax() int32 {
	if x != nil {
		return x.CardMax
	}
	return 0
}

func (x *PlayerSingleAdjust) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PlayerSingleAdjust) GetWinRate() int32 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *PlayerSingleAdjust) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *PlayerSingleAdjust) GetGameMode() int32 {
	if x != nil {
		return x.GameMode
	}
	return 0
}

func (x *PlayerSingleAdjust) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PlayerSingleAdjust) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PlayerSingleAdjust) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrvId     int32  `protobuf:"varint,1,opt,name=SrvId,proto3" json:"SrvId,omitempty"`         //服务器id
	SrvType   int32  `protobuf:"varint,2,opt,name=SrvType,proto3" json:"SrvType,omitempty"`     //服务器类型 4.网管 6.大厅.7游戏
	State     int32  `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`         //服务器状态 0.关闭 1.开启
	PlayerNum int32  `protobuf:"varint,4,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"` //人数
	RobotNum  int32  `protobuf:"varint,5,opt,name=RobotNum,proto3" json:"RobotNum,omitempty"`   //AI人数
	SceneNum  int32  `protobuf:"varint,6,opt,name=SceneNum,proto3" json:"SceneNum,omitempty"`   //房间数量
	Data      string `protobuf:"bytes,7,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *ServerInfo) GetSrvId() int32 {
	if x != nil {
		return x.SrvId
	}
	return 0
}

func (x *ServerInfo) GetSrvType() int32 {
	if x != nil {
		return x.SrvType
	}
	return 0
}

func (x *ServerInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ServerInfo) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *ServerInfo) GetRobotNum() int32 {
	if x != nil {
		return x.RobotNum
	}
	return 0
}

func (x *ServerInfo) GetSceneNum() int32 {
	if x != nil {
		return x.SceneNum
	}
	return 0
}

func (x *ServerInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CoinPoolSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform         string `protobuf:"bytes,1,opt,name=Platform,proto3" json:"Platform,omitempty"`                   //平台id
	GameFreeId       int32  `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`              //游戏id
	ServerId         int32  `protobuf:"varint,3,opt,name=ServerId,proto3" json:"ServerId,omitempty"`                  //服务器id
	InitValue        int32  `protobuf:"varint,4,opt,name=InitValue,proto3" json:"InitValue,omitempty"`                //初始库存值
	LowerLimit       int32  `protobuf:"varint,5,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`              //库存下限
	UpperLimit       int32  `protobuf:"varint,6,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`              //库存上限
	UpperOffsetLimit int32  `protobuf:"varint,7,opt,name=UpperOffsetLimit,proto3" json:"UpperOffsetLimit,omitempty"`  //上限偏移值
	MaxOutValue      int32  `protobuf:"varint,8,opt,name=MaxOutValue,proto3" json:"MaxOutValue,omitempty"`            //最大吐钱数
	ChangeRate       int32  `protobuf:"varint,9,opt,name=ChangeRate,proto3" json:"ChangeRate,omitempty"`              //库存变化速度
	MinOutPlayerNum  int32  `protobuf:"varint,10,opt,name=MinOutPlayerNum,proto3" json:"MinOutPlayerNum,omitempty"`   //最少吐钱人数
	UpperLimitOfOdds int32  `protobuf:"varint,11,opt,name=UpperLimitOfOdds,proto3" json:"UpperLimitOfOdds,omitempty"` //赔率上限(万分比)
	BaseRate         int32  `protobuf:"varint,12,opt,name=BaseRate,proto3" json:"BaseRate,omitempty"`                 //基础赔率
	CtroRate         int32  `protobuf:"varint,13,opt,name=CtroRate,proto3" json:"CtroRate,omitempty"`                 //调节赔率
	HardTimeMin      int32  `protobuf:"varint,14,opt,name=HardTimeMin,proto3" json:"HardTimeMin,omitempty"`           //收分调节频率下限
	HardTimeMax      int32  `protobuf:"varint,15,opt,name=HardTimeMax,proto3" json:"HardTimeMax,omitempty"`           //收分调节频率上限
	NormalTimeMin    int32  `protobuf:"varint,16,opt,name=NormalTimeMin,proto3" json:"NormalTimeMin,omitempty"`       //正常调节频率下限
	NormalTimeMax    int32  `protobuf:"varint,17,opt,name=NormalTimeMax,proto3" json:"NormalTimeMax,omitempty"`       //正常调节频率上限
	EasyTimeMin      int32  `protobuf:"varint,18,opt,name=EasyTimeMin,proto3" json:"EasyTimeMin,omitempty"`           //放分调节频率下限
	EasyTimeMax      int32  `protobuf:"varint,19,opt,name=EasyTimeMax,proto3" json:"EasyTimeMax,omitempty"`           //放分调节频率上限
	EasrierTimeMin   int32  `protobuf:"varint,20,opt,name=EasrierTimeMin,proto3" json:"EasrierTimeMin,omitempty"`     //吐分调节频率下限
	EasrierTimeMax   int32  `protobuf:"varint,21,opt,name=EasrierTimeMax,proto3" json:"EasrierTimeMax,omitempty"`     //吐分分调节频率上限
	GroupId          int32  `protobuf:"varint,22,opt,name=GroupId,proto3" json:"GroupId,omitempty"`                   //组id
	CpCangeType      int32  `protobuf:"varint,23,opt,name=CpCangeType,proto3" json:"CpCangeType,omitempty"`           //库存变化类型
	CpChangeInterval int32  `protobuf:"varint,24,opt,name=CpChangeInterval,proto3" json:"CpChangeInterval,omitempty"` //库存变化时间
	CpChangeTotle    int32  `protobuf:"varint,25,opt,name=CpChangeTotle,proto3" json:"CpChangeTotle,omitempty"`       //库存变化总量
	CpChangeLower    int32  `protobuf:"varint,26,opt,name=CpChangeLower,proto3" json:"CpChangeLower,omitempty"`       //下降域值
	CpChangeUpper    int32  `protobuf:"varint,27,opt,name=CpChangeUpper,proto3" json:"CpChangeUpper,omitempty"`       //上升域值
	ProfitRate       int32  `protobuf:"varint,28,opt,name=ProfitRate,proto3" json:"ProfitRate,omitempty"`             //营收比例
	CoinPoolMode     int32  `protobuf:"varint,29,opt,name=CoinPoolMode,proto3" json:"CoinPoolMode,omitempty"`         //ai水池模式
	ResetTime        int32  `protobuf:"varint,30,opt,name=ResetTime,proto3" json:"ResetTime,omitempty"`               //水池重置时间
	ProfitAutoRate   int32  `protobuf:"varint,31,opt,name=ProfitAutoRate,proto3" json:"ProfitAutoRate,omitempty"`     //杀率调控自动修正比例
	ProfitManualRate int32  `protobuf:"varint,32,opt,name=ProfitManualRate,proto3" json:"ProfitManualRate,omitempty"` //杀率调控手动修正比例
	ProfitUseManual  bool   `protobuf:"varint,33,opt,name=ProfitUseManual,proto3" json:"ProfitUseManual,omitempty"`   //使用杀率手动修正比例
	CoinValue        int64  `protobuf:"varint,34,opt,name=CoinValue,proto3" json:"CoinValue,omitempty"`               //当前库存值
	PlayerNum        int32  `protobuf:"varint,35,opt,name=PlayerNum,proto3" json:"PlayerNum,omitempty"`               //当前在线人数
	ProfitPool       int64  `protobuf:"varint,36,opt,name=ProfitPool,proto3" json:"ProfitPool,omitempty"`             //当前收益池
	//new
	JackpotCoin1 int64 `protobuf:"varint,37,opt,name=JackpotCoin1,proto3" json:"JackpotCoin1,omitempty"` //奖池1
	JackpotCoin2 int64 `protobuf:"varint,38,opt,name=JackpotCoin2,proto3" json:"JackpotCoin2,omitempty"` //奖池2
	JackpotCoin3 int64 `protobuf:"varint,39,opt,name=JackpotCoin3,proto3" json:"JackpotCoin3,omitempty"` //奖池3
	JackpotCoin4 int64 `protobuf:"varint,40,opt,name=JackpotCoin4,proto3" json:"JackpotCoin4,omitempty"` //奖池4
}

func (x *CoinPoolSetting) Reset() {
	*x = CoinPoolSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinPoolSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinPoolSetting) ProtoMessage() {}

func (x *CoinPoolSetting) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinPoolSetting.ProtoReflect.Descriptor instead.
func (*CoinPoolSetting) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *CoinPoolSetting) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CoinPoolSetting) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *CoinPoolSetting) GetServerId() int32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CoinPoolSetting) GetInitValue() int32 {
	if x != nil {
		return x.InitValue
	}
	return 0
}

func (x *CoinPoolSetting) GetLowerLimit() int32 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *CoinPoolSetting) GetUpperLimit() int32 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *CoinPoolSetting) GetUpperOffsetLimit() int32 {
	if x != nil {
		return x.UpperOffsetLimit
	}
	return 0
}

func (x *CoinPoolSetting) GetMaxOutValue() int32 {
	if x != nil {
		return x.MaxOutValue
	}
	return 0
}

func (x *CoinPoolSetting) GetChangeRate() int32 {
	if x != nil {
		return x.ChangeRate
	}
	return 0
}

func (x *CoinPoolSetting) GetMinOutPlayerNum() int32 {
	if x != nil {
		return x.MinOutPlayerNum
	}
	return 0
}

func (x *CoinPoolSetting) GetUpperLimitOfOdds() int32 {
	if x != nil {
		return x.UpperLimitOfOdds
	}
	return 0
}

func (x *CoinPoolSetting) GetBaseRate() int32 {
	if x != nil {
		return x.BaseRate
	}
	return 0
}

func (x *CoinPoolSetting) GetCtroRate() int32 {
	if x != nil {
		return x.CtroRate
	}
	return 0
}

func (x *CoinPoolSetting) GetHardTimeMin() int32 {
	if x != nil {
		return x.HardTimeMin
	}
	return 0
}

func (x *CoinPoolSetting) GetHardTimeMax() int32 {
	if x != nil {
		return x.HardTimeMax
	}
	return 0
}

func (x *CoinPoolSetting) GetNormalTimeMin() int32 {
	if x != nil {
		return x.NormalTimeMin
	}
	return 0
}

func (x *CoinPoolSetting) GetNormalTimeMax() int32 {
	if x != nil {
		return x.NormalTimeMax
	}
	return 0
}

func (x *CoinPoolSetting) GetEasyTimeMin() int32 {
	if x != nil {
		return x.EasyTimeMin
	}
	return 0
}

func (x *CoinPoolSetting) GetEasyTimeMax() int32 {
	if x != nil {
		return x.EasyTimeMax
	}
	return 0
}

func (x *CoinPoolSetting) GetEasrierTimeMin() int32 {
	if x != nil {
		return x.EasrierTimeMin
	}
	return 0
}

func (x *CoinPoolSetting) GetEasrierTimeMax() int32 {
	if x != nil {
		return x.EasrierTimeMax
	}
	return 0
}

func (x *CoinPoolSetting) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CoinPoolSetting) GetCpCangeType() int32 {
	if x != nil {
		return x.CpCangeType
	}
	return 0
}

func (x *CoinPoolSetting) GetCpChangeInterval() int32 {
	if x != nil {
		return x.CpChangeInterval
	}
	return 0
}

func (x *CoinPoolSetting) GetCpChangeTotle() int32 {
	if x != nil {
		return x.CpChangeTotle
	}
	return 0
}

func (x *CoinPoolSetting) GetCpChangeLower() int32 {
	if x != nil {
		return x.CpChangeLower
	}
	return 0
}

func (x *CoinPoolSetting) GetCpChangeUpper() int32 {
	if x != nil {
		return x.CpChangeUpper
	}
	return 0
}

func (x *CoinPoolSetting) GetProfitRate() int32 {
	if x != nil {
		return x.ProfitRate
	}
	return 0
}

func (x *CoinPoolSetting) GetCoinPoolMode() int32 {
	if x != nil {
		return x.CoinPoolMode
	}
	return 0
}

func (x *CoinPoolSetting) GetResetTime() int32 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *CoinPoolSetting) GetProfitAutoRate() int32 {
	if x != nil {
		return x.ProfitAutoRate
	}
	return 0
}

func (x *CoinPoolSetting) GetProfitManualRate() int32 {
	if x != nil {
		return x.ProfitManualRate
	}
	return 0
}

func (x *CoinPoolSetting) GetProfitUseManual() bool {
	if x != nil {
		return x.ProfitUseManual
	}
	return false
}

func (x *CoinPoolSetting) GetCoinValue() int64 {
	if x != nil {
		return x.CoinValue
	}
	return 0
}

func (x *CoinPoolSetting) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *CoinPoolSetting) GetProfitPool() int64 {
	if x != nil {
		return x.ProfitPool
	}
	return 0
}

func (x *CoinPoolSetting) GetJackpotCoin1() int64 {
	if x != nil {
		return x.JackpotCoin1
	}
	return 0
}

func (x *CoinPoolSetting) GetJackpotCoin2() int64 {
	if x != nil {
		return x.JackpotCoin2
	}
	return 0
}

func (x *CoinPoolSetting) GetJackpotCoin3() int64 {
	if x != nil {
		return x.JackpotCoin3
	}
	return 0
}

func (x *CoinPoolSetting) GetJackpotCoin4() int64 {
	if x != nil {
		return x.JackpotCoin4
	}
	return 0
}

//邮件
type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MType      int32  `protobuf:"varint,2,opt,name=MType,proto3" json:"MType,omitempty"`           //消息类型
	Title      string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`            //标题
	Content    string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`        //内容
	State      int32  `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`           //当前消息状态
	CreateTime int64  `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` //创建时间戳
	SrcSnid    int32  `protobuf:"varint,7,opt,name=SrcSnid,proto3" json:"SrcSnid,omitempty"`       //发送人ID
	DestSnid   int32  `protobuf:"varint,8,opt,name=DestSnid,proto3" json:"DestSnid,omitempty"`     //目标人ID
	Coin       int64  `protobuf:"varint,9,opt,name=Coin,proto3" json:"Coin,omitempty"`             //携带金币数量
	GiftId     string `protobuf:"bytes,10,opt,name=GiftId,proto3" json:"GiftId,omitempty"`
	GiftState  int32  `protobuf:"varint,11,opt,name=GiftState,proto3" json:"GiftState,omitempty"`
	Platform   string `protobuf:"bytes,12,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *MessageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageInfo) GetMType() int32 {
	if x != nil {
		return x.MType
	}
	return 0
}

func (x *MessageInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MessageInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *MessageInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MessageInfo) GetSrcSnid() int32 {
	if x != nil {
		return x.SrcSnid
	}
	return 0
}

func (x *MessageInfo) GetDestSnid() int32 {
	if x != nil {
		return x.DestSnid
	}
	return 0
}

func (x *MessageInfo) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MessageInfo) GetGiftId() string {
	if x != nil {
		return x.GiftId
	}
	return ""
}

func (x *MessageInfo) GetGiftState() int32 {
	if x != nil {
		return x.GiftState
	}
	return 0
}

func (x *MessageInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type HorseRaceLamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Platform   string  `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Title      string  `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Content    string  `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"` //公告内容
	Footer     string  `protobuf:"bytes,5,opt,name=Footer,proto3" json:"Footer,omitempty"`
	StartTime  int64   `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`   //开始时间
	Frequency  int32   `protobuf:"varint,7,opt,name=Frequency,proto3" json:"Frequency,omitempty"`   // 公告间隔
	State      int32   `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`           // 状态：0.启用；1.关闭
	CreateTime int64   `protobuf:"varint,9,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` //创建时间
	Count      int32   `protobuf:"varint,10,opt,name=Count,proto3" json:"Count,omitempty"`          //播放次数
	Priority   int32   `protobuf:"varint,11,opt,name=Priority,proto3" json:"Priority,omitempty"`    //播放优先级
	MsgType    int32   `protobuf:"varint,12,opt,name=MsgType,proto3" json:"MsgType,omitempty"`      //公告类型
	Target     []int32 `protobuf:"varint,13,rep,packed,name=Target,proto3" json:"Target,omitempty"`
	StandSec   int32   `protobuf:"varint,14,opt,name=StandSec,proto3" json:"StandSec,omitempty"`
}

func (x *HorseRaceLamp) Reset() {
	*x = HorseRaceLamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorseRaceLamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorseRaceLamp) ProtoMessage() {}

func (x *HorseRaceLamp) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorseRaceLamp.ProtoReflect.Descriptor instead.
func (*HorseRaceLamp) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *HorseRaceLamp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HorseRaceLamp) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *HorseRaceLamp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HorseRaceLamp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HorseRaceLamp) GetFooter() string {
	if x != nil {
		return x.Footer
	}
	return ""
}

func (x *HorseRaceLamp) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HorseRaceLamp) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *HorseRaceLamp) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *HorseRaceLamp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *HorseRaceLamp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HorseRaceLamp) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *HorseRaceLamp) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *HorseRaceLamp) GetTarget() []int32 {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *HorseRaceLamp) GetStandSec() int32 {
	if x != nil {
		return x.StandSec
	}
	return 0
}

//在线统计
type OnlineGameCnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"` //游戏id
	Cnt    int32 `protobuf:"varint,2,opt,name=Cnt,proto3" json:"Cnt,omitempty"`       //在线人数
}

func (x *OnlineGameCnt) Reset() {
	*x = OnlineGameCnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineGameCnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineGameCnt) ProtoMessage() {}

func (x *OnlineGameCnt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineGameCnt.ProtoReflect.Descriptor instead.
func (*OnlineGameCnt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *OnlineGameCnt) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *OnlineGameCnt) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

type OnlineReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCnt               int32            `protobuf:"varint,1,opt,name=TotalCnt,proto3" json:"TotalCnt,omitempty"`                       // 在线总人数
	AndroidOnlineCnt       int32            `protobuf:"varint,2,opt,name=AndroidOnlineCnt,proto3" json:"AndroidOnlineCnt,omitempty"`       //android在线
	IosOnlineCnt           int32            `protobuf:"varint,3,opt,name=IosOnlineCnt,proto3" json:"IosOnlineCnt,omitempty"`               // ios在线
	DatingPlayers          int32            `protobuf:"varint,4,opt,name=DatingPlayers,proto3" json:"DatingPlayers,omitempty"`             // 总大厅人数
	OnRoomPlayers          int32            `protobuf:"varint,5,opt,name=OnRoomPlayers,proto3" json:"OnRoomPlayers,omitempty"`             // 正在游戏房间人数
	TodayRegisterOnline    int32            `protobuf:"varint,6,opt,name=TodayRegisterOnline,proto3" json:"TodayRegisterOnline,omitempty"` // 当天注册在线
	SevenDayRegisterOnline int32            `protobuf:"varint,7,opt,name=SevenDayRegisterOnline,proto3" json:"SevenDayRegisterOnline,omitempty"`
	GameCount              []*OnlineGameCnt `protobuf:"bytes,8,rep,name=GameCount,proto3" json:"GameCount,omitempty"` // 1-7天注册在线
}

func (x *OnlineReport) Reset() {
	*x = OnlineReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineReport) ProtoMessage() {}

func (x *OnlineReport) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineReport.ProtoReflect.Descriptor instead.
func (*OnlineReport) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *OnlineReport) GetTotalCnt() int32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *OnlineReport) GetAndroidOnlineCnt() int32 {
	if x != nil {
		return x.AndroidOnlineCnt
	}
	return 0
}

func (x *OnlineReport) GetIosOnlineCnt() int32 {
	if x != nil {
		return x.IosOnlineCnt
	}
	return 0
}

func (x *OnlineReport) GetDatingPlayers() int32 {
	if x != nil {
		return x.DatingPlayers
	}
	return 0
}

func (x *OnlineReport) GetOnRoomPlayers() int32 {
	if x != nil {
		return x.OnRoomPlayers
	}
	return 0
}

func (x *OnlineReport) GetTodayRegisterOnline() int32 {
	if x != nil {
		return x.TodayRegisterOnline
	}
	return 0
}

func (x *OnlineReport) GetSevenDayRegisterOnline() int32 {
	if x != nil {
		return x.SevenDayRegisterOnline
	}
	return 0
}

func (x *OnlineReport) GetGameCount() []*OnlineGameCnt {
	if x != nil {
		return x.GameCount
	}
	return nil
}

type CommonNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sort      int32  `protobuf:"varint,1,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	TypeName  string `protobuf:"bytes,4,opt,name=TypeName,proto3" json:"TypeName,omitempty"`
	Type      int32  `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	StartTime int64  `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   int64  `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Platform  string `protobuf:"bytes,8,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *CommonNotice) Reset() {
	*x = CommonNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonNotice) ProtoMessage() {}

func (x *CommonNotice) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonNotice.ProtoReflect.Descriptor instead.
func (*CommonNotice) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *CommonNotice) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CommonNotice) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CommonNotice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommonNotice) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *CommonNotice) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommonNotice) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CommonNotice) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CommonNotice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type CommonNoticeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*CommonNotice `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Platform string          `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *CommonNoticeList) Reset() {
	*x = CommonNoticeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonNoticeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonNoticeList) ProtoMessage() {}

func (x *CommonNoticeList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonNoticeList.ProtoReflect.Descriptor instead.
func (*CommonNoticeList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *CommonNoticeList) GetList() []*CommonNotice {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonNoticeList) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type ExchangeShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                     //商品ID
	Picture      string `protobuf:"bytes,2,opt,name=Picture,proto3" json:"Picture,omitempty"`            // 图片
	Type         int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`                 // 类型 1，话费2，实物
	Name         string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`                  // 名称
	Price        int32  `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`               // 消耗V卡
	Content      string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`            //规则说明
	ShopLimit    int32  `protobuf:"varint,7,opt,name=ShopLimit,proto3" json:"ShopLimit,omitempty"`       // 剩余总数
	DayMaxLimit  int32  `protobuf:"varint,8,opt,name=DayMaxLimit,proto3" json:"DayMaxLimit,omitempty"`   // 单日限购总数
	DayPlayLimit int32  `protobuf:"varint,9,opt,name=DayPlayLimit,proto3" json:"DayPlayLimit,omitempty"` // 个人单日购买
}

func (x *ExchangeShop) Reset() {
	*x = ExchangeShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeShop) ProtoMessage() {}

func (x *ExchangeShop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeShop.ProtoReflect.Descriptor instead.
func (*ExchangeShop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *ExchangeShop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeShop) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *ExchangeShop) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExchangeShop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeShop) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExchangeShop) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ExchangeShop) GetShopLimit() int32 {
	if x != nil {
		return x.ShopLimit
	}
	return 0
}

func (x *ExchangeShop) GetDayMaxLimit() int32 {
	if x != nil {
		return x.DayMaxLimit
	}
	return 0
}

func (x *ExchangeShop) GetDayPlayLimit() int32 {
	if x != nil {
		return x.DayPlayLimit
	}
	return 0
}

// etcd /game/exchange_shop
type ExchangeShopList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*ExchangeShop `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Platform string          `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *ExchangeShopList) Reset() {
	*x = ExchangeShopList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeShopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeShopList) ProtoMessage() {}

func (x *ExchangeShopList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeShopList.ProtoReflect.Descriptor instead.
func (*ExchangeShopList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *ExchangeShopList) GetList() []*ExchangeShop {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ExchangeShopList) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type ItemShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                //商品ID
	ItemId            int32   `protobuf:"varint,2,opt,name=ItemId,proto3" json:"ItemId,omitempty"`                        //道具ID
	Page              int32   `protobuf:"varint,3,opt,name=Page,proto3" json:"Page,omitempty"`                            //页面 1，金币页面 2，钻石页面 3，道具页面
	Order             int32   `protobuf:"varint,4,opt,name=Order,proto3" json:"Order,omitempty"`                          //排序  页面内商品的位置排序
	Type              int32   `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`                            // 类型 1，金币 2，钻石 3，道具类型1：用金币或者钻石购买 4.道具类型2：走充值购买 5，其他
	Location          []int32 `protobuf:"varint,6,rep,packed,name=Location,proto3" json:"Location,omitempty"`             // 显示位置 第1位，竖版大厅 第2位，Tienlen1级选场 第3位，捕鱼1级选场
	Picture           string  `protobuf:"bytes,7,opt,name=Picture,proto3" json:"Picture,omitempty"`                       // 图片id
	Name              string  `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`                             // 名称
	Ad                int32   `protobuf:"varint,9,opt,name=Ad,proto3" json:"Ad,omitempty"`                                //是否观看广告 1，是 2，不是
	AdTime            int32   `protobuf:"varint,10,opt,name=AdTime,proto3" json:"AdTime,omitempty"`                       // 观看几次广告
	RepeatTimes       int32   `protobuf:"varint,11,opt,name=RepeatTimes,proto3" json:"RepeatTimes,omitempty"`             // 领取次数
	CoolingTime       []int32 `protobuf:"varint,12,rep,packed,name=CoolingTime,proto3" json:"CoolingTime,omitempty"`      // 观看冷却时间
	Label             []int32 `protobuf:"varint,13,rep,packed,name=Label,proto3" json:"Label,omitempty"`                  // 标签
	Added             int32   `protobuf:"varint,14,opt,name=Added,proto3" json:"Added,omitempty"`                         // 加送百分比
	Amount            int32   `protobuf:"varint,15,opt,name=Amount,proto3" json:"Amount,omitempty"`                       // 货币金额
	Consume           int32   `protobuf:"varint,16,opt,name=Consume,proto3" json:"Consume,omitempty"`                     // 购买消耗类型 1，金币 2，钻石 3，美金 4，柬埔寨币
	ConsumptionAmount int32   `protobuf:"varint,17,opt,name=ConsumptionAmount,proto3" json:"ConsumptionAmount,omitempty"` // 消耗数量 加送百分比（比如加送10%，就配置110）
}

func (x *ItemShop) Reset() {
	*x = ItemShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShop) ProtoMessage() {}

func (x *ItemShop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShop.ProtoReflect.Descriptor instead.
func (*ItemShop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *ItemShop) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemShop) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemShop) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ItemShop) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ItemShop) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ItemShop) GetLocation() []int32 {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ItemShop) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *ItemShop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemShop) GetAd() int32 {
	if x != nil {
		return x.Ad
	}
	return 0
}

func (x *ItemShop) GetAdTime() int32 {
	if x != nil {
		return x.AdTime
	}
	return 0
}

func (x *ItemShop) GetRepeatTimes() int32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *ItemShop) GetCoolingTime() []int32 {
	if x != nil {
		return x.CoolingTime
	}
	return nil
}

func (x *ItemShop) GetLabel() []int32 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ItemShop) GetAdded() int32 {
	if x != nil {
		return x.Added
	}
	return 0
}

func (x *ItemShop) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ItemShop) GetConsume() int32 {
	if x != nil {
		return x.Consume
	}
	return 0
}

func (x *ItemShop) GetConsumptionAmount() int32 {
	if x != nil {
		return x.ConsumptionAmount
	}
	return 0
}

// etcd /game/item_shop
type ItemShopList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*ItemShop `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Platform string      `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *ItemShopList) Reset() {
	*x = ItemShopList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShopList) ProtoMessage() {}

func (x *ItemShopList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShopList.ProtoReflect.Descriptor instead.
func (*ItemShopList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *ItemShopList) GetList() []*ItemShop {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ItemShopList) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

//物品信息
type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId  int32  `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`   // 物品ID
	ItemNum int32  `protobuf:"varint,2,opt,name=ItemNum,proto3" json:"ItemNum,omitempty"` // 物品数量
	Name    string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`        // 名称
}

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *ItemInfo) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemInfo) GetItemNum() int32 {
	if x != nil {
		return x.ItemNum
	}
	return 0
}

func (x *ItemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MatchInfoAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    []*ItemInfo `protobuf:"bytes,1,rep,name=ItemId,proto3" json:"ItemId,omitempty"`        // 道具
	Coin      int64       `protobuf:"varint,2,opt,name=Coin,proto3" json:"Coin,omitempty"`           // 金币
	Diamond   int64       `protobuf:"varint,3,opt,name=Diamond,proto3" json:"Diamond,omitempty"`     // 钻石、
	UpLimit   int32       `protobuf:"varint,4,opt,name=UpLimit,proto3" json:"UpLimit,omitempty"`     // 名次上行
	DownLimit int32       `protobuf:"varint,5,opt,name=DownLimit,proto3" json:"DownLimit,omitempty"` // 名次下行 例如 第一名为 UpLimit 1,DownLimit 1 4~10为 UpLimit 4,DownLimit 10
}

func (x *MatchInfoAward) Reset() {
	*x = MatchInfoAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfoAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfoAward) ProtoMessage() {}

func (x *MatchInfoAward) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfoAward.ProtoReflect.Descriptor instead.
func (*MatchInfoAward) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *MatchInfoAward) GetItemId() []*ItemInfo {
	if x != nil {
		return x.ItemId
	}
	return nil
}

func (x *MatchInfoAward) GetCoin() int64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *MatchInfoAward) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *MatchInfoAward) GetUpLimit() int32 {
	if x != nil {
		return x.UpLimit
	}
	return 0
}

func (x *MatchInfoAward) GetDownLimit() int32 {
	if x != nil {
		return x.DownLimit
	}
	return 0
}

type GameMatchDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                                 // 序号
	GameFreeId        int32             `protobuf:"varint,2,opt,name=GameFreeId,proto3" json:"GameFreeId,omitempty"`                 // 玩法类型 所用的玩法ID
	MatchType         int32             `protobuf:"varint,3,opt,name=MatchType,proto3" json:"MatchType,omitempty"`                   // 比赛类型 1.锦标赛 2.冠军赛
	MatchName         string            `protobuf:"bytes,4,opt,name=MatchName,proto3" json:"MatchName,omitempty"`                    // 场次名字
	MatchNumebr       int32             `protobuf:"varint,5,opt,name=MatchNumebr,proto3" json:"MatchNumebr,omitempty"`               // 报名人数
	MatchPromotion    []int32           `protobuf:"varint,6,rep,packed,name=MatchPromotion,proto3" json:"MatchPromotion,omitempty"`  // 晋级方式
	MatchSwitch       int32             `protobuf:"varint,7,opt,name=MatchSwitch,proto3" json:"MatchSwitch,omitempty"`               // 1.开启 2.关闭
	Award             []*MatchInfoAward `protobuf:"bytes,8,rep,name=Award,proto3" json:"Award,omitempty"`                            // 比赛奖励
	SignupCostCoin    int64             `protobuf:"varint,9,opt,name=SignupCostCoin,proto3" json:"SignupCostCoin,omitempty"`         //报名消耗金币
	SignupCostDiamond int64             `protobuf:"varint,10,opt,name=SignupCostDiamond,proto3" json:"SignupCostDiamond,omitempty"`  //报名消耗钻石
	SignupCostItem    *ItemInfo         `protobuf:"bytes,11,opt,name=SignupCostItem,proto3" json:"SignupCostItem,omitempty"`         //报名消耗道具
	MatchTimeType     int32             `protobuf:"varint,12,opt,name=MatchTimeType,proto3" json:"MatchTimeType,omitempty"`          //冠军赛时效类型 0无时效 1重复时间段 2一次性时间段
	MatchTimeWeek     []int32           `protobuf:"varint,13,rep,packed,name=MatchTimeWeek,proto3" json:"MatchTimeWeek,omitempty"`   //周几
	MatchTimeStartHMS int32             `protobuf:"varint,14,opt,name=MatchTimeStartHMS,proto3" json:"MatchTimeStartHMS,omitempty"`  //几点开始（时*10000 + 分*100 + 秒）
	MatchTimeEndHMS   int32             `protobuf:"varint,15,opt,name=MatchTimeEndHMS,proto3" json:"MatchTimeEndHMS,omitempty"`      //几点结束（时*10000 + 分*100 + 秒）
	MatchTimeStamp    []int64           `protobuf:"varint,16,rep,packed,name=MatchTimeStamp,proto3" json:"MatchTimeStamp,omitempty"` //哪一天（时间戳：开始时间戳-结束时间戳）
	TitleURL          string            `protobuf:"bytes,17,opt,name=TitleURL,proto3" json:"TitleURL,omitempty"`                     //比赛标题后台自定义
	AwardShow         string            `protobuf:"bytes,18,opt,name=AwardShow,proto3" json:"AwardShow,omitempty"`                   //主要奖励展示
	Rule              string            `protobuf:"bytes,19,opt,name=Rule,proto3" json:"Rule,omitempty"`
}

func (x *GameMatchDate) Reset() {
	*x = GameMatchDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchDate) ProtoMessage() {}

func (x *GameMatchDate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchDate.ProtoReflect.Descriptor instead.
func (*GameMatchDate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *GameMatchDate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameMatchDate) GetGameFreeId() int32 {
	if x != nil {
		return x.GameFreeId
	}
	return 0
}

func (x *GameMatchDate) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *GameMatchDate) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *GameMatchDate) GetMatchNumebr() int32 {
	if x != nil {
		return x.MatchNumebr
	}
	return 0
}

func (x *GameMatchDate) GetMatchPromotion() []int32 {
	if x != nil {
		return x.MatchPromotion
	}
	return nil
}

func (x *GameMatchDate) GetMatchSwitch() int32 {
	if x != nil {
		return x.MatchSwitch
	}
	return 0
}

func (x *GameMatchDate) GetAward() []*MatchInfoAward {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *GameMatchDate) GetSignupCostCoin() int64 {
	if x != nil {
		return x.SignupCostCoin
	}
	return 0
}

func (x *GameMatchDate) GetSignupCostDiamond() int64 {
	if x != nil {
		return x.SignupCostDiamond
	}
	return 0
}

func (x *GameMatchDate) GetSignupCostItem() *ItemInfo {
	if x != nil {
		return x.SignupCostItem
	}
	return nil
}

func (x *GameMatchDate) GetMatchTimeType() int32 {
	if x != nil {
		return x.MatchTimeType
	}
	return 0
}

func (x *GameMatchDate) GetMatchTimeWeek() []int32 {
	if x != nil {
		return x.MatchTimeWeek
	}
	return nil
}

func (x *GameMatchDate) GetMatchTimeStartHMS() int32 {
	if x != nil {
		return x.MatchTimeStartHMS
	}
	return 0
}

func (x *GameMatchDate) GetMatchTimeEndHMS() int32 {
	if x != nil {
		return x.MatchTimeEndHMS
	}
	return 0
}

func (x *GameMatchDate) GetMatchTimeStamp() []int64 {
	if x != nil {
		return x.MatchTimeStamp
	}
	return nil
}

func (x *GameMatchDate) GetTitleURL() string {
	if x != nil {
		return x.TitleURL
	}
	return ""
}

func (x *GameMatchDate) GetAwardShow() string {
	if x != nil {
		return x.AwardShow
	}
	return ""
}

func (x *GameMatchDate) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

// etcd /game/game_match
type GameMatchDateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List     []*GameMatchDate `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Platform string           `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
}

func (x *GameMatchDateList) Reset() {
	*x = GameMatchDateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameMatchDateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameMatchDateList) ProtoMessage() {}

func (x *GameMatchDateList) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameMatchDateList.ProtoReflect.Descriptor instead.
func (*GameMatchDateList) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *GameMatchDateList) GetList() []*GameMatchDate {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GameMatchDateList) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x0c, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x44, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x66, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x66, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x66, 0x67, 0x56, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x66,
	0x67, 0x56, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x92, 0x03, 0x0a, 0x0a, 0x43, 0x6c, 0x75,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6c, 0x75, 0x62,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a,
	0x11, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x38, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x79,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x79, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75,
	0x62, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a,
	0x09, 0x54, 0x68, 0x69, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0xb5, 0x0a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4e, 0x65, 0x77,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x34, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x50, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x78, 0x12,
	0x2a, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x54, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x2a, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x08, 0x56, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x2e, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x43, 0x6c, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x11, 0x54, 0x68, 0x69, 0x72, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4e, 0x65, 0x65, 0x64,
	0x53, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x4d,
	0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c,
	0x69, 0x70, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x4d, 0x61, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x50, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x3c,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x10,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x71, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x0a, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x42, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x0a, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x44, 0x62, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x52, 0x0b, 0x44, 0x62,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x05, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x44, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x12, 0x32, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44,
	0x62, 0x4c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x4c, 0x6f, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x44, 0x62, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x42, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x52, 0x0a, 0x44, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x6b,
	0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x70, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x07, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56, 0x49, 0x50,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x61, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x46, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x46, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x52, 0x6f, 0x62, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x52, 0x6f, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x49,
	0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x67, 0x49, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x61, 0x66, 0x65, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x61, 0x66, 0x65, 0x42, 0x6f, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x57, 0x42, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x57, 0x42, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69,
	0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x57, 0x69, 0x6e,
	0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f,
	0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x52, 0x6f, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x49, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x65, 0x74, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x65, 0x74, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x74, 0x73, 0x49, 0x64, 0x73, 0x18,
	0x23, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x74, 0x73, 0x49, 0x64, 0x73, 0x22, 0xf4,
	0x03, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x72, 0x76, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x72,
	0x76, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43,
	0x6c, 0x75, 0x62, 0x49, 0x64, 0x22, 0xb4, 0x04, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x43, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4d,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43,
	0x61, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x72, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x72, 0x76, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x0b, 0x0a, 0x0f,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x69,
	0x6e, 0x4f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a,
	0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x4f, 0x64, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x66, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x74, 0x72, 0x6f, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x74, 0x72, 0x6f, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x61, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x61, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x61, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x61, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x45, 0x61, 0x73, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x61, 0x73, 0x72, 0x69, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x45,
	0x61, 0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x45, 0x61, 0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x45, 0x61, 0x73, 0x72, 0x69, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x70, 0x43, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x70, 0x43, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x6c, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f,
	0x74, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x43, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x31, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x31, 0x12,
	0x22, 0x0a, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x32, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x33, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x34, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4a,
	0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x34, 0x22, 0xb5, 0x02, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x72, 0x63, 0x53, 0x6e, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x74, 0x53, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65, 0x73, 0x74, 0x53, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x69, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47, 0x69,
	0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x48, 0x6f, 0x72, 0x73, 0x65, 0x52, 0x61, 0x63,
	0x65, 0x4c, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x22, 0x39, 0x0a, 0x0d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x43, 0x6e, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6f, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x49, 0x6f, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x6e, 0x52,
	0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x4f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74, 0x52,
	0x09, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x61,
	0x79, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x44, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x54, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb2, 0x03, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x41, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x41, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0c, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x50, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb7, 0x05, 0x0a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x75, 0x6d, 0x65, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x62, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70,
	0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x6f,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65,
	0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x4d, 0x53, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x4d, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x48, 0x4d, 0x53, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x48, 0x4d, 0x53, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x3b, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_common_proto_goTypes = []interface{}{
	(*MysqlDbSetting)(nil),     // 0: pb.MysqlDbSetting
	(*MongoDbSetting)(nil),     // 1: pb.MongoDbSetting
	(*RankSwitch)(nil),         // 2: pb.RankSwitch
	(*ClubConfig)(nil),         // 3: pb.ClubConfig
	(*ThirdGame)(nil),          // 4: pb.ThirdGame
	(*Platform)(nil),           // 5: pb.Platform
	(*GameStatus)(nil),         // 6: pb.GameStatus
	(*GameConfigGlobal)(nil),   // 7: pb.GameConfigGlobal
	(*GameFree)(nil),           // 8: pb.GameFree
	(*PlatformGameConfig)(nil), // 9: pb.PlatformGameConfig
	(*PlatformDbConfig)(nil),   // 10: pb.PlatformDbConfig
	(*GameConfigGroup)(nil),    // 11: pb.GameConfigGroup
	(*AppInfo)(nil),            // 12: pb.AppInfo
	(*PlayerData)(nil),         // 13: pb.PlayerData
	(*RoomInfo)(nil),           // 14: pb.RoomInfo
	(*PlayerSingleAdjust)(nil), // 15: pb.PlayerSingleAdjust
	(*ServerInfo)(nil),         // 16: pb.ServerInfo
	(*CoinPoolSetting)(nil),    // 17: pb.CoinPoolSetting
	(*MessageInfo)(nil),        // 18: pb.MessageInfo
	(*HorseRaceLamp)(nil),      // 19: pb.HorseRaceLamp
	(*OnlineGameCnt)(nil),      // 20: pb.OnlineGameCnt
	(*OnlineReport)(nil),       // 21: pb.OnlineReport
	(*CommonNotice)(nil),       // 22: pb.CommonNotice
	(*CommonNoticeList)(nil),   // 23: pb.CommonNoticeList
	(*ExchangeShop)(nil),       // 24: pb.ExchangeShop
	(*ExchangeShopList)(nil),   // 25: pb.ExchangeShopList
	(*ItemShop)(nil),           // 26: pb.ItemShop
	(*ItemShopList)(nil),       // 27: pb.ItemShopList
	(*ItemInfo)(nil),           // 28: pb.ItemInfo
	(*MatchInfoAward)(nil),     // 29: pb.MatchInfoAward
	(*GameMatchDate)(nil),      // 30: pb.GameMatchDate
	(*GameMatchDateList)(nil),  // 31: pb.GameMatchDateList
	(*server.DB_GameFree)(nil),        // 32: pbdata.DB_GameFree
}
var file_common_proto_depIdxs = []int32{
	2,  // 0: pb.Platform.Leaderboard:type_name -> pb.RankSwitch
	3,  // 1: pb.Platform.ClubConfig:type_name -> pb.ClubConfig
	4,  // 2: pb.Platform.ThirdGameMerchant:type_name -> pb.ThirdGame
	6,  // 3: pb.GameConfigGlobal.GameStatus:type_name -> pb.GameStatus
	32, // 4: pb.GameFree.DbGameFree:type_name -> pbdata.DB_GameFree
	8,  // 5: pb.PlatformGameConfig.DbGameFrees:type_name -> pb.GameFree
	0,  // 6: pb.PlatformDbConfig.Mysql:type_name -> pb.MysqlDbSetting
	1,  // 7: pb.PlatformDbConfig.MongoDb:type_name -> pb.MongoDbSetting
	1,  // 8: pb.PlatformDbConfig.MongoDbLog:type_name -> pb.MongoDbSetting
	32, // 9: pb.GameConfigGroup.DbGameFree:type_name -> pbdata.DB_GameFree
	20, // 10: pb.OnlineReport.GameCount:type_name -> pb.OnlineGameCnt
	22, // 11: pb.CommonNoticeList.List:type_name -> pb.CommonNotice
	24, // 12: pb.ExchangeShopList.List:type_name -> pb.ExchangeShop
	26, // 13: pb.ItemShopList.List:type_name -> pb.ItemShop
	28, // 14: pb.MatchInfoAward.ItemId:type_name -> pb.ItemInfo
	29, // 15: pb.GameMatchDate.Award:type_name -> pb.MatchInfoAward
	28, // 16: pb.GameMatchDate.SignupCostItem:type_name -> pb.ItemInfo
	30, // 17: pb.GameMatchDateList.List:type_name -> pb.GameMatchDate
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	//file_pbdata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlDbSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoDbSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThirdGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfigGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameFree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformGameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformDbConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfigGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSingleAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinPoolSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorseRaceLamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineGameCnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonNoticeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeShopList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShopList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfoAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameMatchDateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
